<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Buffalo.QueryCache</name>
    </assembly>
    <members>
        <member name="T:Buffalo.QueryCache.CacheLoader">
            <summary>
            获取缓存的加载器
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.CacheLoader.GetCache(Buffalo.DB.DataBaseAdapter.DBInfo,System.String,System.String)">
            <summary>
            根据类型创建缓存适配器
            </summary>
            <param name="type">类型</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.QueryCache.MemCachedAdaper">
            <summary>
            利用MemCached做缓存
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.MemCachedAdaper.Config">
            <summary>
            连接配置
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.MemCachedAdaper.ConnectConfiguration">
            <summary>
            连接配置
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.MemCachedAdaper.ConnectClient">
            <summary>
            连接的客户端
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.ReconnectClient">
            <summary>
            重连连接redis
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.#ctor(System.String,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            memcached的适配器
            </summary>
            <param name="connStr">连接字符串</param>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.CreatePool(System.String)">
            <summary>
            创建连接池
            </summary>
            <param name="connStr"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.CreateClient(System.Boolean,System.String)">
            <summary>
            获取连接
            </summary>
            <param name="readOnly"></param>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.GetAllKeys(System.String,Buffalo.QueryCache.MemcachedConnection)">
            <summary>
            查找所有键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.FillAllKeys(System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Net.IPEndPoint)">
            <summary>
            查找键
            </summary>
            <param name="serverIP"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.ExecuteScalarAsString(System.Net.Sockets.Socket,System.String)">
            <summary>
            执行返回字符串标量
            </summary>
            <param name="socket">套接字</param>
            <param name="command">命令</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.QuerySlabId(System.Net.Sockets.Socket)">
            <summary>
            查询slabId
            </summary>
            <param name="socket">套接字</param>
            <returns>slabId遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.ParseStatsItems(System.String)">
            <summary>
            解析STAT items返回slabId
            </summary>
            <param name="contentAsString">解析内容</param>
            <returns>slabId遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.QueryKeys(System.Net.Sockets.Socket,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            查询键
            </summary>
            <param name="socket">套接字</param>
            <param name="slabIdIter">被查询slabId</param>
            <returns>键遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.ParseKeys(System.String)">
            <summary>
            解析stats cachedump返回键
            </summary>
            <param name="contentAsString">解析内容</param>
            <returns>键遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.DoNewVer(System.String,Buffalo.QueryCache.MemcachedConnection)">
            <summary>
            设置版本号
            </summary>
            <param name="key"></param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.GetSetValueMode(Buffalo.DB.CacheManager.SetValueType)">
            <summary>
            获取设置值模式
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.QueryCache.MemcachedConnection">
            <summary>
            Memcached
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.MemcachedConnection.Client">
            <summary>
            关联连接
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisCollections.MemcachedLock.ContextKey">
            <summary>
            在上下文中的Key
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisCollections.MemcachedLock._key">
            <summary>
            要锁的键
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisCollections.MemcachedLock._guidHash">
            <summary>
            标记为本锁的guid
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisCollections.MemcachedLock._threadContext">
            <summary>
            获取线程上下文集合
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.MemcachedLock.GetThreadContext">
            <summary>
            获取线程上下文集合（获取本线程是否已经锁过这个值）
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.RedisCollections.MemcachedLock.HasLock">
            <summary>
            获取此会话是否已经锁定了
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.MemcachedLock.LockObject(System.Int64,System.Int32)">
            <summary>
            锁定Key
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.MemcachedLock.UnLockUser">
            <summary>
            解锁用户
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Buffalo.QueryCache.RedisCollections.MemcachedLock.DeleteLock" -->
        <member name="T:Buffalo.QueryCache.RedisCollections.RedisHash">
            <summary>
            Hash方式的缓存操作
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisHash.SetRangeValue(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            批量给HashSet设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="dicSet">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisHash.SetValue(System.String,System.Object,Buffalo.DB.CacheManager.SetValueType)">
            <summary>
            HashSet设置值
            </summary>
            <param name="key">哈希表的键</param>
            <param name="value">哈希表的值</param>
            <param name="type">设置方式</param>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisHash.GetValue``1(System.String,``0)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">哈希表的键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisHash.GetAllValues``1(``0)">
            <summary>
            获取所有哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisHash.GetAllKeys">
            <summary>
            获取所有哈希表的键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisHash.DeleteValue(System.String)">
            <summary>
            删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisHash.DeleteValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="keys">要删除哈希表的键</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.QueryCache.RedisCollections.RedisList">
            <summary>
            List方式的缓存操作
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisList.#ctor(StackExchange.Redis.IDatabase,System.String,StackExchange.Redis.CommandFlags,System.TimeSpan)">
            <summary>
             List方式的缓存操作
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisList.PopValue``1(System.Boolean,``0)">
            <summary>
            Pop形式输出值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="isPopEnd"></param>
            <returns></returns>
        </member>
        <member name="F:Buffalo.QueryCache.RedisCollections.RedisLock._key">
            <summary>
            要锁的键
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisCollections.RedisLock._guidHash">
            <summary>
            标记为本锁的guid
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisCollections.RedisLock._threadContext">
            <summary>
            获取线程上下文集合
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisLock.GetThreadContext">
            <summary>
            获取线程上下文集合（获取本线程是否已经锁过这个值）
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.RedisCollections.RedisLock.HasLock">
            <summary>
            获取此会话是否已经锁定了
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisLock.LockObject(System.Int64,System.Int32)">
            <summary>
            锁定Key
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisLock.UnLockUser">
            <summary>
            解锁用户
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Buffalo.QueryCache.RedisCollections.RedisLock.DeleteLock" -->
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.#ctor(StackExchange.Redis.IDatabase,System.String,StackExchange.Redis.CommandFlags,System.TimeSpan)">
            <summary>
             List方式的缓存操作
            </summary>
            <param name="lst"></param>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.Add(System.Object,System.Double,Buffalo.DB.CacheManager.SetValueType)">
            <summary>
            向排序表增加元素
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="source">排序键</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.AddRang(System.Collections.Generic.IEnumerable{Buffalo.DB.CacheManager.CacheCollection.SortedSetItem},Buffalo.DB.CacheManager.SetValueType)">
            <summary>
            向排序表增加元素
            </summary>
            <param name="value">值</param>
            <param name="source">排序键</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.Decrement(System.Object,System.Double)">
            <summary>
            减少排序的元素的排序分
            </summary>
            <param name="value">值</param>
            <param name="source">排序分</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.Increment(System.Object,System.Double)">
            <summary>
            增加排序的元素的排序分
            </summary>
            <param name="key">key</param>
            <param name="value">值</param>
            <param name="score">排序分</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetLength(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            获取集合长度
            </summary>
            <typeparam name="E"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetExclude``1(System.Nullable{``0},System.Nullable{``0})">
            <summary>
            获取排除项
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetObjectExclude(System.Object,System.Object)">
            <summary>
            获取排除项
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetOeder(Buffalo.DB.QueryConditions.SortType)">
            <summary>
            获取Order
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetRangeByRankWithScores(System.Int64,System.Int64,Buffalo.DB.QueryConditions.SortType)">
            <summary>
            根据索引范围获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetRangeByRank``1(System.Int64,System.Int64,Buffalo.DB.QueryConditions.SortType)">
            <summary>
            根据索引范围获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetRangeByScore``1(System.Nullable{System.Double},System.Nullable{System.Double},Buffalo.DB.QueryConditions.SortType,System.Int64,System.Int64)">
            <summary>
            根据索引范围获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetRangeByScoreWithScores(System.Nullable{System.Double},System.Nullable{System.Double},Buffalo.DB.QueryConditions.SortType,System.Int64,System.Int64)">
            <summary>
            根据索引范围获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetRangeByValue``1(System.Object,System.Object,System.Int64,System.Int64)">
            <summary>
            根据索引范围获取值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetIndex(System.Object,Buffalo.DB.QueryConditions.SortType)">
            <summary>
            获取索引
            </summary>
            <param name="value"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.GetKeyByValue(System.Object)">
            <summary>
            获取索引
            </summary>
            <param name="value"></param>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.Remove(System.Object)">
            <summary>
            删除值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.Remove(System.Object[])">
            <summary>
            删除值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.RemoveRangeByRank(System.Int64,System.Int64)">
            <summary>
            删除值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.RemoveRangeByKey(System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            删除值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisCollections.RedisSortedSet.RemoveRangeByValue(System.Object,System.Object)">
            <summary>
            删除值
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._mainServer">
            <summary>
            主服务器
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._serverCount">
            <summary>
            服务器数量
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._commanfFlags">
            <summary>
            命令标记
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.RedisAdaperByStackExchange.UseCommanfFlags">
            <summary>
            命令标记
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._db">
            <summary>
            使用第几个库(0-15)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Buffalo.QueryCache.RedisAdaperByStackExchange.UseDB" -->
        <member name="P:Buffalo.QueryCache.RedisAdaperByStackExchange.ConnectConfiguration">
            <summary>
            连接配置
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.RedisAdaperByStackExchange.ConnectClient">
            <summary>
            连接的客户端
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.ReconnectClient">
            <summary>
            重连连接redis
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.#ctor(System.String,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            memcached的适配器
            </summary>
            <param name="connStr">连接字符串</param>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._hasROServer">
            <summary>
            是否有只读服务器
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.CreateManager(System.String)">
            <summary>
            创建连接池
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.GetValue``1(System.String,``0,Buffalo.QueryCache.RedisConnection)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.GetAllKeys(System.String,Buffalo.QueryCache.RedisConnection)">
            <summary>
            所有键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.DoNewVer(System.String,Buffalo.QueryCache.RedisConnection)">
            <summary>
            设置版本号
            </summary>
            <param name="key"></param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.GetValues(System.String[],Buffalo.QueryCache.RedisConnection)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="valueType">值类型</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.GetSetValueMode(Buffalo.DB.CacheManager.SetValueType)">
            <summary>
            获取设置值模式
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.QueryCache.RedisConnection">
            <summary>
            Redis连接
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisConnection.DB">
            <summary>
            关联连接
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisConverter._dicAllowConvert">
            <summary>
            允许转换的类型
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisConverter._dicRedisConvert">
            <summary>
            转换的函数
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.LoadAllowRedisConvert">
            <summary>
            加载转换函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.LoadAllowConvert">
            <summary>
            加载允许转换类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.RedisValueToValue``1(StackExchange.Redis.RedisValue,``0)">
            <summary>
            RedisValue值转换成指定值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.ValueToRedisValue(System.Object)">
            <summary>
            值转换成RedisValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:MemcacheClient.MemDataSerialize">
            <summary>
            缓存数据序列化
            </summary>
        </member>
        <member name="F:MemcacheClient.MemDataSerialize.DefaultEncoding">
            <summary>
            默认编码
            </summary>
        </member>
        <member name="F:MemcacheClient.MemDataSerialize.HeadData">
            <summary>
            数据头表示
            </summary>
        </member>
        <member name="F:MemcacheClient.MemDataSerialize.ListHeadData">
            <summary>
            集合数据头表示
            </summary>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.DataSetToBytes(System.Data.DataSet)">
            <summary>
            数据写入成字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.WriteDataTable(System.Data.DataTable,System.IO.BinaryWriter)">
            <summary>
            写入数据表信息
            </summary>
            <param name="dt"></param>
            <param name="bw"></param>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.LoadDataSet(System.IO.Stream)">
            <summary>
            把数据从流中加载出来
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.IsHead(System.IO.Stream)">
            <summary>
            判断数据头是否对应
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.IsListHead(System.IO.Stream)">
            <summary>
            判断数据头是否对应
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.LoadList(System.IO.Stream,System.Type)">
            <summary>
            把数据从流中加载出来
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.ListToBytes(System.Collections.IList)">
            <summary>
            数据写入成字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.WriteEntityList(System.Collections.IList,System.IO.BinaryWriter)">
            <summary>
            写入数据表信息
            </summary>
            <param name="lst">实体集合</param>
            <param name="bw">写入器</param>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.CreateList(System.Type)">
            <summary>
            创建实体集合类
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.ReadEntityList(System.IO.BinaryReader,System.Type)">
            <summary>
            读取实体集合
            </summary>
            <param name="br">读取器</param>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:MemcacheClient.MemPropertyInfo">
            <summary>
            内存流属性信息
            </summary>
        </member>
        <member name="P:MemcacheClient.MemPropertyInfo.MemItem">
            <summary>
            读写器
            </summary>
        </member>
        <member name="P:MemcacheClient.MemPropertyInfo.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="T:MemcacheClient.MemTypeItem">
            <summary>
            读写器的类型项
            </summary>
        </member>
        <member name="M:MemcacheClient.MemTypeItem.#ctor(System.Int32,System.Type,MemcacheClient.ReadInfo,MemcacheClient.WriteInfo)">
            <summary>
            读写器的类型项
            </summary>
            <param name="typeID"></param>
            <param name="itemType"></param>
            <param name="readHandle"></param>
            <param name="writerHandle"></param>
        </member>
        <member name="F:MemcacheClient.MemTypeItem._typeID">
            <summary>
            数值类型ID
            </summary>
        </member>
        <member name="P:MemcacheClient.MemTypeItem.ItemType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:MemcacheClient.MemTypeItem.ReadHandle">
            <summary>
            读取方法
            </summary>
        </member>
        <member name="P:MemcacheClient.MemTypeItem.WriterHandle">
            <summary>
            写入方法
            </summary>
        </member>
        <member name="T:MemcacheClient.MemTypeManager">
            <summary>
            读写器类型管理器
            </summary>
        </member>
        <member name="F:MemcacheClient.MemTypeManager.EmptyItem">
            <summary>
            空类型
            </summary>
        </member>
        <member name="F:MemcacheClient.MemTypeManager.EnumItem">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.GetTypeInfo(System.Type)">
            <summary>
            获取类型信息
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.GetTypeByID(System.Int32)">
            <summary>
            根据类型ID获取类型信息
            </summary>
            <param name="typeID">类型ID</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.AddItem``1(System.Int32,MemcacheClient.ReadInfo,MemcacheClient.WriteInfo)">
            <summary>
            添加项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeID">分配的ID</param>
            <param name="readInfo">读取器</param>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.AddItem(MemcacheClient.MemTypeItem)">
            <summary>
            添加项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeID">分配的ID</param>
            <param name="readInfo">读取器</param>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.ReadChars(System.IO.BinaryReader)">
            <summary>
            读取字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.ReadEnum(System.IO.BinaryReader)">
            <summary>
            读取字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.ReadBytes(System.IO.BinaryReader)">
            <summary>
            读取字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.WriteChars(System.IO.BinaryWriter,System.Object)">
            <summary>
            写入值
            </summary>
            <param name="writer">写入器</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.WriteBytes(System.IO.BinaryWriter,System.Object)">
            <summary>
            写入值
            </summary>
            <param name="writer">写入器</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.WriteEnum(System.IO.BinaryWriter,System.Object)">
            <summary>
            写入值
            </summary>
            <param name="writer">写入器</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
    </members>
</doc>
