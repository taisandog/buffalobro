<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Buffalo.Kernel</name>
    </assembly>
    <members>
        <member name="T:Buffalo.Kernel.ClassProxyBuilder.DefaultProxyBuilder">
            <summary>
            代理建造类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.DefaultProxyBuilder.#ctor(System.String,System.Type)">
            <summary>
            代理建造类
            </summary>
            <param name="classNamespace">类的命名空间</param>
            <param name="interceptorType">拦截器</param>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.DefaultProxyBuilder.CreateProxyType(System.Type,System.String)">
            <summary>
            建造代理类
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.DefaultProxyBuilder.BulidType(System.Type,System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            建造类
            </summary>
            <param name="classType"></param>
            <param name="moduleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.DefaultProxyBuilder.NeedBuildBeforeMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            判断需要重建函数
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.DefaultProxyBuilder.NeedBuildAfterMethod(System.Type,System.Reflection.MethodInfo)">
            <summary>
            判断需要重建函数
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.DefaultProxyBuilder.BuildMethod(System.Type,System.Reflection.Emit.FieldBuilder,System.Reflection.Emit.TypeBuilder)">
            <summary>
            建方法
            </summary>
            <param name="classType"></param>
            <param name="inspectorFieldBuilder"></param>
            <param name="typeBuilder"></param>
        </member>
        <member name="T:Buffalo.Kernel.ClassProxyBuilder.IInterceptor">
            <summary>
            拦截器接口
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.IInterceptor.BeforeCall(System.String,System.Object[])">
            <summary>
            方法调用前
            </summary>
            <param name="operationName">方法名</param>
            <param name="inputs">参数</param>
            <returns>状态对象，用于调用后传入</returns>
        </member>
        <member name="M:Buffalo.Kernel.ClassProxyBuilder.IInterceptor.AfterCall(System.Object,System.String,System.Object,System.Object)">
            <summary>
            方法调用后
            </summary>
            <param name="operationName">方法名</param>
            <param name="returnValue">结果</param>
            <param name="correlationState">状态对象</param>
        </member>
        <member name="T:Buffalo.Kernel.Collections.LinkedDictionary`2">
            <summary>
            保存了活跃度的Dictionary
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LinkedDictionary`2._dic">
            <summary>
            存储数据的字典
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LinkedDictionary`2._lk">
            <summary>
            存储数据的字典
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LinkedDictionary`2._isGetToUpdate">
            <summary>
            get值时候是否触发
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,System.Collections.Generic.LinkedListNode{Buffalo.Kernel.Collections.LinkedValueNode{`0,`1}}},System.Boolean)">
            <summary>
            保存了活跃度的Dictionary
            </summary>
            <param name="dic">托管的字典</param>
            <param name="isGetToUpdate">Get值时候是否要更新活跃度</param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.#ctor(System.Boolean)">
            <summary>
            保存了活跃度的Dictionary
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedDictionary`2.Item(`0)">
            <summary>
            存取值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.MoveToLast(System.Collections.Generic.LinkedListNode{Buffalo.Kernel.Collections.LinkedValueNode{`0,`1}})">
            <summary>
            把节点移动到最新
            </summary>
            <param name="node"></param>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedDictionary`2.IsGetToUpdate">
            <summary>
            get值时候是否触发更新
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedDictionary`2.TimeInfos">
            <summary>
            活跃度信息
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Add(`0,`1)">
            <summary>
            添加一个带有所提供的键和值的元素
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Add(Buffalo.Kernel.Collections.LinkedValueNode{`0,`1})">
            <summary>
            添加一个带有所提供的键和值的元素
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.OnAddNew(Buffalo.Kernel.Collections.LinkedValueNode{`0,`1})">
            <summary>
            当发生AddNew时候
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.OnUpdate(Buffalo.Kernel.Collections.LinkedValueNode{`0,`1})">
            <summary>
            当发生AddNew时候
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            添加一个带有所提供的键和值的元素
            </summary>
            <param name="item">项</param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Clear">
            <summary>
            清空所有
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            是否包含此项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.ContainsKey(`0)">
            <summary>
             是否包含此键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            把值复制到数组
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.GetEnumerator">
            <summary>
            获取枚举
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Remove(`0)">
            <summary>
            删除键
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.RemoveKey(`0)">
            <summary>
            删除键并返回值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Remove(System.Collections.Generic.LinkedListNode{Buffalo.Kernel.Collections.LinkedValueNode{`0,`1}})">
            <summary>
            删除项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            删除项
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            获取与指定键关联的值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.TrimCount(System.Int32)">
            <summary>
             按最低活跃度开始裁剪元素集合
            </summary>
            <param name="count">保留个数</param>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedDictionary`2.OldestNode">
            <summary>
            最老的节点
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedDictionary`2.LatestNode">
            <summary>
            最新的节点
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.GetEnumeratorOldToNew">
            <summary>
            获取一个从旧到新的枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionary`2.GetEnumeratorNewToOld">
            <summary>
            获取一个从新到旧的枚举器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedUnit.LinkedListNodeMoceNext``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            获取下一个节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">双链表</param>
            <param name="currentNode">当前节点</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedUnit.LinkedListNodeMocePrevious``1(System.Collections.Generic.LinkedList{``0},System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            获取上一个节点
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">双链表</param>
            <param name="currentNode">当前节点</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.Collections.LinkedDictionaryCollection`2">
            <summary>
            LRU字典枚举器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedDictionaryCollection`2.IsMoveNext">
            <summary>
            是否向后枚举
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.Collections.LinkedDictionaryEnumerator`2">
            <summary>
            LRU字典的枚举,向后枚举
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LinkedDictionaryEnumerator`2._currentNode">
            <summary>
            当前节点
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LinkedDictionaryEnumerator`2._isStart">
            <summary>
            是否已经开始移动了
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionaryEnumerator`2.#ctor(System.Collections.Generic.LinkedList{Buffalo.Kernel.Collections.LinkedValueNode{`0,`1}})">
            <summary>
            LRU字典的枚举
            </summary>
            <param name="enumTk">枚举器</param>
        </member>
        <member name="T:Buffalo.Kernel.Collections.LinkedDictionaryEnumeratorMovePrevious`2">
            <summary>
            LRU字典的枚举,向前枚举
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="K"></typeparam>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedDictionaryEnumeratorMovePrevious`2.#ctor(System.Collections.Generic.LinkedList{Buffalo.Kernel.Collections.LinkedValueNode{`0,`1}})">
            <summary>
            LRU字典的枚举
            </summary>
            <param name="enumTk">枚举器</param>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedValueNode`2.ExpiredDate">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LinkedValueNode`2.#ctor(`0,`1)">
            <summary>
            节点
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedValueNode`2.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedValueNode`2.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.Collections.LinkedValueNode`2.KeyValue">
            <summary>
            Key/Value值
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.Collections.LockObjects`1">
            <summary>
            为某个值提供锁对象的管理器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Buffalo.Kernel.Collections.LockObjects`2">
            <summary>
            为某个值提供锁对象的管理器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LockObjects`2._lastClean">
            <summary>
            最后清理时间
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LockObjects`2.CleanSeconds">
            <summary>
            清理间隔(秒)
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LockObjects`2.#ctor">
            <summary>
            内存锁定记录
            </summary>
            <param name="timeoutMillisecond">超时时间(毫秒数)</param>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LockObjects`2.GetObject(`0)">
            <summary>
            获取要锁的对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LockObjects`2.ClearTimeout(System.DateTime)">
            <summary>
            清除超时
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Collections.LockObjects`2.DeleteObject(`0)">
            <summary>
            释放对象
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.Collections.LockItem`2">
            <summary>
            要锁的项
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LockItem`2.LockObject">
            <summary>
            要锁的类
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Collections.LockItem`2.LastTime">
            <summary>
            最后访问时间
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.CommonMethods">
            <summary>
            常用的方法类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.GetBaseRoot(System.String)">
            <summary>
            获取基路径
            </summary>
            <param name="configRoot"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.IsPatternMatch(System.String,System.String)">
            <summary>
            通配符比较
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">通配符，允许使用的通配符：?，*，其中? 代表任意一个字符，* 代表零或多个任意字符</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.Kernel.CommonMethods.IsWebContext">
            <summary>
            检测是否Web程序
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.GetBaseRoot">
            <summary>
            获取应用程序的基目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.CopyNewer(System.String,System.String)">
            <summary>
            通过版本号判断拷贝文件
            </summary>
            <param name="source">源文件</param>
            <param name="target">目标文件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.IsNullOrWhiteSpace(System.String)">
            <summary>
            判断字符串是 null、空还是仅由空白字符组成（为.net2.0扩展的方法，等同于string.IsNullOrWhiteSpace）
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.IsCollectionNullOrEmpty(System.Collections.ICollection)">
            <summary>
            判断集合是 null还是空的集合。
            </summary>
            <param name="lst"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.IsNull(System.Object)">
            <summary>
            判断是否为空
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.GuidToString(System.Guid,System.Boolean)">
            <summary>
            GUID转成字符串
            </summary>
            <param name="id"></param>
             <param name="isUpper">是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.GuidToString(System.Guid)">
            <summary>
            GUID转成字符串
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.StringToGuid(System.String)">
            <summary>
            字符串转回GUID
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ConvertIntDateTime(System.Double,System.Boolean,System.Boolean)">
            <summary>
            将时间戳转换为DateTime类型时间
            </summary>
            <param name="d">double 型数字</param>
            <param name="useSecond">true传入的是秒数,false传入的是毫秒数</param>
            <param name="isUTC">时间戳是否格林威治标准时间</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ConvertIntDateTime(System.Double)">
            <summary>
            将UTC时间戳转换为UTC的DateTime类型时间(秒数)
            </summary>
            <param name="d">double 型数字</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ConvertDateTimeInt(System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            将c# DateTime时间格式转换为时间戳格式
            </summary>
            <param name="time">时间</param>
             <param name="useSecond">true返回秒数,false返回毫秒数</param>
             <param name="isUTC">是否返回格林威治标准时间戳</param>
            <returns>double</returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ConvertDateTimeInt(System.DateTime)">
            <summary>
            将c# DateTime时间格式转换为Unix时间戳格式(秒)
            </summary>
            <param name="time">时间</param>
            <returns>double</returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.GetLocalIP">
            <summary>
            获取本机IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.EntityProChangeType(System.Object,System.Type)">
            <summary>
            实体类型转换
            </summary>
            <param name="sValue">源值</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ChangeType(System.Object,System.Type)">
            <summary>
            转换类型
            </summary>
            <param name="sValue">值</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.LoadStreamData(System.IO.Stream)">
            <summary>
            读取流的内容
            </summary>
            <param name="stm">流</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.LoadStreamData2(System.IO.Stream)">
            <summary>
            读取流的内容
            </summary>
            <param name="stm">流</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.CopyStreamData(System.IO.Stream,System.IO.Stream)">
            <summary>
            流内容复制
            </summary>
            <param name="stmSource">源</param>
            <param name="stmTarget">目标</param>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.CopyStreamData(System.IO.Stream,System.IO.Stream,System.Int64,System.Web.HttpResponse)">
            <summary>
            流内容复制
            </summary>
            <param name="stmSource">源</param>
            <param name="stmTarget">目标</param>
            <param name="length">长度(小于0则全部复制)</param>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.GetAllNumber(System.String)">
            <summary>
            获取字符串里边的所有数字
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.BytesToHexString(System.Byte[],System.Boolean)">
            <summary>
            把字节数组转成十六进制字符串
            </summary>
            <param name="bye">字节数组</param>
            <param name="isUpper">是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ToByteString(System.String,System.Boolean)">
            <summary>
            把文字转成十六进制字符码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ToByteString(System.String)">
            <summary>
            把文字转成十六进制字符码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.HexStringToBytes(System.String)">
            <summary>
            把十六进制字符串转成字节数组
            </summary>
            <param name="str">十六进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ListToDictionary``2(System.Collections.IEnumerable,System.String)">
            <summary>
            把集合转换成字典类
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型 </typeparam>
            <param name="collection">集合类</param>
            <param name="keyProperty">键名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.CommonMethods.ClearAllEvents(System.Object)">
            <summary>
            清除事件绑定的函数
            </summary>
            <param name="objectHasEvents">拥有事件的实例</param>
        </member>
        <member name="T:Buffalo.Kernel.ConnStringFilter">
            <summary>
            连接字符串处理类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.ConnStringFilter.GetConnectInfo(System.String,System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            获取连接信息
            </summary>
            <param name="connstr">字符串</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.ConnStringFilter.GetConnectInfo(System.String)">
            <summary>
            获取连接信息
            </summary>
            <param name="connstr">字符串</param>
            <param name="comparer">比较器</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.GetCSharpVariableType(System.Data.DbType)">
            <summary>
            获取C#类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.IsDefaultValue(System.Object)">
            <summary>
            判断是否默认值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.GetDefaultValue(System.Type)">
            <summary>
            获取该类型的默认值
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.IsInherit(System.Type,System.Type)">
            <summary>
            判断是否该类型的子类
            </summary>
            <param name="type">当前类</param>
            <param name="baseType">基类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.EqualType(System.Type,System.Type)">
            <summary>
            判断变量类型是否此类型
            </summary>
            <param name="value"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.GetRealValueType(System.Type)">
            <summary>
            获取泛型类里边的类型
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.GetNullableRealType(System.Type)">
            <summary>
            获取类型或Nullable类里边的类型
            </summary>
            <param name="dataType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.GetGenericType(System.Type,System.Boolean)">
            <summary>
            获取泛型里边的类型
            </summary>
            <param name="type"></param>
            <param name="isherit"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.IsImplement(System.Type,System.Type)">
            <summary>
            判断是否实现了该接口
            </summary>
            <param name="type">当前类</param>
            <param name="interfaceType">接口类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultType.ToDbType(System.Type)">
            <summary>
            把C#类型转换成SQL类型
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultIntValue">
            <summary>
            整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultBooleanValue">
            <summary>
            布尔型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultDoubleValue">
            <summary>
            双精度默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultFloatValue">
            <summary>
            浮点型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultDateTimeValue">
            <summary>
            时间默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultDecimalValue">
            <summary>
            Decimal默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultByteValue">
            <summary>
            字节默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultSbyteValue">
            <summary>
            小字节默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultShortValue">
            <summary>
            短整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultLongValue">
            <summary>
            长整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultUintValue">
            <summary>
            无符号整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultUshortValue">
            <summary>
            无符号短整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultUlongValue">
            <summary>
            无符号长整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultGuidValue">
            <summary>
            Guid类型
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultInt">
            <summary>
            整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultDouble">
            <summary>
            双精度默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultFloat">
            <summary>
            浮点型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultDecimal">
            <summary>
            Decimal默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultSbyte">
            <summary>
            小字节默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultShort">
            <summary>
            短整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultLong">
            <summary>
            长整型默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultGuid">
            <summary>
            Guid默认值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Defaults.DefaultValue.DefaultDateTime">
            <summary>
            时间默认值
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultValue.ValueToString(System.Object,System.String)">
            <summary>
            把值按照指定格式转换成字符串
            </summary>
            <param name="value">值</param>
            <param name="formatString">格式字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultValue.Compare(System.Object,System.Object)">
            <summary>
            对两个object值进行比较(-1为val1&lt;val2,0为val1=val2,1为val1&gt;val2)
            </summary>
            <param name="val1">值1</param>
            <param name="val2">值2</param>
            <returns>-1为val1&lt;val2,0为val1=val2,1为val1&gt;val2</returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultValue.DefaultForType(System.Type)">
            <summary>
            获取类型的默认值
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.Defaults.DefaultValue.ConvertEnumUnderlyingValue(System.Object)">
            <summary>
            转换枚举为基础类型
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.Kernel.Defaults.TypeItem.ItemType">
            <summary>
            数值类型
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.Defaults.TypeItem.DefaultValue">
            <summary>
            数据的默认值
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.EnumInfo.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.EnumInfo.FieldName">
            <summary>
            常量名
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.EnumInfo.Description">
            <summary>
            注释[Description("内容")]的内容
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.EnumInfo.DisplayName">
            <summary>
            获取[DisplayName("显示名")]的内容
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.EnumInfo.CustomerAttributes">
            <summary>
            其他标签
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.EnumInfo.FindCustomerAttribute``1">
            <summary>
            查找其他标签
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.EnumUnit">
            <summary>
            枚举工具类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.AddValue(System.Int32,System.Int32)">
            <summary>
            在属性集合添加一个属性
            </summary>
            <param name="source">属性集合</param>
            <param name="value">要添加的属性值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.DeleteValue(System.Int32,System.Int32)">
            <summary>
            在属性集合删除一个属性
            </summary>
            <param name="source">属性集合</param>
            <param name="value">要删除的属性值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.ContainerValue(System.Int32,System.Int32)">
            <summary>
            判断集合里边是否含有该属性
            </summary>
            <param name="source">属性集合</param>
            <param name="value">要判断的属性值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.GetContainerValues(System.Int32,System.Type)">
            <summary>
            获取包含值的信息
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.GetContainerValues(System.Enum)">
            <summary>
            获取包含值的信息
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.GetEnumInfos(System.Type)">
            <summary>
            获取本枚举里边所有属性的信息
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.GetEnumDescription(System.Enum)">
            <summary>
            获取枚举值的注释
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.GetEnumInfo(System.Enum)">
            <summary>
            获取枚举值的信息
            </summary>
            <param name="objEnum">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.EnumUnit.GetEnumInfoByName(System.Type,System.String)">
            <summary>
            根据枚举的属性名来获取其信息
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="name">属性名称</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.AssemblyTypeLoader">
            <summary>
            程序集的类型加载器
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.AssemblyTypeLoader.Default">
            <summary>
            默认全部程序集的类型加载器
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.AssemblyTypeLoader.#ctor(System.String[])">
            <summary>
            程序集的类型加载器
            </summary>
            <param name="assNames">指定的程序集</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.AssemblyTypeLoader.GetBaseRoot">
            <summary>
            基目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.AssemblyTypeLoader.LoadAllAssembly(System.String[])">
            <summary>
            获取本项目所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.AssemblyTypeLoader.LoadType(System.String)">
            <summary>
            加载类型
            </summary>
            <param name="typeName">类型名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.AssemblyTypeLoader.LoadType(System.String,System.String)">
            <summary>
            加载类型
            </summary>
            <param name="typeName">类型名称</param>
            <param name="assemblyName">程序集名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.AssemblyTypeLoader.GetTypes">
            <summary>
            获取加载的程序集中所有的类型
            </summary>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.ClassInfos.ClassPropertyEnumerator">
            <summary>
            属性的枚举类
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.ClassInfos.ClassFieldInfoCollection">
            <summary>
            字段信息集合
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ClassFieldInfoCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Buffalo.Kernel.FastReflection.FieldInfoHandle})">
            <summary>
            属性信息集合
            </summary>
            <param name="FieldInfoHandles">字段信息的哈希表</param>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ClassFieldInfoCollection.Item(System.String)">
            <summary>
            根据字段名获取字段信息
            </summary>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ClassFieldInfoCollection.Count">
            <summary>
            当前属性的数量
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoHandle">
            <summary>
            类的信息
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoHandle.#ctor(System.Type,Buffalo.Kernel.FastReflection.CreateInstanceHandler,System.Collections.Generic.Dictionary{System.String,Buffalo.Kernel.FastReflection.PropertyInfoHandle},System.Collections.Generic.Dictionary{System.String,Buffalo.Kernel.FastReflection.FieldInfoHandle})">
            <summary>
            类的信息
            </summary>
            <param name="classType">类类型</param>
            <param name="createInstanceHandler">实例化类的句柄</param>
            <param name="propertyInfoHandles">属性集合</param>
            <param name="fieldInfoHandles">字段集合</param>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoHandle.ClassType">
            <summary>
            本类的类型
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoHandle.PropertyInfo">
            <summary>
            获取属性的信息
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoHandle.FieldInfo">
            <summary>
            获取字段的信息
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoHandle.CreateInstance">
            <summary>
            返回此类型的实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoManager">
            <summary>
            实体属性管理
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoManager.GetClassHandle(System.Type)">
            <summary>
            获取实体类里边得属性信息
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoManager.InitClassPropertyInfos(System.Type)">
            <summary>
            初始化类型的属性信息
            </summary>
            <param name="type">类型</param>
            <returns>如果已经初始化过侧返回false</returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ClassInfoManager.ObjectCopy(System.Object,System.Object)">
            <summary>
            对象属性拷贝(同名字段)
            </summary>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.ClassInfos.ClassFieldEnumerator">
            <summary>
            属性的枚举类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ClassPropertyInfoCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Buffalo.Kernel.FastReflection.PropertyInfoHandle})">
            <summary>
            属性信息集合
            </summary>
            <param name="propertyInfoHandles">属性信息的哈希表</param>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ClassPropertyInfoCollection.Item(System.String)">
            <summary>
            根据属性名获取属性信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ClassPropertyInfoCollection.Count">
            <summary>
            当前属性的数量
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.ClassInfos.ProxyAssembly">
            <summary>
            远程程序集
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ProxyAssembly.Assembly">
            <summary>
            关联的程序集信息
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyAssembly.#ctor(System.String)">
            <summary>
            加载文件
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyAssembly.#ctor(System.Byte[])">
            <summary>
            加载文件内容
            </summary>
            <param name="fileContent"></param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyAssembly.GetObjectInstance(System.String,System.Object[])">
            <summary>
            获取类型的实体
            </summary>
            <param name="typeName">类型名</param>
            <param name="args">构造函数参数</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.#ctor(System.String,System.String,System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="filePath">文件名</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.#ctor(System.String,System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="filePath">文件名</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.#ctor(System.Byte[],System.String,System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="dllContent">文件内容</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.#ctor(System.Byte[],System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="dllContent">文件内容</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.#ctor(System.Reflection.Assembly,System.String,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="assembly">程序集</param>
            <param name="TypeName">类名</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.#ctor(System.Type,System.Object[])">
            <summary>
            加载类型
            </summary>
            <param name="tp">类型</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.Init(System.Type,System.Object[])">
            <summary>
            初始化
            </summary>
            <param name="assembly">程序集</param>
            <param name="TypeName">类型名</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.Invoke(System.String,System.Object[])">
            <summary>
            运行该函数
            </summary>
            <param name="methodName">函数名</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.GetParamTypes(System.Object[])">
            <summary>
            获取参数的类型
            </summary>
            <param name="args">参数类型</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.Item(System.String)">
            <summary>
            设置或获取属性
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.ClassInfos.ProxyObject.ClassHandle">
            <summary>
            类型信息
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.SetFieldValueHandle">
            <summary>
            快速设置字段值的委托
            </summary>
            <param name="obj">对象</param>
            <param name="value">值</param>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.GetFieldValueHandle">
            <summary>
            快速获取字段值的委托
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastFieldGetSet.FindGetValueHandle(System.Reflection.FieldInfo)">
            <summary>
            获取字段获取值的委托(带缓存)
            </summary>
            <param name="info">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastFieldGetSet.FindSetValueHandle(System.Reflection.FieldInfo)">
            <summary>
            获取字段设置值的委托(带缓存)
            </summary>
            <param name="info">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastFieldGetSet.GetGetValueHandle(System.Reflection.FieldInfo)">
            <summary>
            获取字段获取值的委托
            </summary>
            <param name="info">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastFieldGetSet.GetGetValueHandle(System.Type,System.String)">
            <summary>
            获取字段获取值的委托
            </summary>
            <param name="objType">对象类型</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastFieldGetSet.GetSetValueHandle(System.Reflection.FieldInfo)">
            <summary>
            获取字段设置值的委托
            </summary>
            <param name="info">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastFieldGetSet.GetSetValueHandle(System.Type,System.String)">
            <summary>
            获取字段设置值的委托
            </summary>
            <param name="objType">对象类型</param>
            <param name="fieldName">字段名</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.CreateInstanceHandler">
            @原作者:JeffreyZhao
            @创建时间:2009-02-01
            @链接:http://www.cnblogs.com/JeffreyZhao/archive/2009/02/01/Fast-Reflection-Library.html
            @说明:.NET IL快速反射类
        </member>
        <member name="F:Buffalo.Kernel.FastReflection.FastInvoke.VoidType">
            <summary>
            委托获取实体类对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastInvoke.GetInstanceCreator(System.Type)">
            <summary>
            生成实体类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastInvoke.GetPropertyAttribute(System.Reflection.FieldInfo,System.Type)">
            <summary>
            获取某个属性的标识
            </summary>
            <param name="finf">属性的信息</param>
            <param name="attributeType">属性类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastInvoke.GetPropertyAttribute(System.Reflection.PropertyInfo,System.Type)">
            <summary>
            获取某个属性的标识
            </summary>
            <param name="pinf">属性的信息</param>
            <param name="attributeType">属性类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastInvoke.GetPropertyAttribute``1(System.Reflection.PropertyInfo)">
            <summary>
            获取某个属性的标识
            </summary>
            <param name="pinf">属性的信息</param>
            <param name="attributeType">属性类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastInvoke.GetClassAttribute(System.Type,System.Type)">
            <summary>
            获取指定类的标识
            </summary>
            <param name="classType">指定类的类型</param>
            <param name="attributeType">标识类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastInvoke.GetClassAttribute``1(System.Type)">
            <summary>
            获取指定类的标识
            </summary>
            <param name="classType">指定类的类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastPropertyInvoke.GetMethodInvoker(System.Reflection.MethodInfo)">
            <summary>
            生成调用方法
            </summary>
            <param name="methodInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetPropertyInfoHandle(System.String,System.Type)">
            <summary>
            获取属性的信息
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetPropertyInfoHandleWithOutCache(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的信息(不使用缓存)
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetPropertyInfoHandleWithOutCache(System.String,System.Type)">
            <summary>
            获取属性的信息(不使用缓存)
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetGetMethodInfo(System.String,System.Type)">
            <summary>
            获取获取值的方法接口
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetSetMethodInfo(System.String,System.Type)">
            <summary>
            获取设置值的方法接口
            </summary>
            <param name="proName">属性名</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetMethodInfoKey(System.Reflection.MemberInfo)">
            <summary>
            获取函数的键
            </summary>
            <param name="methodInfo">函数反射</param>
            <param name="objectType">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetCustomerMethodInfo(System.Type,System.String,System.Type[])">
            <summary>
            获取该类型的指定方法的委托
            </summary>
            <param name="objectType">所属类的类型</param>
            <param name="methodName">方法名</param>
            <param name="parametersType">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetCustomerMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            获取该类型的指定方法的委托
            </summary>
            <param name="methodInfo">函数信息</param>
            <param name="parametersType">参数列表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.SetValue(System.Object,System.Object,System.String,System.Type)">
            <summary>
            对对象赋值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
            <param name="propertyName">属性名</param>
            <param name="objType">对象类型</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetValue(System.Object,System.String,System.Type)">
            <summary>
            获取对象赋值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
            <param name="propertyName">属性名</param>
            <param name="objType">对象类型</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.CreateObject(System.Type)">
            <summary>
            生成实体类
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetCreateInstanceHandler(System.Type)">
            <summary>
            根据类型查找指定的创建对象的代理
            </summary>
            <param name="type">类型</param> 
            <returns></returns> 
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FastValueGetSet.GetCreateInstanceHandlerWithOutCache(System.Type)">
            <summary>
            根据类型查找指定的创建对象的代理
            </summary>
            <param name="type">类型</param> 
            <returns></returns> 
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FieldInfoHandle.#ctor(System.Type,Buffalo.Kernel.FastReflection.GetFieldValueHandle,Buffalo.Kernel.FastReflection.SetFieldValueHandle,System.Type,System.String,System.Reflection.FieldInfo)">
            <summary>
            创建属性的信息类
            </summary>
            <param name="belong">字段所属的类类型</param>
            <param name="getHandle">get委托</param>
            <param name="setHandle">set委托</param>
            <param name="fieldType">字段数据类型</param>
            <param name="fieldName">字段名</param>
            <param name="belongFieldInfo">所属的字段反射信息</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FieldInfoHandle.TypeEqual(System.Data.IDataReader,System.Int32)">
            <summary>
            判断类型是否跟本属性一致
            </summary>
            <param name="reader">读取器</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FieldInfoHandle.LoadRealFieldType">
            <summary>
            加载真正的数据类型
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.BelongFieldInfo">
            <summary>
            所属的字段反射信息
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.Belong">
            <summary>
            字段所属的类
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.RealFieldType">
            <summary>
            真正的数值类型
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.SetHandle">
            <summary>
            Set句柄
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.GetHandle">
            <summary>
            Get句柄
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.FieldType">
            <summary>
            获取属性的类型
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.FieldName">
            <summary>
            获取属性的名字
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FieldInfoHandle.SetValue(System.Object,System.Object)">
            <summary>
            给对象设置值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FieldInfoHandle.GetValue(System.Object)">
            <summary>
            获取对象值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.HasGetHandle">
            <summary>
            是否有Get方法
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.FieldInfoHandle.HasSetHandle">
            <summary>
            是否有Set方法
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FieldInfoHandle.GetFieldInfos(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            获取字段集合
            </summary>
            <param name="objType">类型</param>
            <param name="inner">是否</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.FieldInfoHandle.FillFieldInfos(System.Type,System.Reflection.BindingFlags,System.Collections.Generic.List{Buffalo.Kernel.FastReflection.FieldInfoHandle},System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            填充值
            </summary>
            <param name="objType"></param>
            <param name="flags"></param>
            <param name="fillBase"></param>
        </member>
        <member name="T:Buffalo.Kernel.FastReflection.PropertyInfoHandle">
            <summary>
            创建属性的信息类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.PropertyInfoHandle.#ctor(System.Type,Buffalo.Kernel.FastReflection.FastPropertyHandler,Buffalo.Kernel.FastReflection.FastPropertyHandler,System.Type,System.String)">
            <summary>
            创建属性的信息类
            </summary>
            <param name="getHandle">get委托</param>
            <param name="setHandle">set委托</param>
            <param name="propertyType">属性数据类型</param>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.PropertyInfoHandle.Belong">
            <summary>
            属性所属的类
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.PropertyInfoHandle.PropertyType">
            <summary>
            获取属性的类型
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.PropertyInfoHandle.PropertyName">
            <summary>
            获取属性的名字
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.PropertyInfoHandle.SetValue(System.Object,System.Object)">
            <summary>
            给对象设置值
            </summary>
            <param name="args">对象</param>
            <param name="value">值</param>
        </member>
        <member name="M:Buffalo.Kernel.FastReflection.PropertyInfoHandle.GetValue(System.Object)">
            <summary>
            获取对象值
            </summary>
            <param name="args">对象</param>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.PropertyInfoHandle.HasGetHandle">
            <summary>
            是否有Get方法
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.FastReflection.PropertyInfoHandle.HasSetHandle">
            <summary>
            是否有Set方法
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.Lock">
            <summary>
            会自动释放的锁，可设置等待超时
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.Lock.defaultMillisecondsTimeout">
            <summary>
            默认超时设置
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.Lock.#ctor(System.Object)">
            <summary>
            构造 
            </summary>
            <param name="obj">想要锁住的对象</param>
        </member>
        <member name="M:Buffalo.Kernel.Lock.#ctor(System.Object,System.Int32)">
            <summary>
            构造
            </summary>
            <param name="obj">想要锁住的对象</param>
            <param name="millisecondsTimeout">超时时间(小于等于0时候一直死锁)</param>
        </member>
        <member name="M:Buffalo.Kernel.Lock.#ctor(System.Object,System.Int32,System.Boolean)">
            <summary>
            构造
            </summary>
            <param name="obj">想要锁住的对象</param>
            <param name="millisecondsTimeout">超时时间(小于等于0时候一直死锁)</param>
            <param name="throwTimeoutException">是否抛出超时异常</param>
        </member>
        <member name="M:Buffalo.Kernel.Lock.Dispose">
            <summary>
            销毁，并释放锁
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.Lock.IsTimeout">
            <summary>
            获取在获取锁时是否发生等待超时
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.MassBase`1">
            <summary>
            常量类的基类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.MassBase`1.GetInfos">
            <summary>
            获取本常量类里边所有属性的信息
            </summary>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.MassBase`1.GetDescription(System.Object)">
            <summary>
            获取常量值值的注释
            </summary>
            <param name="objEnum"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.MassBase`1.GetInfo(System.Object)">
            <summary>
            获取常量值对应的信息
            </summary>
            <param name="value">常量值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.MassBase`1.GetInfoByName(System.String)">
            <summary>
            根据常量类的字段名来获取其信息
            </summary>
            <param name="name">字段名</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.MassInfo">
            <summary>
            常量类信息
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.MassInfo.LstInfo">
            <summary>
            常量信息集合
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.MassInfo.DicInfos">
            <summary>
            常量字典信息集合
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.MassManager">
            <summary>
            常量管理器
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.MassManager.GetMassInfos(System.Type)">
            <summary>
            根据类型获取常量集合
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.MassManager.GetInfos(System.Type)">
            <summary>
            根据类型获取常量集合
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.MassManager.GetInfoByName(System.Type,System.String)">
            <summary>
            通过字段名获取其常量信息
            </summary>
            <param name="objType"></param>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.MassManager.GetInfoByValue(System.Type,System.Object)">
            <summary>
            通过值获取其常量信息
            </summary>
            <param name="objType"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.MassManager.GetInfos(System.Type,System.Collections.Generic.List{Buffalo.Kernel.EnumInfo},System.Collections.Generic.Dictionary{System.String,Buffalo.Kernel.EnumInfo})">
            <summary>
            获取此类的常量信息
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.ObjectEventsUnit">
            <summary>
            实体事件工具
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.ObjectEventsUnit._dicEventHandle">
            <summary>
            缓存类型和拥有事件的集合
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.ObjectEventsUnit.ClearAllEvents(System.Object)">
            <summary>
            清除事件绑定的函数
            </summary>
            <param name="objectHasEvents">拥有事件的实例</param>
        </member>
        <member name="T:Buffalo.Kernel.PasswordHash">
            <summary>
            散列辅助类
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToMD5String(System.String,System.Boolean)">
            <summary>
            对字符串进行MD5散列
            </summary>
            <param name="str">要散列的字符串</param>
            <param name="isUpper">字母是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToMD5String(System.Byte[],System.Boolean)">
            <summary>
            对内容进行MD5散列
            </summary>
            <param name="content">要散列的内容</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToMD5String(System.IO.Stream,System.Boolean)">
            <summary>
            对字符串进行MD5散列
            </summary>
            <param name="stm">要散列的流</param>
             <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.StartBatchHash">
            <summary>
            开启批量哈希
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToMD5Bytes(System.String)">
            <summary>
            对字符串进行MD5散列
            </summary>
            <param name="str">要散列的字符串</param>
            <param name="isUpper">字母是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToMD5Bytes(System.Byte[])">
            <summary>
            对内容进行MD5散列
            </summary>
            <param name="content">要散列的内容</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToMD5Bytes(System.IO.Stream)">
            <summary>
            对字符串进行MD5散列
            </summary>
            <param name="stm">要散列的流</param>
             <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToSHA1String(System.String,System.Boolean)">
            <summary>
            对字符串进行SHA1散列
            </summary>
            <param name="str">要散列的字符串</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToSHA1String(System.Byte[],System.Boolean)">
            <summary>
            对内容进行SHA1散列
            </summary>
            <param name="content">要散列的内容</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToSHA1String(System.IO.Stream,System.Boolean)">
            <summary>
            对内容进行SHA1散列
            </summary>
            <param name="stm">要散列的流</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToSHA1Bytes(System.String)">
            <summary>
            对字符串进行SHA1散列
            </summary>
            <param name="str">要散列的字符串</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToSHA1Bytes(System.Byte[])">
            <summary>
            对内容进行SHA1散列
            </summary>
            <param name="content">要散列的内容</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.ToSHA1Bytes(System.IO.Stream)">
            <summary>
            对内容进行SHA1散列
            </summary>
            <param name="stm">要散列的流</param>
            <param name="isUpper">散列结果是否大写</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.AESDecrypt(System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            AES解密
            </summary>
            <param name="toDecrypt">要解密的数据</param>
            <param name="pwd">解密密码(32字节数组)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.PasswordHash.AESEncrypt(System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            AES加密
            </summary>
            <param name="toEncrypt">要加密的数据</param>
            <param name="pwd">密码(32字节数组)</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.BatchHash">
            <summary>
            批量哈希值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.BatchHash._tlIsBatch">
            <summary>
            线程变量:是否开启批量
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.BatchHash._tlMD5">
            <summary>
            线程变量:MD5
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.BatchHash._tlSHA1">
            <summary>
            线程变量:SHA1
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.BatchHash.IsBatch">
            <summary>
            是否开启了批量操作
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.BatchHash.GetMD5">
            <summary>
            获取MD5类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.BatchHash.GetSHA1">
            <summary>
            获取MD5类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.BatchHash.AutoClose(System.IDisposable)">
            <summary>
            自动关闭
            </summary>
            <param name="obj"></param>
        </member>
        <member name="F:Buffalo.Kernel.BatchHash._isOpenBatch">
            <summary>
            是否此类开启的批量操作
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.BatchHash.#ctor">
            <summary>
            开启批量哈希操作
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.BatchHash.Dispose">
            <summary>
            清理对象
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.TreadPoolManager.ParameterizedReturnThreadStart">
            <summary>
            带参数带返回的线程类
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.Kernel.TreadPoolManager.BlockThread">
            <summary>
            带阻塞的线程
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.TreadPoolManager.BlockThread._runMethod">
            <summary>
            无参函数
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.IsCancel">
            <summary>
            是否要取消线程
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.SaveThreadInfo">
            <summary>
            保存当前线程信息，此为true时候线程方法可以通过BlockThread.CurrentThreadInfo获取到当前实例
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.CurrentThreadInfo">
            <summary>
            当前线程的信息
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.CurrentThreadCancelled">
            <summary>
            当前线程是否需要取消
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.TreadPoolManager.BlockThread._returnData">
            <summary>
            返回值
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.ReturnData">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.TreadPoolManager.BlockThread._runParamMethod">
            <summary>
            带参函数
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.TreadPoolManager.BlockThread._runParamReturnMethod">
            <summary>
            带参带返回函数
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.Create(System.Threading.ThreadStart,Buffalo.Kernel.TreadPoolManager.IBlockThreadMessage)">
            <summary>
            创建线程信息
            </summary>
            <param name="thd"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.Create(System.Threading.ParameterizedThreadStart,Buffalo.Kernel.TreadPoolManager.IBlockThreadMessage)">
            <summary>
            创建线程信息
            </summary>
            <param name="thd"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.Create(Buffalo.Kernel.TreadPoolManager.ParameterizedReturnThreadStart,Buffalo.Kernel.TreadPoolManager.IBlockThreadMessage)">
            <summary>
            创建线程信息
            </summary>
            <param name="thd"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.RunMethod(System.Object)">
            <summary>
            执行函数
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.StartThread(System.Object)">
            <summary>
            开启线程
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.StopThread(System.Int32)">
            <summary>
            关闭线程
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.ClearThread(Buffalo.Kernel.TreadPoolManager.BlockThread)">
            <summary>
            清理类信息
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.Wait(System.Int32)">
            <summary>
            等待线程结束
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.SendCancel">
            <summary>
            告诉线程要取消
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThread.UnLock">
            <summary>
            通知线程已经执行完
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.TreadPoolManager.BlockThread._autoHandle">
            <summary>
            阻塞
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.CurrentThread">
            <summary>
            当前线程
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.Args">
            <summary>
            传入参数
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.IsRunning">
            <summary>
            本线程是否正在运行运行
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThread.LockHandle">
            <summary>
            阻塞
            </summary>
        </member>
        <member name="T:Buffalo.Kernel.TreadPoolManager.IBlockThreadMessage">
            <summary>
            线程消息
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.IBlockThreadMessage.OnThreadStart(Buffalo.Kernel.TreadPoolManager.BlockThread)">
            <summary>
            线程开始
            </summary>
            <param name="thd"></param>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.IBlockThreadMessage.OnThreadEnd(Buffalo.Kernel.TreadPoolManager.BlockThread)">
            <summary>
            线程结束
            </summary>
            <param name="thd"></param>
        </member>
        <member name="T:Buffalo.Kernel.TreadPoolManager.BlockThreadPool">
            <summary>
             用户线程池
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.TreadPoolManager.BlockThreadPool._que">
            <summary>
            线程信息
            </summary>
        </member>
        <member name="F:Buffalo.Kernel.TreadPoolManager.BlockThreadPool._lastClean">
            <summary>
            最后清理日期
            </summary>
        </member>
        <member name="P:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.Checkmilliseconds">
            <summary>
            检查间隔
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.#ctor(System.Int32)">
            <summary>
            用户线程池
            </summary>
            <param name="checkmilliseconds">检查间隔</param>
            <param name="threadTimeOut">线程过时</param>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.CleanTimeout">
            <summary>
            清除过时线程
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.StopAll">
            <summary>
            停止所有线程
            </summary>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.AppendThreadInfo(Buffalo.Kernel.TreadPoolManager.BlockThread)">
            <summary>
            增加线程信息
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.OnThreadEnd(Buffalo.Kernel.TreadPoolManager.BlockThread)">
            <summary>
            告诉线程池本线程已经完结
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.RunThread(System.Threading.ThreadStart)">
            <summary>
            启动无参数线程
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.RunParamThread(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            启动有参数线程
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.Kernel.TreadPoolManager.BlockThreadPool.RunParamReturnThread(Buffalo.Kernel.TreadPoolManager.ParameterizedReturnThreadStart,System.Object)">
            <summary>
            启动有参数带返回的线程
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:ValueConvertExtend">
            <summary>
            类型转换扩展
            </summary>
            <summary>
            类型转换扩展
            </summary>
            <summary>
            类型转换扩展
            </summary>
        </member>
        <member name="M:ValueConvertExtend.ConvertValue``1(System.Object,``0)">
            <summary>
            把object类型转成指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.ConvertValue``1(System.Object)">
            <summary>
            把object类型转成指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.ConvertTo``1(System.Object,``0)">
            <summary>
            转换数值到指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.ConvertTo``1(System.Object)">
            <summary>
            转换数值到指定类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetRowValueData``1(System.Data.DataRow,System.String,``0)">
            <summary>
            获取DataRow的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">DataRow</param>
            <param name="name">指定列名</param>
            <param name="defalutValue"></param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetRowValueData``1(System.Data.DataRow,System.String)">
            <summary>
            获取DataRow的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">DataRow</param>
            <param name="name">指定列名</param>
            <param name="defalutValue"></param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetRowValue``1(System.Data.DataRow,System.String,``0)">
            <summary>
            获取DataRow的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">DataRow</param>
            <param name="name">指定列名</param>
            <param name="defalutValue">找不到时候返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetRowValue``1(System.Data.DataRow,System.String)">
            <summary>
            获取DataRow的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">DataRow</param>
            <param name="name">指定列名</param>
            <param name="defalutValue">找不到时候返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetMapDataValue``1(System.Collections.IDictionary,System.Object,``0)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ht">哈希表</param>
            <param name="key">键</param>
            <param name="defalutValue"></param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetMapDataValue``1(System.Collections.IDictionary,System.Object)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ht">哈希表</param>
            <param name="key">键</param>
            <param name="defalutValue"></param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetDicDataValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ht">哈希表</param>
            <param name="key">键</param>
            <param name="defalutValue"></param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetDicDataValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ht">哈希表</param>
            <param name="key">键</param>
            <param name="defalutValue"></param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetMapValue``1(System.Collections.IDictionary,System.Object,``0)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ht">哈希表</param>
            <param name="key">指定Key</param>
            <param name="defalutValue">找不到时候返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetMapValue``1(System.Collections.IDictionary,System.Object)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ht">哈希表</param>
            <param name="key">指定Key</param>
            <param name="defalutValue">找不到时候返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetDicValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T">键类型</typeparam>
            <typeparam name="K">值类型</typeparam>
            <param name="ht">哈希表</param>
            <param name="key">指定Key</param>
            <param name="defalutValue">找不到时候返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:ValueConvertExtend.GetDicValue``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="T">键类型</typeparam>
            <typeparam name="K">值类型</typeparam>
            <param name="ht">哈希表</param>
            <param name="key">指定Key</param>
            <returns></returns>
        </member>
    </members>
</doc>
