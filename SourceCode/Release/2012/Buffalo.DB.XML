<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Buffalo.DB</name>
    </assembly>
    <members>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLConditionValueItem">
            <summary>
            条件值项
            </summary>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLLikeItem">
            <summary>
            Like项
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLLikeItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.DataBaseAdapter.BQLLikeType,Buffalo.DB.DataBaseAdapter.BQLCaseType)">
            <summary>
            like条件函数
            </summary>
            <param name="sourceHandle">源参数</param>
            <param name="targetHandle">目标值</param>
            <param name="type">Like方式</param>
            <param name="caseType">大小写参数</param>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTimeStampHandle">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTimeStampHandle.#ctor">
            <summary>
            当前时间
            </summary>
            <param name="dbType">类型</param>
            <param name="isUCT">是否格林威治时间</param>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.IOperatorPriorityLevel">
            <summary>
            运算符优先级接口
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.IOperatorPriorityLevel.PriorityLevel">
            <summary>
            优先级
            </summary>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.OperatorPrecedenceUnit">
            <summary>
            运算符优先级处理类
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.OperatorPrecedenceUnit.FillBreak(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,System.Boolean,System.Int32,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            填充值的括号
            </summary>
            <param name="left">连接符左边</param>
            <param name="isLeft">是否在运算符左边</param>
            <param name="operLevel">当前符号优先级</param>
            <param name="info">输出信息</param>
            <returns></returns>
        </member>
        <member name="F:Buffalo.DB.BQLCommon.BQLConditionCommon.OperatorPrecedenceUnit._arrPrecedence">
            <summary>
            优先级数组
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.OperatorPrecedenceUnit.InitPrecedence">
            <summary>
            初始化优先级数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.OperatorPrecedenceUnit.GetPrecedence(System.String)">
            <summary>
            获取运算符优先级
            </summary>
            <param name="oper">运算符</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.AliasCollection.Item(System.String)">
            <summary>
            获取属性名对应的字段名
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.AliasEnumerator">
            <summary>
            属性的枚举类
            </summary>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.AliasTabelParamHandle">
            <summary>
            字段别名
            </summary>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLAliasHandle">
            <summary>
            别名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLAliasHandle.GetAliasName">
            <summary>
            获取别名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLAliasHandle.GetPrimaryParam">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLAliasParamHandle.AliasName">
            <summary>
            别名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem.GetParameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem.PriorityLevel">
            <summary>
            运算符优先级
            </summary>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition.TrueValue">
            <summary>
            正确条件(1=1)
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition.FalseValue">
            <summary>
            错误条件(1=2)
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.GetDBinfo">
            <summary>
            获取数据库信息
            </summary>
            <returns></returns>
        </member>
        <member name="F:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1._isInit">
            <summary>
            是否已经初始化
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.InitDB">
            <summary>
            初始化数据库
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.InitDB(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初始化数据库
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.SetOperatorPrecedenceEnable(System.Boolean)">
            <summary>
            设置生成的SQL语句进行运算符优先级优化可读性
            </summary>
            <param name="enable"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.GetDefaultOperate">
            <summary>
            获取默认连接
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.StartTransaction">
            <summary>
            开启事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.StartBatchAction">
            <summary>
            开始非事务的批量动作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.AddToDB(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            添加到库信息
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.CreateOperate">
            <summary>
            创新数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.FindTable(System.Type)">
            <summary>
            通过实体类型查找对应的BQL表信息
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.FindTable(System.String)">
            <summary>
            通过实体类型查找对应的BQL表信息
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLDataBaseHandle`1.GetDB(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取当前类关联的DB信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle.#ctor(Buffalo.DB.EntityInfos.EntityInfoHandle,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            实体属性信息
            </summary>
            <param name="entityInfo">实体信息</param>
            <param name="propertyName">属性名</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle.BelongEntity">
            <summary>
            所属的表
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle.EntityInfo">
            <summary>
            实体属性信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle.PInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle.DisplayDataSetValue(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            输出用于填充DataSet的字段信息
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.GetEntityInfo">
            <summary>
            获取所属的实体的信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.GetPrimaryParam">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.SetEntityInfo(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle,System.String)">
            <summary>
            设置所属的实体的信息
            </summary>
            <param name="entityInfo">实体信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.GetPropertyName">
            <summary>
            父表关联的属性名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.GetEntityKey">
            <summary>
            本表的关联键
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.GetParentTable">
            <summary>
            所属父表信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.CreateProperty(System.String)">
            <summary>
            创建实体的属性
            </summary>
            <param name="entityInfo"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.Item(System.String)">
            <summary>
            获取实体属性
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.Item(System.String,System.Data.DbType)">
            <summary>
            获取实体属性
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.FindChildEntity(System.String)">
            <summary>
            查找实体的关联属性信息属性
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.FindParamHandle(System.String)">
            <summary>
            查找实体属性
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.FindParam(System.String)">
            <summary>
            查找实体属性
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.IsSysBaseType(System.Type)">
            <summary>
            判断是否系统类型
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle.GetParamInfoHandle">
            <summary>
            获取对应的实体属性
            </summary>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLNowDateHandle">
            <summary>
            当前时间的句柄
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLNowDateHandle.#ctor(System.Data.DbType,System.Boolean)">
            <summary>
            当前时间
            </summary>
            <param name="dbType">类型</param>
            <param name="isUCT">是否格林威治时间</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle.GetParameters">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle.PriorityLevel">
            <summary>
            运算符优先级
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOrderByHandle.CaseType">
            <summary>
            是否区分大小写排序
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOrderByHandle.CaseByDB">
            <summary>
            数据库自带排序
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOrderByHandle.CaseIgnore">
            <summary>
            不区分大小写
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOrderByHandle.CaseMatch">
            <summary>
            区分大小写
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOrderByHandle.SortType">
            <summary>
            项的排序类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOrderByHandle.Param">
            <summary>
            项的属性
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOtherParamHandle.ParamName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOtherTableHandle.GetParamInfoHandle">
            <summary>
            获取对应的实体属性
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.DESC">
            <summary>
            降序排序
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.ASC">
            <summary>
            升序排序
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.In(System.ValueType[])">
            <summary>
            In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.In(System.String[])">
            <summary>
            In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.In(System.Collections.IEnumerable)">
            <summary>
            In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.In(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.NotIn(System.ValueType[])">
            <summary>
            NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.NotIn(System.String[])">
            <summary>
            NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.NotIn(System.Collections.IEnumerable)">
            <summary>
            NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle.NotIn(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle.GetParamInfoHandle">
            <summary>
            获取对应的实体属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle.AS(System.String)">
            <summary>
            给这个表定义一个别名
            </summary>
            <param name="asName">别名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle.Item(System.String)">
            <summary>
            获取字段
            </summary>
            <param name="paramName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle.GetPrimaryParam">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle.Item(System.String,System.Data.DbType)">
            <summary>
            获取字段
            </summary>
            <param name="paramName">字段名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle._">
            <summary>
            获取所有字段
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.ShowDbType(System.Data.DbType)">
            <summary>
            通知函数符号另一端的字段的数值类型
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.As(System.String)">
            <summary>
            给字段定义一个别名
            </summary>
            <param name="asName">别名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.As">
            <summary>
            给字段定义一个别名
            </summary>
            <param name="asName">别名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.Between(System.Object,System.Object)">
            <summary>
            Between条件
            </summary>
            <param name="star">开始值</param>
            <param name="end">结束值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.Contains(System.Object)">
            <summary>
            全文检索的条件
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.IndexOf(System.Object,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            查找字符
            </summary>
            <param name="value">要查找的字符</param>
            <param name="start">起始位置</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.SubString(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            截取字符串
            </summary>
            <param name="start">字符串起始位置</param>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.Like(System.Object,Buffalo.DB.DataBaseAdapter.BQLLikeType,Buffalo.DB.DataBaseAdapter.BQLCaseType)">
            <summary>
            Like条件
            </summary>
            <param name="item">值</param>
            <param name="type">Like方式</param>
            <param name="caseType">大小写参数</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.Like(System.Object)">
            <summary>
            Like条件
            </summary>
            <param name="item">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.Like(System.Object,Buffalo.DB.DataBaseAdapter.BQLLikeType)">
            <summary>
            Like条件
            </summary>
            <param name="item">值</param>
            <param name="type">Like方式</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.FreeText(System.Object)">
            <summary>
            FreeText条件
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.DateTimeToString(System.String)">
            <summary>
            时间类型按指定格式转换到字符串
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.StringToDateTime(System.String)">
            <summary>
            字符串按指定格式转换到时间类型
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.ConvertTo(System.Data.DbType)">
            <summary>
            字符串按指定格式转换到时间类型
            </summary>
            <param name="dbType">转换到指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.IsNullValue">
            <summary>
            是否空值
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.ValueDbType">
            <summary>
            对应的数据库类型
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.DoFillInfo(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            执行填充信息操作
            </summary>
            <param name="value">要执行的值</param>
            <param name="info">信息</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.FormatValueType(System.ValueType)">
            <summary>
            格式化值类型的值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.ToValueItem(System.Object)">
            <summary>
            把传进来的值转换成BQL能识别的值项
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.UnityDbType(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            统一数据库值类型
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.NewKeyWordInfomation">
            <summary>
            获取信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.GetKeyInfo">
            <summary>
            获取默认的Key信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem.GetKeyWordInfomation(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取默认的Key信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueTypeItem">
            <summary>
            值类型项
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueTypeItem.ItemValue">
            <summary>
            值
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueTypeItem.#ctor(System.Object)">
            <summary>
            值类型项
            </summary>
            <param name="itemValue">值</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueTypeItem.FormatValueType(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            格式化值项
            </summary>
            <param name="valueItem"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.OperatorFunction(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            运算符函数
            </summary>
            <param name="fHandle">函数信息</param>
            <param name="connect">连接符号</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.ConditionsFunction(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            运算符函数
            </summary>
            <param name="fHandle">函数信息</param>
            <param name="connect">连接符号</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoAdd(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            进行加法运算
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.IsStringDBType(System.Data.DbType)">
            <summary>
            判断是否字符串类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoNot(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            Not运算
            </summary>
            <param name="fun"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoSub(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            进行加法运算
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoMul(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            进行乘法运算
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoDiv(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            进行除法运算
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoMod(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOperatorHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            进行除法运算
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoEqual(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            进行等于运算
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoNotequal(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            不等于
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoAnd(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            and 连接
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoOr(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            or 连接
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoMore(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            大于
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoMorethen(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            大于等于
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoLess(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            小于
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.DoLessThen(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLComparItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            小于等于
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionCommon.FunctionManager.CustomerConnectFunction(System.Collections.Generic.IList{Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem},System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation,System.Int32)">
            <summary>
            普通连接函数
            </summary>
            <param name="handle">函数</param>
            <param name="connect">连接符</param>
            <param name="operLevel">优先级</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.ParamInfo.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.ParamInfo.DataValueType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.ParamInfo.ParamName">
            <summary>
            对应的字段名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.QueryParamCollection.TableName">
            <summary>
            对应的表名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.QueryParamCollection.Item(System.String)">
            <summary>
            获取属性名对应的字段名
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLConditionCommon.QueryParamEnumerator">
            <summary>
            属性的枚举类
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.HasGroup">
            <summary>
            是否有聚合语句
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.ShowTableName">
            <summary>
            当前语句是否显示表名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.PrimaryKeys">
            <summary>
            主键数
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.IsWhere">
            <summary>
            是否在输出条件中
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.Condition">
            <summary>
            输出的条件信息 
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.Infos">
            <summary>
            输出设置
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.DBInfo">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.FromTable">
            <summary>
            From的第一个表
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.ContainTables">
            <summary>
            包含的表
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.IdentityInfos">
            <summary>
            自动增长的集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.AliasManager">
            <summary>
            表映射管理器
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation.OutPutModle">
            <summary>
            是否输出SQL语句模式
            </summary>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddPrimarykeyItem">
            <summary>
            主键
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddPrimarykeyItem.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            外键
            </summary>
            <param name="pkParams">主键集合</param>
            <param name="previous">上一个</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCreateTableItem.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCreateTableItem.#ctor(System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert关键字项
            </summary>
            <param name="tableHandle">要插入的表</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCreateTableItem.Param(System.String,System.Data.DbType,System.Boolean,Buffalo.DB.PropertyAttributes.EntityPropertyType,System.Int32,System.String)">
            <summary>
            字段
            </summary>
            <param name="paramName">字段名</param>
            <param name="dbType">数据库类型</param>
            <param name="allowNull">允许空</param>
            <param name="type">类型</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCreateTableItem.Param(System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.EntityParam})">
            <summary>
            字段
            </summary>
            <param name="paramName">字段名</param>
            <param name="dbType">数据库类型</param>
            <param name="allowNull">允许空</param>
            <param name="type">类型</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem">
            <summary>
            建表的字段集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.PrimaryParam">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.Params">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.Description">
            <summary>
            表注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.IsView">
            <summary>
            是否视图
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.RelationItems">
            <summary>
            关系集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.#ctor(System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert的字段关键字项
            </summary>
            <param name="paramHandles">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem.#ctor(System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.EntityParam},System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.TableRelationAttribute},System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            表信息
            </summary>
            <param name="paramHandles">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem._(System.String,System.Data.DbType,System.Boolean,Buffalo.DB.PropertyAttributes.EntityPropertyType,System.Int32,System.String)">
            <summary>
            添加字段
            </summary>
            <param name="paramName">字段名</param>
            <param name="dbType">数据库类型</param>
            <param name="allowNull">允许空</param>
            <param name="type">类型</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem._(System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.EntityParam})">
            <summary>
            添加一个set项
            </summary>
            <param name="parameter">字段</param>
            <param name="valueItem">值</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem">
            <summary>
            alert table项
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem.#ctor(System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            alert table项
            </summary>
            <param name="tableName">表名</param>
            <param name="previous">上一级</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem.AddParam(System.String,System.Data.DbType,System.Boolean,Buffalo.DB.PropertyAttributes.EntityPropertyType,System.Int32,System.String)">
            <summary>
            字段
            </summary>
            <param name="paramName">字段名</param>
            <param name="dbType">数据库类型</param>
            <param name="allowNull">允许空</param>
            <param name="type">类型</param>
            <param name="length">长度</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem.AddParam(Buffalo.DB.PropertyAttributes.EntityParam)">
            <summary>
            添加字段
            </summary>
            <param name="info">字段信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem.AddForeignkey(Buffalo.DB.PropertyAttributes.TableRelationAttribute)">
            <summary>
            添加外键
            </summary>
            <param name="info">外键信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem.AddPrimaryKey(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            添加主键
            </summary>
            <param name="pkParams">主键集合</param>
            <param name="name">名称</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAlterTableItem.AddConstraint(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            添加约束
            </summary>
            <param name="name">约束名</param>
            <param name="parentTable">主表</param>
            <param name="childTable">子表</param>
            <param name="parentParam">主表键</param>
            <param name="childParam">子表键</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddParamItem">
            <summary>
            建表的字段集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddParamItem.Param">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddParamItem.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddParamItem.#ctor(System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert的字段关键字项
            </summary>
            <param name="paramHandles">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddParamItem.#ctor(Buffalo.DB.PropertyAttributes.EntityParam,System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert的字段关键字项
            </summary>
            <param name="paramHandles">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddForeignkeyItem">
            <summary>
            外键
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddForeignkeyItem.Item">
            <summary>
            外键值
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddForeignkeyItem.#ctor(System.String,System.String,System.String,System.String,System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            外键
            </summary>
            <param name="parentTable">主表</param>
            <param name="childTable">子表</param>
            <param name="parentParam">主表属性</param>
            <param name="childParam">子表属性</param>
            <param name="previous">上一个</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordAddForeignkeyItem.#ctor(Buffalo.DB.PropertyAttributes.TableRelationAttribute,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert的字段关键字项
            </summary>
            <param name="paramHandles">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLKeyWordManager.CreateKeywordInfo(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            创建查询的中转信息类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLKeyWordManager.ToCondition(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager,System.Boolean)">
            <summary>
            输出关键字转换后的SQL语句
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLKeyWordManager.DoConver(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            进行转换
            </summary>
            <param name="info"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery">
            <summary>
            BQL查询
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery.#ctor(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            关键字项
            </summary>
            <param name="keyWordName">关键字名</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery.Previous">
            <summary>
            上一个关键字
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery.Tran(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            关键字解释
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery.AS(System.String)">
            <summary>
            给这个查询定义一个别名
            </summary>
            <param name="asName">别名(如果不想要别名这里为null或"")</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseElseItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase)">
            <summary>
            Case的Else关键字项
            </summary>
            <param name="value">值</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseElseItem.End">
            <summary>
            结束case语句
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase)">
            <summary>
            Case关键字项
            </summary>
            <param name="value">值</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseItem.When(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            When关键字
            </summary>
            <param name="whenValue">when条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseThenItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase)">
            <summary>
            Case项
            </summary>
            <param name="whenValue">when的值</param>
            <param name="thenValue">then的值</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseThenItem.When(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            When关键字
            </summary>
            <param name="whenValue">when条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseThenItem.Else(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            else关键字
            </summary>
            <param name="elseValue">else条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseWhenItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase)">
            <summary>
            Case项
            </summary>
            <param name="value">条件或值</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordCaseWhenItem.Then(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            结果
            </summary>
            <param name="thenValue"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordDeleteItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Delete关键字项
            </summary>
            <param name="table">表</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordDeleteItem.Where(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询条件
            </summary>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle[],Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            From关键字项
            </summary>
            <param name="tables">表集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.LeftJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            左连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.LeftOuterJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            左外连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.RightJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            右连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.RightOuterJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            右外连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.InnerJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            内连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.CrossJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            交叉连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.CrossOuterJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            交叉外连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.FullJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            全连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.FullOuterJoin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            全连接
            </summary>
            <param name="jionTable">表</param>
            <param name="on">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.Where(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询条件
            </summary>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.OrderBy(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            排序
            </summary>
            <param name="paramhandles"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.GroupBy(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            分组
            </summary>
            <param name="paramhandles"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.LoadInfo(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            加载表的别名信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem.Tran(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            from关键字
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordGroupByItem.#ctor(System.Collections.Generic.IList{Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle},Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Where关键字项
            </summary>
            <param name="condition">条件</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordGroupByItem.OrderBy(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            排序
            </summary>
            <param name="paramhandles"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordGroupByItem.Having(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询条件
            </summary>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordHavingItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Where关键字项
            </summary>
            <param name="condition">条件</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInserItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert关键字项
            </summary>
            <param name="tableHandle">要插入的表</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInserItem.Fields(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            字段
            </summary>
            <param name="paramhandles">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInserItem.ByQuery(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            插入一个查询集合
            </summary>
            <param name="query">查询</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertFieldItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[],Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert的字段关键字项
            </summary>
            <param name="paramHandles">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertFieldItem.Values(System.Object[])">
            <summary>
            值
            </summary>
            <param name="values">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertFieldItem.ByQuery(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            插入一个查询集合
            </summary>
            <param name="query">查询</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertFieldItem.IdentityFieldString(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            自动增长的字段名
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertQueryItem">
            <summary>
            插入查询项
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertQueryItem.#ctor(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert的字段关键字项
            </summary>
            <param name="valueHandles">值的集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertValueItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem[],Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Insert的字段关键字项
            </summary>
            <param name="valueHandles">值的集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordInsertValueItem.IdentityValueString(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            自动增长的字段值
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordJoinItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,System.String,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            LeftJoin关键字项
            </summary>
            <param name="prmsHandle">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordJoinItem.Tran(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            加载表的别名信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLimitItem">
            <summary>
            显示记录的范围
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLimitItem.#ctor(System.UInt32,System.UInt32,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            显示记录的范围
            </summary>
            <param name="star">开始记录</param>
            <param name="totalRecords">要显示多少条记录</param>
            <param name="previous">上一个语句</param>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase">
            <summary>
            链式值类型基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase.#ctor(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase)">
            <summary>
            链式值类型基类
            </summary>
            <param name="previous">上一个值</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordLinkValueItemBase.Previous">
            <summary>
            上一个值
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordOrderByItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[],Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Select关键字项
            </summary>
            <param name="prmsHandle">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordOrderByItem.Having(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询条件
            </summary>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordOrderByItem.Limit(System.UInt32,System.UInt32)">
            <summary>
            查询范围
            </summary>
            <param name="star">开始条数</param>
            <param name="totalRecord">显示条数</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordSelectItem">
            <summary>
            Select关键字项
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordSelectItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[],Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Select关键字项
            </summary>
            <param name="prmsHandle">字段集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordSelectItem.From(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle[])">
            <summary>
            From哪些表
            </summary>
            <param name="tables">表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordSelectItem.LoadInfo(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            加载本次查询要返回的字段信息
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordSelectItem.Tran(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            select关键字
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Update关键字项
            </summary>
            <param name="table">表</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateItem.Table">
            <summary>
            要查询的字段
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateItem.Set(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            添加一个set项
            </summary>
            <param name="parameter">字段</param>
            <param name="valueItem">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateItem.Set(Buffalo.DB.BQLCommon.BQLKeyWordCommon.UpdateSetParamItemList)">
            <summary>
            添加一个set项
            </summary>
            <param name="parameter">字段</param>
            <param name="valueItem">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateSetItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Set关键字项
            </summary>
            <param name="parameter">要更新的字段</param>
            <param name="valueItem">值</param>
            <param name="previous">上一个</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateSetItem.#ctor(Buffalo.DB.BQLCommon.BQLKeyWordCommon.UpdateSetParamItemList,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Set关键字项
            </summary>
            <param name="lstItems">要更新的项集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateSetItem.Where(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询条件
            </summary>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordUpdateSetItem._(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            添加一个set项
            </summary>
            <param name="parameter">字段</param>
            <param name="valueItem">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordWhereItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            Where关键字项
            </summary>
            <param name="condition">条件</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordWhereItem.GroupBy(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            分组
            </summary>
            <param name="paramhandles"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordWhereItem.OrderBy(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            排序
            </summary>
            <param name="paramhandles"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordWhereItem.Having(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询条件
            </summary>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.UpdateSetParamItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            Set关键字更新的项
            </summary>
            <param name="tables">表集合</param>
            <param name="previous">上一个关键字</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.UpdateSetParamItem.Parameter">
            <summary>
            被设置的字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLKeyWordCommon.UpdateSetParamItem.ValueItem">
            <summary>
            要设置的值
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLKeyWordCommon.UpdateSetParamItemList.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            添加一个更新项
            </summary>
            <param name="parameter">更新项的字段</param>
            <param name="valueItem">更新值</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLAggregateFunctions.BQLAggregateFunction.#ctor(Buffalo.DB.BQLCommon.BQLAggregateFunctions.DelAggregateFunctionHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            聚合函数
            </summary>
            <param name="functionName">函数名</param>
            <param name="param"></param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLBaseFunction.AliasTableCollection.Item(System.String)">
            <summary>
            获取别名表
            </summary>
            <param name="aliasName">别名表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.AliasTabelParamCollection.#ctor(System.String)">
            <summary>
            产生别名表
            </summary>
            <param name="aliasName">别名</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLBaseFunction.AliasTabelParamCollection._">
            <summary>
            别名表的属性
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLBaseFunction.AliasTabelParamCollection.Item(System.String)">
            <summary>
            别名表的属性
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL">
            <summary>
            BQL关键字
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Select(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            Select表
            </summary>
            <param name="args">要输出的字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.InsertInto(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle)">
            <summary>
            插入数据
            </summary>
            <param name="arg">要被插入的表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.CreateTable(System.String)">
            <summary>
            创建表
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.AlterTable(System.String)">
            <summary>
            修改表
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Update(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle)">
            <summary>
            更新数据
            </summary>
            <param name="arg">要被更新的表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.DeleteFrom(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle)">
            <summary>
            删除数据
            </summary>
            <param name="arg">要被删除数据的表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Case(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            Case
            </summary>
            <param name="value">要选择的值或表达式</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Not(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            Not
            </summary>
            <param name="value">Not</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Case">
            <summary>
            Case
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.TableAs(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle,System.String)">
            <summary>
            一个别名表
            </summary>
            <param name="table">表</param>
            <param name="asName">别名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.TableAs(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.String)">
            <summary>
            别名查询
            </summary>
            <param name="query">查询</param>
            <param name="asName">别名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.ParamAs(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,System.String)">
            <summary>
            别名字段
            </summary>
            <param name="param">字段</param>
            <param name="asName">别名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Tables">
            <summary>
            别名表
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.ToParam(System.String)">
            <summary>
            把字段名转为Param类型
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.IsNull(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            判断是否为空
            </summary>
            <param name="source">源值</param>
            <param name="nullValue">如果为空的话的输出值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Length(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            判断是否为空
            </summary>
            <param name="source">源值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Distinct(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            distinct，不重复字段
            </summary>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Call(System.String,System.Data.DbType,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem[])">
            <summary>
            调用自定义函数
            </summary>
            <param name="functionName">函数名</param>
            <param name="returnType">返回值类型</param>
            <param name="values">函数值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Call(System.String)">
            <summary>
            调用自定义函数
            </summary>
            <param name="functionName">函数名</param>
            <param name="returnType">返回值类型</param>
            <param name="values">函数值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Call(Buffalo.DB.BQLCommon.BQLExtendFunction.DelCustomizeFunction,System.Data.DbType,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem[])">
            <summary>
            调用自定义函数
            </summary>
            <param name="handle">函数</param>
            <param name="returnType">返回值类型</param>
            <param name="values">函数值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Call(Buffalo.DB.BQLCommon.BQLExtendFunction.DelCustomizeFunction)">
            <summary>
            调用自定义函数
            </summary>
            <param name="handle">函数</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Sum(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            总计
            </summary>
            <param name="functionHandle">函数</param>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.StdDev(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            StdDev
            </summary>
            <param name="functionHandle">函数</param>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Min(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            最小
            </summary>
            <param name="functionHandle">函数</param>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Max(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            最大
            </summary>
            <param name="functionHandle">函数</param>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Count(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            总行数
            </summary>
            <param name="functionHandle">函数</param>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Count">
            <summary>
            总行数
            </summary>
            <param name="functionHandle">函数</param>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Avg(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            平均值
            </summary>
            <param name="functionHandle">函数</param>
            <param name="param">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.NowDate(System.Data.DbType,System.Boolean)">
            <summary>
            当前时间
            </summary>
            <param name="dbType">时间类型</param>
            <param name="isUTC">是否格林威治时间</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.NowDate">
            <summary>
            当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.NowTimeStamp">
            <summary>
            当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Abs(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            绝对值
            </summary>
            <param name="value">求绝对值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Acos(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            反余弦函数
            </summary>
            <param name="value">弧度</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Asin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            反正弦函数
            </summary>
            <param name="value">弧度</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.MathMod(System.Object,System.Object)">
            <summary>
            取模运算
            </summary>
            <param name="value">弧度</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Atan(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            反正切
            </summary>
            <param name="value">弧度</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Atan2(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            计算两个变量 x 和 y 的反正切值
            </summary>
            <param name="y">定点的 y 坐标</param>
            <param name="x">定点的 x 坐标</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Ceil(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            返回大于或等于此数值的整数
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Cos(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            余弦
            </summary>
            <param name="value">弧度</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.DoExp(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            求数值的e为底的幂 
            </summary>
            <param name="values">数值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.DoFloor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            返回小于或等于此数值的整数
            </summary>
            <param name="value">数值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.DoLn(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            取e为底的对数 
            </summary>
            <param name="values">数值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.DoLog10(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            以10为底数的对数 
            </summary>
            <param name="values">数值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Mod(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            求模运算
            </summary>
            <param name="value1">要求的数字</param>
            <param name="value2">被除数</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.BitAND(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            按位与运算
            </summary>
            <param name="value1">数字1</param>
            <param name="value2">数字2</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.BitNot(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            非运算
            </summary>
            <param name="value1">数字1</param>
            <param name="value2">数字2</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.BitOR(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            按位或运算
            </summary>
            <param name="value1">数字1</param>
            <param name="value2">数字2</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.BitXOR(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            按位异或运算
            </summary>
            <param name="value1">数字1</param>
            <param name="value2">数字2</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Power(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            求任意数为底的幂 
            </summary>
            <param name="value">数值</param>
            <param name="value2">几次方</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Random">
            <summary>
            随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Round(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            四舍五入 
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Sign(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            取符号
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Sin(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            正弦函数
            </summary>
            <param name="value">弧度</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Sqrt(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            平方根
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.Tan(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            正切
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.ASC(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            产生顺序排序的项
            </summary>
            <param name="arg">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLBaseFunction.BQL.DESC(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            产生倒叙排序的项
            </summary>
            <param name="arg">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem,System.Collections.IEnumerable,Buffalo.DB.BQLCommon.DelConditionHandle)">
            <summary>
            条件函数
            </summary>
            <param name="sourceHandle">发送源(字段)</param>
            <param name="paramList">参数列表</param>
            <param name="handle">关联处理函数</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditionItem.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.BQLCommon.DelConditionHandle)">
            <summary>
            条件函数
            </summary>
            <param name="sourceHandle">发送源(字段)</param>
            <param name="query">查询</param>
            <param name="handle">关联处理函数</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.ConcatParam(System.String[],System.String)">
            <summary>
            把字符串数组用指定符号连接起来
            </summary>
            <param name="lstParam">字符串数组</param>
            <param name="concat">指定符号</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoIn(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoNotIn(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoLikeByDB(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            Like条件（不区分大小写）
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoLikeIgnore(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            Like条件（不区分大小写）
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoStarWith(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            StarWith条件
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoEndWith(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            EndWith条件
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoBetween(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            Between条件
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoContains(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            全文检索的条件
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionManager.DoFreeText(System.String,System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            全文检索的条件
            </summary>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionScope.FillCondition(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            填充查询条件并返回条件的SQL语句( and 开头)
            </summary>
            <param name="lstParam">参数列表</param>
            <param name="lstScope">范围查询集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLConditionScope.GetSort(Buffalo.DB.QueryConditions.SortList,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            获取排序列表
            </summary>
            <param name="lstScort"></param>
            <param name="table"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.InitExplainer">
            <summary>
            初始化条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.GetExplainer(Buffalo.DB.QueryConditions.Scope)">
            <summary>
            根据条件获取处理函数
            </summary>
            <param name="objScope"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.Between(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释Between
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.IN(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释IN
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.NotIn(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释NotIn
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.Less(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释Less
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.LessThen(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释LessThen
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.More(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释More
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.MoreThen(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释MoreThen
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.NotEqual(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释NotEqual
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.Equal(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释Equal
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.Like(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释Like
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.Contains(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释Contains
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.StarWith(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释StarWith
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.EndWith(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释EndWith
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.Condition(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释Condition
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLConditions.BQLExplainScope.DoScope(Buffalo.DB.QueryConditions.Scope,System.Data.DbType,System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            解释Scope
            </summary>
            <param name="scope"></param>
            <param name="dbType"></param>
            <param name="paramName"></param>
            <param name="handle"></param>
            <param name="table"></param>
            <param name="entityInfo"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLDataAccessBase`1">
            <summary>
            BQL数据访问层的基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDataAccessBase`1.#ctor">
            <summary>
            数据层基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDataAccessBase`1.#ctor(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            数据层基类
            </summary>
            <param name="oper"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDataAccessBase`1.GetUnique(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Boolean)">
            <summary>
            获取第一条记录
            </summary>
            <param name="BQL"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDataAccessBase`1.GetUnique(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            获取第一条记录
            </summary>
            <param name="BQL"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDataAccessBase`1.QueryPageList(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            执行sql语句，分页返回List
            </summary>
            <param name="BQL">BQL</param>
            <param name="objPage">分页数据</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDataAccessBase`1.QueryList(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            执行sql语句，返回List
            </summary>
            <typeparam name="E">实体类型</typeparam>
            <param name="BQL">BQL</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLDbBase">
            <summary>
            数据操作基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.#ctor(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            数据层基类
            </summary>
             <param name="info">数据库信息</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.#ctor(System.Type)">
            <summary>
            数据层基类
            </summary>
            <param name="entityType">关联实体</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.#ctor(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            数据层基类
            </summary>
            <param name="oper"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.SelectTable(System.String,Buffalo.DB.QueryConditions.ScopeList,System.Type)">
            <summary>
            直接查询数据库视图
            </summary>
            <param name="tableName">表名称</param>
            <param name="lstScope">条件</param>
            <param name="vParams">字段列表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.SelectCount``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询总条数
            </summary>
            <param name="lstScope"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.SelectList``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询表
            </summary>
            <typeparam name="E"></typeparam>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.GetParam(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            获取要显示的字段
            </summary>
            <param name="handle"></param>
            <param name="propertys"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.SelectTable(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOtherTableHandle,Buffalo.DB.QueryConditions.ScopeList,System.Type)">
            <summary>
            直接查询数据库视图
            </summary>
            <param name="table">表</param>
            <param name="lstScope">条件</param>
            <param name="vParams">字段列表</param>
            <param name="lstSort">排序类型</param>
            <param name="objPage">分页对象</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.ToCondition(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Collections.Generic.IEnumerable{Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle},System.Boolean,System.Type)">
            <summary>
            转成条件信息
            </summary>
            <param name="BQL"></param>
            <param name="db"></param>
            <param name="aliasManager"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryPageList``1(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.QueryConditions.PageContent,System.Collections.Generic.IEnumerable{Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle},System.Boolean)">
            <summary>
            执行sql语句，分页返回List
            </summary>
            <typeparam name="E">实体类型</typeparam>
            <param name="BQL">BQL</param>
            <param name="objPage">分页数据</param>
            <param name="outPutTables">输出表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryList``1(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Collections.Generic.IEnumerable{Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle},System.Boolean)">
            <summary>
            执行sql语句，返回List
            </summary>
            <typeparam name="E">实体类型</typeparam>
            <param name="BQL">BQL</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.FillOutPutTables(System.Collections.Generic.IEnumerable{Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle},Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager)">
            <summary>
            填充要输出的表
            </summary>
            <param name="outPutTables"></param>
            <param name="aliasManager"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.LoadFromReader``1(Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager,System.Data.IDataReader)">
            <summary>
            加载数据
            </summary>
            <typeparam name="E"></typeparam>
            <param name="aliasManager"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.GetSelectSql(Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            获取范围表对应的BQL
            </summary>
            <param name="lstScope"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.SelectDataSet``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询并返回DataSet
            </summary>
            <typeparam name="E"></typeparam>
            <param name="lstScope">条件集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryDataSet(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Type,System.Boolean)">
            <summary>
            执行sql语句，分页返回DataSet
            </summary>
            <param name="BQL">sql语句</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryDataSet``1(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Boolean)">
            <summary>
            执行sql语句，分页返回DataSet
            </summary>
            <param name="BQL">sql语句</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryDataSet``1(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            执行sql语句，分页返回DataSet
            </summary>
            <param name="BQL">sql语句</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryDataSet(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Type,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            执行sql语句，分页返回DataSet
            </summary>
            <param name="BQL">sql语句</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryReader(Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.PageContent,System.Type)">
            <summary>
            执行sql语句，分页返回Reader
            </summary>
            <param name="BQL">sql语句</param>
            <param name="objPage">分页对象</param>
            <param name="tableType">表对应的实体类型</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryReader(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.QueryConditions.PageContent,System.Type,System.Boolean)">
            <summary>
            执行sql语句，分页返回Reader
            </summary>
            <param name="BQL">sql语句</param>
            <param name="objPage">分页对象</param>
            <param name="tableType">表对应的实体类型</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryReader(Buffalo.DB.QueryConditions.ScopeList,System.Type)">
            <summary>
            执行sql语句，返回Reader
            </summary>
            <param name="sql">sql语句</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.QueryReader(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Type,System.Boolean)">
            <summary>
            执行sql语句，返回Reader
            </summary>
            <param name="sql">sql语句</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.ExecuteCommand(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery)">
            <summary>
            执行Sql命令
            </summary>
            <param name="BQL">sql语句</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.ExistsRecord``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询是否存在符合条件的记录
            </summary>
            <param name="BQL">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.ExistsRecord``1(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Boolean)">
            <summary>
            查询是否存在符合条件的记录
            </summary>
            <param name="BQL">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.GetUnique``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询表
            </summary>
            <typeparam name="E"></typeparam>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.GetUnique``1(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,System.Boolean)">
            <summary>
            获取第一条记录
            </summary>
            <typeparam name="E"></typeparam>
            <param name="BQL"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.FillCondition(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,Buffalo.DB.QueryConditions.ScopeList,System.Type)">
            <summary>
            填充信息
            </summary>
            <param name="condition"></param>
            <param name="table"></param>
            <param name="lstScope"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.FillCondition(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            填充信息
            </summary>
            <param name="condition"></param>
            <param name="table"></param>
            <param name="lstScope"></param>
            <param name="entityType"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.GetSort(Buffalo.DB.QueryConditions.SortList,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle,System.Type)">
            <summary>
            获取排序
            </summary>
            <param name="lstScort"></param>
            <param name="table"></param>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.GetSort(Buffalo.DB.QueryConditions.SortList,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            转换排序信息
            </summary>
            <param name="lstScort"></param>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLDbBase.FillGroupBy(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.QueryConditions.ScopePropertyCollection)">
            <summary>
            填充GroupBy
            </summary>
            <param name="BQL"></param>
            <param name="groupBy"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLExtendFunction.DelCustomizeFunction">
            <summary>
            自定义函数委托
            </summary>
            <param name="handle"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.BQLExtendFunction.BQLCustomizeFunction">
            <summary>
            自定义函数
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLExtendFunction.BQLCustomizeFunction.FunctionName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLExtendFunction.BQLCustomizeFunction.Args">
            <summary>
            参数,获取SQL语句则使用 arg.DisplayValue(info)
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLExtendFunction.BQLCustomizeFunction.#ctor(System.String,System.Data.DbType,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem[])">
            <summary>
            自定义函数
            </summary>
            <param name="funName">函数名</param>
            <param name="returnType">返回值类型</param>
            <param name="values">函数值</param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.BQLExtendFunction.BQLCustomizeFunction.#ctor(Buffalo.DB.BQLCommon.BQLExtendFunction.DelCustomizeFunction,System.Data.DbType,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem[])">
            <summary>
            自定义函数
            </summary>
            <param name="handle">函数</param>
            <param name="returnType">返回值类型</param>
            <param name="values">函数值</param>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLInfos.IsShowTableName">
            <summary>
            如果是输出字段时候是否显示表名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLInfos.IsPutPropertyName">
            <summary>
            是否输出属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.BQLInfos.PagerCount">
            <summary>
            分页类的数量
            </summary>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.IdentityInfos.IdentityInfo">
            <summary>
            自动增长信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.IdentityInfos.IdentityInfo.EntityInfo">
            <summary>
            实体信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.BQLCommon.IdentityInfos.IdentityInfo.PropertyInfo">
            <summary>
            对应的属性信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.IdentityInfos.IdentityInfo.#ctor(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            自动增长信息
            </summary>
            <param name="entityInfo">实体信息</param>
            <param name="propertyInfo">对应的属性信息</param>
        </member>
        <member name="T:Buffalo.DB.BQLCommon.KeyWordConver">
            <summary>
            关键字转换器
            </summary>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.KeyWordConver.ToConver(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            开始转换
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.KeyWordConver.CollectItem(Buffalo.DB.BQLCommon.BQLKeyWordCommon.BQLQuery,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            遍历关键字链，把它放进关键字栈(把倒置的关键字项转回来)
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Buffalo.DB.BQLCommon.KeyWordConver.DoConver(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            开始分析
            </summary>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.LocalCacheBase">
            <summary>
            本地缓存基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.GetCacheList(System.String)">
            <summary>
            获取集合
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.GetCacheHash(System.String)">
            <summary>
            获取哈希表
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.HashSetRangeValue(System.String,System.Collections.IDictionary,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            批量给HashSet设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="dicSet">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.HashSetValue(System.String,System.Object,System.Object,Buffalo.DB.CacheManager.SetValueType,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            HashSet设置值
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="value">哈希表的值</param>
            <param name="type">设置方式</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.HashGetValue``1(System.String,System.Object,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.HashGetAllValues``2(System.String,``1,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取所有哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.HashDeleteValue(System.String,System.Object,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.LocalCacheBase.HashDeleteValues(System.String,System.Collections.IEnumerable,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            批量删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkeys">要删除哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.CacheUnit">
            <summary>
            缓存创建器
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.CacheUnit.CreateCache(System.String,System.String)">
            <summary>
            创建缓存类
            </summary>
            <param name="cacheType">缓存类型(BuffaloCacheTypes.System、BuffaloCacheTypes.Web)</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.CacheUnit.CreateCache(System.String,System.String,System.String)">
            <summary>
            创建缓存类
            </summary>
            <param name="name">缓存名</param>
            <param name="cacheType">缓存类型(BuffaloCacheTypes.System、BuffaloCacheTypes.Web)</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.CacheUnit.EncodeString(System.String)">
            <summary>
            加密连接字符串裁剪值
            </summary>
            <param name="part"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.CacheUnit.DecodeString(System.String)">
            <summary>
            解密连接字符串裁剪值
            </summary>
            <param name="part"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.CacheUnit.CutString(System.String,System.Int32)">
            <summary>
            连接字符串裁剪值
            </summary>
            <param name="part"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.BuffaloCacheTypes">
            <summary>
            缓存类型
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.BuffaloCacheTypes.System">
            <summary>
            系统内存
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.BuffaloCacheTypes.Web">
            <summary>
            Web Cache(Winform可用)
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.BuffaloCacheTypes.Memcached">
            <summary>
            memcached
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.BuffaloCacheTypes.Redis">
            <summary>
            Redis
            </summary>
        </member>
        <member name="T:Buffalo.DB.CacheManager.SetValueType">
            <summary>
            设置值的方式
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.SetValueType.Set">
            <summary>
            新增或覆盖，任何时候都设置成功
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.SetValueType.Replace">
            <summary>
            覆盖模式，当存在此Key时候才能覆盖成功
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.SetValueType.AddNew">
            <summary>
            新增模式，当不存在此Key时候才能新增成功
            </summary>
        </member>
        <member name="T:Buffalo.DB.CacheManager.DataSetCacheItem">
            <summary>
            缓存的DataSet项
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.DataSetCacheItem.MD5">
            <summary>
            关联的MD5
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.DataSetCacheItem.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.DataSetCacheItem.TablesVersion">
            <summary>
            表的版本
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.GetValue``1(System.String,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="oper">连接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.GetValue(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="oper">连接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.GetValues(System.String[],Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <param name="key2">键</param>
            <param name="oper">连接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.SetValue``1(System.String,``0,Buffalo.DB.CacheManager.SetValueType,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="type">设置值方式</param>
            <param name="oper">连接</param>
            <param name="expirSeconds">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.SetValue(System.String,System.Object,Buffalo.DB.CacheManager.SetValueType,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="type">设置值方式</param>
            <param name="oper">连接</param>
            <param name="expirSeconds">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ExistsKey(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            Key是否存在
            </summary>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.SetKeyExpire(System.String,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置键过期
            </summary>
            <param name="key"></param>
            <param name="expirSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ClearAll">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.DeleteValue(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            删除值
            </summary>
            <param name="key">键</param>
            <param name="oper">连接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.DoIncrement(System.String,System.UInt64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            自增
            </summary>
            <param name="key"></param>
            <param name="inc"></param>
            <param name="oper">连接</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.DoDecrement(System.String,System.UInt64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            自减
            </summary>
            <param name="key"></param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.GetClient">
            <summary>
            获取缓存操作器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ListAddValue``1(System.String,System.Int64,``0,Buffalo.DB.CacheManager.SetValueType,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            增加到列表
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="index">索引(0为增加到头部，-1为增加到尾部)</param>
            <param name="value">值</param>
            <param name="setType">设置值方式</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ListGetValue``1(System.String,System.Int64,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="index">值位置</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ListGetLength(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取集合长度
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ListPopValue``1(System.String,System.Boolean,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            移除并返回值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="isPopEnd">是否从尾部移除(true则从尾部移除，否则从头部移除)</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ListRemoveValue(System.String,System.Object,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            移除值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">要移除几个，0则为全部移除</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.ListAllValues``1(System.String,System.Int64,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取集合所有值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="start">起始位置(默认0)</param>
            <param name="end">结束位置(-1则为读到末尾)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashSetRangeValue(System.String,System.Collections.IDictionary,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            批量给HashSet设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="dicSet">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashSetValue(System.String,System.Object,System.Object,Buffalo.DB.CacheManager.SetValueType,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            HashSet设置值
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="value">哈希表的值</param>
            <param name="type">设置方式</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashGetValue``1(System.String,System.Object,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashGetAllValues``2(System.String,``1,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取所有哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashDeleteValue(System.String,System.Object,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashDeleteValues(System.String,System.Collections.IEnumerable,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            批量删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkeys">要删除哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashExists(System.String,System.Object,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            判断是否存在此key
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashIncrement(System.String,System.Object,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            哈希表的值自增
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.ICacheAdaper.HashDecrement(System.String,System.Object,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            哈希表的值自减
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.MemCacheReader">
            <summary>
            内存数据行读取器
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.MemCacheReader._data">
            <summary>
            数据
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.MemCacheReader._currentIndex">
            <summary>
            当前数据索引
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.MemCacheReader._currentData">
            <summary>
            当前数据表
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.MemCacheReader._currentRowIndex">
            <summary>
            当前数据表的索引
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.MemCacheReader._currentRow">
            <summary>
            当前行
            </summary>
        </member>
        <member name="T:Buffalo.DB.CacheManager.MemoryAdaper">
            <summary>
            系统内存的缓存适配器
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.MemoryAdaper._lockObjects">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.MemoryAdaper.Info">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.SetData(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,System.Data.DataSet,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置数据
            </summary>
            <param name="tableName">表名</param>
            <param name="sql">SQL名</param>
            <param name="dt">数据</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.GetTableName(System.String)">
            <summary>
            获取表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.GetTableKeyName(System.String)">
            <summary>
            生成表名对应的Key
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.GetKey(System.String)">
            <summary>
            通过SQL获取键
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.GetData(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据SQL语句从缓存中找出数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">表名集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.RemoveBySQL(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            通过SQL删除某项
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.RemoveByTableName(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            通过表名删除关联项
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.GetAllKeys(System.String)">
            <summary>
            所有键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.ExistsKey(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            Key是否存在
            </summary>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.GetCacheList(System.String)">
            <summary>
            获取集合
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.MemoryAdaper.GetCacheHash(System.String)">
            <summary>
            获取哈希表
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.NetCacheBase`1">
            <summary>
            分布式缓存基类
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.NetCacheBase`1._dicQueryCache">
            <summary>
            查询缓存
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.NetCacheBase`1._expiration">
            <summary>
            过期时间(分钟)
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.NetCacheBase`1.Expiration">
            <summary>
            过期时间(分钟)
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.NetCacheBase`1.Info">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.NetCacheBase`1.ThrowExcertion">
            <summary>
            抛出异常
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.SetKeyExpire(System.String,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置键过期时间
            </summary>
            <param name="key"></param>
            <param name="expirSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.CreateClient(System.Boolean,System.String)">
            <summary>
            创建客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetTableName(System.String)">
            <summary>
            获取表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetSQLMD5(System.String)">
            <summary>
            获取SQL语句的键
            </summary>
            <param name="sql">SQL语句</param>
            <param name="client">创建器</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.FormatVersionKey(System.String)">
            <summary>
            获取版本号的键
            </summary>
            <param name="md5">哈希值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ComparVersion(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},`0)">
            <summary>
            对比版本
            </summary>
            <param name="tableNames">表名集合</param>
            <param name="md5">sql语句的MD5</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoSetKeyExpire(System.String,System.Int32,`0)">
            <summary>
            设置键过期时间
            </summary>
            <param name="key"></param>
            <param name="expirSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetValue``1(System.String,``0,`0)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="valueType">值类型</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetValue(System.String,`0)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="valueType">值类型</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoExistsKey(System.String,`0)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="valueType">值类型</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetValues(System.String[],`0)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="valueType">值类型</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.SetValue``1(System.String,``0,Buffalo.DB.CacheManager.SetValueType,System.Int32,`0)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="type">设置方式</param>
            <param name="expirSeconds">超时秒数</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.SetValue(System.String,System.Object,Buffalo.DB.CacheManager.SetValueType,System.Int32,`0)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="type">设置方式</param>
            <param name="expirSeconds">超时秒数</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoGetDataSet(System.String,`0)">
            <summary>
            获取DataSet
            </summary>
            <param name="key">键</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoSetDataSet(System.String,System.Data.DataSet,System.Int32,`0)">
            <summary>
            设置DataSet
            </summary>
            <param name="key">键</param>
            <param name="value">DataSet</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DeleteValue(System.String,`0)">
            <summary>
            删除值
            </summary>
            <param name="key">键</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoIncrement(System.String,System.UInt64,`0)">
            <summary>
            自增
            </summary>
            <param name="key">键</param>
            <param name="inc">自增值</param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoDecrement(System.String,System.UInt64,`0)">
            <summary>
            自减
            </summary>
            <param name="key">键</param>
            <param name="dec">自减值</param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoNewVer(System.String,`0)">
            <summary>
            设置版本号
            </summary>
            <param name="key"></param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetCacheName">
            <summary>
            缓存服务器类型
            </summary>
            <param name="key"></param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoGetEntityList(System.String,System.Type,`0)">
            <summary>
            获取实体集合
            </summary>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoSetEntityList(System.String,System.Collections.IList,System.Int32,`0)">
            <summary>
            设置属性集合
            </summary>
            <param name="key"></param>
            <param name="lstEntity"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ExistsKey(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetValue``1(System.String,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetValue(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetKeys(System.Collections.Generic.IDictionary{System.String,System.Boolean})">
            <summary>
            获取要申请的键集合
            </summary>
            <param name="tableNames"></param>
            <param name="tableMD5"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetTablesVersion(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Boolean)">
            <summary>
            获取当前库中所有表的版本号
            </summary>
            <param name="tableNames">表名集合</param>
            <param name="client">Redis连接</param>
            <param name="needCreateTableVer">是否需要创建表的键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetTablesVerString(System.Collections.Generic.IDictionary{System.String,System.Boolean},`0,System.Boolean)">
            <summary>
            获取当前库中表的版本号字符串
            </summary>
            <param name="tableNames">表名集合</param>
            <param name="client">Redis连接</param>
            <param name="needCreateTableVer">是否需要创建表的键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetDataVersion(System.String,`0)">
            <summary>
            获取当前查询的版本号
            </summary>
            <param name="md5">SQL的md5</param>
            <param name="client">Redis连接</param>
            <returns></returns>
        </member>
        <member name="F:Buffalo.DB.CacheManager.NetCacheBase`1.MaxVersion">
            <summary>
            最大版本号
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.RemoveByTableName(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据表名删除缓存
            </summary>
            <param name="tableName"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.SetData(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,System.Data.DataSet,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            保存数据
            </summary>
            <param name="tableNames"></param>
            <param name="sql"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.SetValue``1(System.String,``0,Buffalo.DB.CacheManager.SetValueType,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="type">设置值方式</param>
            <param name="expirSeconds">过期时间(-1为默认)</param>
            <param name="oper">连接</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.SetValue(System.String,System.Object,Buffalo.DB.CacheManager.SetValueType,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="expirSeconds">过期时间(-1为默认)</param>
            <param name="oper">连接</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DeleteValue(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            删除值
            </summary>
            <param name="key">键</param>
            <param name="oper"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoIncrement(System.String,System.UInt64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            增加值
            </summary>
            <param name="key"></param>
            <param name="inc"></param>
            <param name="oper"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.DoDecrement(System.String,System.UInt64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            增减值
            </summary>
            <param name="key"></param>
            <param name="inc"></param>
            <param name="oper"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.SetEntityList(System.String,System.Collections.IList,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            保存数据
            </summary>
            <param name="tableNames"></param>
            <param name="sql"></param>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetEntityList(System.String,System.Type,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取实体集合
            </summary>
            <param name="key">键</param>
            <param name="entityType">实体类型</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ClearAll">
            <summary>
            清空所有内容
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.GetAllKeys(System.String)">
            <summary>
            获取存在的键键
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListAddValue``1(System.String,System.Int64,``0,Buffalo.DB.CacheManager.SetValueType,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            增加到列表
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="index">索引(0为增加到头部，-1为增加到尾部)</param>
            <param name="value">值</param>
            <param name="setType">设置值方式</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListGetValue``1(System.String,System.Int64,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="index">值位置</param>
            <param name="defaultValue">默认值</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListGetLength(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取集合长度
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListPopValue``1(System.String,System.Boolean,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            移除并返回值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="isPopEnd">是否从尾部移除(true则从尾部移除，否则从头部移除)</param>
            <param name="defaultValue">默认值</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListRemoveValue(System.String,System.Object,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            移除值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">要移除几个，0则为全部移除</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListAllValues``1(System.String,System.Int64,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取集合所有值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="start">起始位置(默认0)</param>
            <param name="end">结束位置(-1则为读到末尾)</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashSetRangeValue(System.String,System.Collections.IDictionary,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            批量给HashSet设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="dicSet">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashSetValue(System.String,System.Object,System.Object,Buffalo.DB.CacheManager.SetValueType,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            HashSet设置值
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="value">哈希表的值</param>
            <param name="type">设置方式</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashGetValue``1(System.String,System.Object,``0,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashGetAllValues``2(System.String,``1,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取所有哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashDeleteValue(System.String,System.Object,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashDeleteValues(System.String,System.Collections.IEnumerable,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            批量删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkeys">要删除哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashExists(System.String,System.Object,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            判断是否存在此key
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashIncrement(System.String,System.Object,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            哈希表的值自增
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashDecrement(System.String,System.Object,System.Int64,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            哈希表的值自减
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashSetRangeValue(System.String,System.Collections.IDictionary,`0)">
            <summary>
            批量HashSet设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="dicSet">值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashSetValue(System.String,System.Object,System.Object,Buffalo.DB.CacheManager.SetValueType,`0)">
            <summary>
            HashSet设置值
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="value">哈希表的值</param>
            <param name="type">设置方式</param>
            <param name="connection"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashGetValue``1(System.String,System.Object,``0,`0)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashGetAllValues``2(System.String,``1,`0)">
            <summary>
            获取所有哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashDeleteValue(System.String,System.Object,`0)">
            <summary>
            删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashDeleteValues(System.String,System.Collections.IEnumerable,`0)">
            <summary>
            批量删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkeys">要删除哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashExists(System.String,System.Object,`0)">
            <summary>
            判断是否存在此key
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashIncrement(System.String,System.Object,System.Int64,`0)">
            <summary>
            哈希表的值自增
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.HashDecrement(System.String,System.Object,System.Int64,`0)">
            <summary>
            哈希表的值自减
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListAddValue``1(System.String,System.Int64,``0,Buffalo.DB.CacheManager.SetValueType,`0)">
            <summary>
            增加到列表
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="index">索引(0为增加到头部，-1为增加到尾部)</param>
            <param name="value">值</param>
            <param name="setType">设置值方式</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListGetValue``1(System.String,System.Int64,``0,`0)">
            <summary>
            插入
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="index"></param>
            <param name="defaultValue"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListGetLength(System.String,`0)">
            <summary>
            获取集合长度
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListPopValue``1(System.String,System.Boolean,``0,`0)">
            <summary>
            移除并返回值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="isPopEnd">是否从尾部移除(true则从尾部移除，否则从头部移除)</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListRemoveValue(System.String,System.Object,System.Int64,`0)">
            <summary>
            移除值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">要移除几个，0则为全部移除</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.NetCacheBase`1.ListAllValues``1(System.String,System.Int64,System.Int64,`0)">
            <summary>
            获取集合所有值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="start">起始位置(默认0)</param>
            <param name="end">结束位置(-1则为读到末尾)</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.QueryCache">
            <summary>
            内存缓存类
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.QueryCache.IsAllTableCache">
            <summary>
            是否所有表都使用缓存
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.QueryCache.DBInfo">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.#ctor(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            缓存操作类
            </summary>
            <param name="db">数据库</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.InitCache(Buffalo.DB.CacheManager.ICacheAdaper,System.Boolean)">
            <summary>
            初始化缓存
            </summary>
            <param name="cache">缓存类</param>
            <param name="isAllTableCache">是否所有表都进行缓存</param>
        </member>
        <member name="P:Buffalo.DB.CacheManager.QueryCache.HasCache">
            <summary>
            是否使用了缓存
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetCache(Buffalo.DB.DataBaseAdapter.DBInfo,System.String,System.String)">
            <summary>
            根据类型创建缓存适配器
            </summary>
            <param name="type">类型</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetAssemblyCache(Buffalo.DB.DataBaseAdapter.DBInfo,System.String,System.String)">
            <summary>
            获取外部程序集的缓存
            </summary>
            <param name="info"></param>
            <param name="type"></param>
            <param name="connectionString"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetDataSet(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取缓存中的DataSet
            </summary>
            <param name="tables">表</param>
            <param name="sql">SQL语句</param>
            <param name="lstParam">变量集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetDataSet(System.Data.DataSet,System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.ParamList,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取缓存中的DataSet
            </summary>
            <param name="tables">表</param>
            <param name="sql">SQL语句</param>
            <param name="lstParam">变量集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetDataSet(System.Data.DataSet,System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取缓存中的DataSet
            </summary>
            <param name="tables">表</param>
            <param name="sql">SQL语句</param>
            <param name="lstParam">变量集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetAllKeys(System.String)">
            <summary>
            获取所有键
            </summary>
            <param name="pattern">通配符 允许使用的通配符：?，*，其中? 代表任意一个字符，* 代表零或多个任意字符</param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.CreateMap(System.String[])">
            <summary>
            创建缓存关联表信息
            </summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetReader(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取缓存中的Reader
            </summary>
            <param name="tables">表</param>
            <param name="sql">SQL语句</param>
            <param name="lstParam">变量集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetReader(System.Data.IDataReader,System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            写入缓存中的Reader
            </summary>
            <param name="tables">表</param>
            <param name="sql">SQL语句</param>
            <param name="lstParam">变量集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ClearTableCache(System.Collections.Generic.IDictionary{System.String,System.Boolean},Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            删除表的缓存
            </summary>
            <param name="tables"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.CheckTable(System.Collections.Generic.IDictionary{System.String,System.Boolean})">
            <summary>
            检查表是否可用缓存
            </summary>
            <param name="tables"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.IsCacheTable(System.String)">
            <summary>
            判断表名是否允许使用缓存
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetCacheTable(System.String)">
            <summary>
            设置需要缓存的表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetValues(System.String[])">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="valueType">值类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetValue``1(System.String,``0)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="defaultValue">没有键时候的默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetValue``1(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ExistsKey(System.String)">
            <summary>
            Key是否存在
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetKeyExpire(System.String,System.Int32)">
            <summary>
            设置key过期
            </summary>
            <param name="key">键</param>
            <param name="expirSeconds">过期时间(秒)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.Clear">
            <summary>
            清空所有缓存值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetValue``1(System.String,``0)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetValue``1(System.String,``0,Buffalo.DB.CacheManager.SetValueType,System.Int32)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="expirSeconds">超时秒数</param>
            <param name="value">值</param>
            <param name="type">设置值方式</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetValue(System.String,System.Object,Buffalo.DB.CacheManager.SetValueType,System.Int32)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="expirSeconds">超时秒数</param>
            <param name="value">值</param>
            <param name="type">设置值方式</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetValue(System.String,System.Object)">
            <summary>
            设置值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns>是否设置成功</returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.DeleteValue(System.String)">
            <summary>
            删除值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.DoIncrement(System.String)">
            <summary>
            自增1
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.DoIncrement(System.String,System.UInt64)">
            <summary>
            自增1
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.DoDecrement(System.String)">
            <summary>
            自减1
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.DoDecrement(System.String,System.UInt64)">
            <summary>
            自减
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetEntity(System.String,System.Type)">
            <summary>
            获取实体
            </summary>
            <param name="key">键</param>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetEntity``1(System.String)">
            <summary>
            获取实体
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetEntity(System.String,Buffalo.DB.CommBase.EntityBase)">
            <summary>
            保存实体
            </summary>
            <param name="key">键</param>
            <param name="enity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetEntity(System.String,System.Int32,Buffalo.DB.CommBase.EntityBase)">
            <summary>
            保存实体
            </summary>
            <param name="key">键</param>
            <param name="enity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetList(System.String,System.Type)">
            <summary>
            获取集合
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.GetList``1(System.String)">
            <summary>
            获取集合
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetList(System.String,System.Int32,System.Collections.IList)">
            <summary>
            设置集合
            </summary>
            <param name="key">键</param>
             <param name="expirSeconds">过期时间</param>
            <param name="lstEntiity">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.SetList(System.String,System.Collections.IList)">
            <summary>
            设置集合
            </summary>
            <param name="key">键</param>
             <param name="expirSeconds">过期时间</param>
            <param name="lstEntiity">实体集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ListAddValue``1(System.String,``0,System.Int64,Buffalo.DB.CacheManager.SetValueType)">
            <summary>
            增加到列表
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="index">索引(0为增加到头部，-1为增加到尾部)</param>
            <param name="value">值</param>
            <param name="setType">设置值方式</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ListGetValue``1(System.String,System.Int64,``0)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="index">值位置</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ListGetLength(System.String)">
            <summary>
            获取集合长度
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ListPopValue``1(System.String,System.Boolean,``0)">
            <summary>
            移除并返回值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="isPopEnd">是否从尾部移除(true则从尾部移除，否则从头部移除)</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ListRemoveValue(System.String,System.Object,System.Int64)">
            <summary>
            移除值
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="count">要移除几个，0则为全部移除</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.ListAllValues``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取集合所有值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="start">起始位置(默认0)</param>
            <param name="end">结束位置(-1则为读到末尾)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashSetRangeValue(System.String,System.Collections.IDictionary)">
            <summary>
            批量给HashSet设置值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="dicSet">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashSetValue(System.String,System.Object,System.Object,Buffalo.DB.CacheManager.SetValueType)">
            <summary>
            HashSet设置值
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="value">哈希表的值</param>
            <param name="type">设置方式</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashSetValue(System.String,System.Object,System.Object)">
            <summary>
            HashSet设置值
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="value">哈希表的值</param>
            <param name="type">设置方式</param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashGetValue``1(System.String,System.Object,``0)">
            <summary>
            获取哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Buffalo.DB.CacheManager.QueryCache.HashGetValue``1(System.String,System.Object)" -->
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashGetAllValues``2(System.String,``1)">
            <summary>
            获取所有哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashGetAllValues``2(System.String)">
            <summary>
            获取哈希表的所有值
            </summary>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashDeleteValue(System.String,System.Object)">
            <summary>
            删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashDeleteValues(System.String,System.Collections.IEnumerable)">
            <summary>
            批量删除哈希表的值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key">键</param>
            <param name="hashkeys">要删除哈希表的键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashExists(System.String,System.Object)">
            <summary>
            哈希表的键是否存在
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希表的键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashIncrement(System.String,System.Object)">
            <summary>
            哈希表自增
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashIncrement(System.String,System.Object,System.Int64)">
            <summary>
            哈希表自增
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">自增量</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashDecrement(System.String,System.Object,System.Int64)">
            <summary>
            哈希表自减
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <param name="value">自减量</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryCache.HashDecrement(System.String,System.Object)">
            <summary>
            哈希表自减
            </summary>
            <param name="key">键</param>
            <param name="hashkey">哈希键</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.QueryCacheCommand">
            <summary>
            缓存指令
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryViewConfig.RegisterView(System.Type)">
            <summary>
            登记视图
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.QueryViewConfig.GetViewList(System.String)">
            <summary>
            根据实体名获取对应的视图集合
            </summary>
            <param name="entityName">实体名</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheManager.WebCacheAdaper">
            <summary>
            ASPNET的Cache
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.WebCacheAdaper._expiration">
            <summary>
            过期时间(分钟)
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheManager.WebCacheAdaper._lockObjects">
            <summary>
            锁对象
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.WebCacheAdaper.Expiration">
            <summary>
            过期时间(分钟)
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.GetAllKeys(System.String)">
            <summary>
            所有键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.CreatePool(System.String)">
            <summary>
            创建连接池
            </summary>
            <param name="connStr"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CacheManager.WebCacheAdaper.CurCache">
            <summary>
            当前缓存
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheManager.WebCacheAdaper.Info">
            <summary>
            数据库信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.SetData(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,System.Data.DataSet,System.Int32,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            设置数据
            </summary>
            <param name="tableName">表名</param>
            <param name="sql">SQL名</param>
            <param name="dt">数据</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.GetTableName(System.String)">
            <summary>
            获取表名
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.GetTableKeyName(System.String)">
            <summary>
            生成表名对应的Key
            </summary>
            <param name="tableName">表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.GetKey(System.String)">
            <summary>
            通过SQL获取键
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.GetData(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据SQL语句从缓存中找出数据
            </summary>
            <param name="sql">SQL语句</param>
            <param name="tableNames">表名集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.RemoveBySQL(System.Collections.Generic.IDictionary{System.String,System.Boolean},System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            通过SQL删除某项
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.RemoveByTableName(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            通过表名删除关联项
            </summary>
            <param name="sql"></param>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.ExistsKey(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            Key是否存在
            </summary>
            <param name="key"></param>
            <param name="oper"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.GetCacheList(System.String)">
            <summary>
            获取集合
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheManager.WebCacheAdaper.GetCacheHash(System.String)">
            <summary>
            获取哈希表
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CacheStorage.CacheStorageItem`1">
            <summary>
            缓存项
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheStorage.CacheStorageItem`1._key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheStorage.CacheStorageItem`1.Key">
            <summary>
            键
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheStorage.CacheStorageItem`1.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheStorage.CacheStorageItem`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Buffalo.DB.CacheStorage.QueryStorageBase`1">
            <summary>
            存储基类
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheStorage.QueryStorageBase`1._verCache">
            <summary>
            组版本
            </summary>
        </member>
        <member name="F:Buffalo.DB.CacheStorage.QueryStorageBase`1._dataCache">
            <summary>
            组数据
            </summary>
        </member>
        <member name="P:Buffalo.DB.CacheStorage.QueryStorageBase`1.CacheKey">
            <summary>
            缓存Key
            </summary>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.InitCache(System.String,System.String)">
            <summary>
            初始化组版本缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.GetVersion(System.String)">
            <summary>
            获取组版本
            </summary>
            <param name="accid"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.IncVersion(System.String)">
            <summary>
            获取组版本自增
            </summary>
            <param name="accid"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.GetKey(System.String)">
            <summary>
            获取存储值
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.EqualVersion(System.String)">
            <summary>
            对比版本(如果跟数据版本不同则返回false)
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.SetValue(System.String,`0)">
            <summary>
            设置值
            </summary>
            <param name="id"></param>
            <param name="value"></param>
        </member>
        <member name="M:Buffalo.DB.CacheStorage.QueryStorageBase`1.SearchValue(System.String)">
            <summary>
            查询内容
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.BH">
            <summary>
            业务辅助类(只限三层架构)
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.SelectList``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.SelectList``1(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            查询集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">条件</param>
            <param name="pager">分页条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.SelectList``1(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询集合
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.GetUnique``1(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            获取唯一
            </summary>
            <typeparam name="T"></typeparam>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.GetUnique``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            获取唯一
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.GetById``1(System.Object)">
            <summary>
            根据ID获取实体
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id">id</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.SelectCount``1(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            查询数目
            </summary>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.SelectCount``1(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询数目
            </summary>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.Update(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            更新一个实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.Delete(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            删除一个实体
            </summary>
            <param name="entity">要删除的实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.Insert(Buffalo.DB.CommBase.EntityBase,System.Boolean)">
            <summary>
            插入一个实体
            </summary>
            <param name="entity">要插入的实体</param>
            <param name="fillIdentity">是否填充主键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BH.Insert(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            插入一个实体
            </summary>
            <param name="entity">要插入的实体</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.BusinessBases.BatchAction">
            <summary>
            数据库的批量动作
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BatchAction.#ctor(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            自释放事务类
            </summary>
            <param name="oper"></param>
            <param name="runnow"></param>
        </member>
        <member name="P:Buffalo.DB.CommBase.BusinessBases.BatchAction.Runnow">
            <summary>
            是否当前运行
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BatchAction.Dispose">
            <summary>
            释放事务
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BatchAction.EndBatch">
            <summary>
            结束批量操作
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Exists(`0)">
            <summary>
            更新和添加时候判断该对象是否已经存在
            </summary>
            <param name="entity">对象</param>
            <param name="oper">数据链接对象</param>
            <returns>没有存在就返回null，否则返回一个值</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.HasChild(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            删除时候判断该对象是否还存在子记录
            </summary>
            <param name="entity">对象</param>
            <param name="oper">数据链接对象</param>
            <returns>没有存在就返回null，否则返回一个值</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.HasChild(`0)">
            <summary>
            删除时候判断该对象是否还存在子记录
            </summary>
            <param name="entity">对象</param>
            <param name="oper">数据链接对象</param>
            <returns>没有存在就返回null，否则返回一个值</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.HasChild(System.Object)">
            <summary>
            删除时候判断该对象是否还存在子记录
            </summary>
            <param name="entity">对象</param>
            <param name="oper">数据链接对象</param>
            <returns>没有存在就返回null，否则返回一个值</returns>
        </member>
        <member name="F:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1._affectedRows">
            <summary>
             此次执行的影响行数
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.AffectedRows">
            <summary>
            此次执行的影响行数
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Update(`0)">
            <summary>
            更新
            </summary>
            <param name="entity">对象</param>
            <returns>null:更新完毕,不为null:更新失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Update(`0,System.Boolean)">
            <summary>
            更新
            </summary>
            <param name="entity">对象</param>
            <param name="optimisticConcurrency">是否使用并发控制并发控制</param>
            <returns>null:更新完毕,不为null:更新失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Update(`0,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            更新(慎用)
            </summary>
            <param name="entity">对象</param>
            <param name="scorpList">范围更新的列表 不为null时候 entity.主键 条件无效</param>
            <param name="lstValue">set实体 此列表的更新值优先于entity</param>
            <param name="optimisticConcurrency">并发控制</param>
            <returns>null:更新完毕,不为null:更新失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Update(`0,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList)">
            <summary>
            更新(慎用)
            </summary>
            <param name="entity">对象</param>
            <param name="scorpList">范围更新的列表 不为null时候 entity.主键 条件无效</param>
            <param name="lstValue">set实体 此列表的更新值优先于entity</param>
            <returns>null:更新完毕,不为null:更新失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Update(Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList)">
            <summary>
            更新
            </summary>
            <param name="scorpList">范围更新的列表</param>
            <param name="lstValue">set数值</param>
            <returns>null:更新完毕,不为null:更新失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Update(System.Collections.Generic.List{`0})">
            <summary>
            批量更新
            </summary>
            <param name="lst">对象列表</param>
            <returns>null:更新完毕,不为null:更新失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Insert(`0)">
            <summary>
            插入一条数据
            </summary>
            <param name="entity">对象</param>
            <returns>null:插入完毕,不为null:插入失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Insert(`0,System.Boolean)">
            <summary>
            插入一条数据
            </summary>
            <param name="entity">对象</param>
            <param name="fillIdentity">是否填充自增长属性</param>
            <returns>null:插入完毕,不为null:插入失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Insert(`0,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            插入一条数据
            </summary>
            <param name="entity">对象</param>
            <param name="setList">set数值</param>
            <param name="fillIdentity">是否填充自增长属性</param>
            <returns>null:插入完毕,不为null:插入失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Delete(`0,System.Boolean)">
            <summary>
            删除
            </summary>
            <param name="entity">对象</param>
            <param name="isConcurrency">是否处理并发</param>
            <returns>null:删除完毕,不为null:删除失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Delete(`0)">
            <summary>
            删除
            </summary>
            <param name="entity">要删除的对象</param>
            <returns>null:删除完毕,不为null:删除失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.TruncateTable">
            <summary>
            清空表
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.DeleteById(System.Object)">
            <summary>
            根据ID删除记录
            </summary>
            <param name="id">要删除的记录ID</param>
            <returns>null:删除完毕,不为null:删除失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Delete(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            删除
            </summary>
            <param name="lstScope">批量删除的条件集合</param>
            <returns>null:删除完毕,不为null:删除失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBase`1.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除一组数据
            </summary>
            <param name="lst">数据集合</param>
            <returns>大于0:删除完毕,小于0:删除失败</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.OnSelect(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            执行查询之前触发的事件
            </summary>
            <param name="lstScope"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.DefaultOperate">
            <summary>
            获取默认连接
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.#ctor">
            <summary>
            业务层的查询集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.StartTransaction">
            <summary>
            开启事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.StartBatchAction">
            <summary>
            开始非事务的批量动作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.GetEntityById(System.Object)">
            <summary>
            根据主键查找实体
            </summary>
            <param name="id">主键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.GetByIdUseCache(System.Object)">
            <summary>
            根据主键查找实体(使用缓存)
            </summary>
            <param name="id">主键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.SelectTable(System.String,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            直接查询数据库视图
            </summary>
            <param name="tableName">表名称</param>
            <param name="lstScope">条件</param>
            <param name="vParams">字段列表</param>
            <param name="lstSort">排序类型</param>
            <param name="lstSort">排序</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.SelectTable(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLOtherTableHandle,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询特殊表或者视图
            </summary>
            <param name="table"></param>
            <param name="vParams"></param>
            <param name="lstScope"></param>
            <param name="objPage"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.GetUnique(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            根据条件查找实体
            </summary>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.Select(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查找
            </summary>
            <param name="lstScope">范围集合</param>
            <param name="lstSort">排序条件集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.SelectList(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查找(返回集合)
            </summary>
            <param name="lstScope">范围集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.SelectCount(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.BusinessModelBaseForSelect`1.ExistsRecord(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.BusinessBases.DBTransaction">
            <summary>
            数据库的自释放事务类
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.DBTransaction.#ctor(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            自释放事务类
            </summary>
            <param name="oper"></param>
        </member>
        <member name="P:Buffalo.DB.CommBase.BusinessBases.DBTransaction.Runnow">
            <summary>
            是否当前运行
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.BusinessBases.DBTransaction.IsCommit">
            <summary>
            是否已经提交
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.DBTransaction.Commit">
            <summary>
            提交事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.DBTransaction.Rollback">
            <summary>
            回滚事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.DBTransaction.Dispose">
            <summary>
            释放事务
            </summary>
        </member>
        <member name="T:Buffalo.DB.CommBase.BusinessBases.ModelContext`1">
            <summary>
            模型层辅助类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.#ctor">
            <summary>
            模型层辅助类
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.GetDAL">
            <summary>
            获取数据层(用作运行SQL)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.GetBaseContext">
            <summary>
            获取数据层基类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.GetContext">
            <summary>
            获取执行语法的上下文
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.StartTransaction">
            <summary>
            开启事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.Select(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查找
            </summary>
            <param name="lstScope">范围集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.SelectCount(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.SelectList(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询集合
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.StartBatchAction">
            <summary>
            开始非事务的批量动作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.GetThisValue">
            <summary>
            当前实体的转换值
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.UpdateByScope(`0,Buffalo.DB.QueryConditions.ValueSetList,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            范围更新(慎用)
            </summary>
            <param name="lstValue">设置值</param>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.UpdateByScope(`0,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            范围更新(慎用)
            </summary>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.ExistsRecord(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询是否有记录符合此条件
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.DeleteByScope(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            范围删除(慎用)
            </summary>
            <param name="lstScope"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.GetEntityById(System.Object)">
            <summary>
            根据主键查找实体
            </summary>
            <param name="id">主键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ModelContext`1.GetUnique(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            根据条件查找实体
            </summary>
            <param name="lstScope">条件</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.BusinessBases.ThinModelBase">
            <summary>
            小型架构基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.GetBaseDataAccess">
            <summary>
            获取基础数据层
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Insert">
            <summary>
            保存实体
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.OnSelect(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询时候触发
            </summary>
            <param name="lstScope"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.BeforeUpdateByScope(Buffalo.DB.CommBase.EntityBase,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            范围更新前触发
            </summary>
            <param name="entity">实体</param>
            <param name="scorpList">范围更新条件</param>
            <param name="lstValue">赋值</param>
            <param name="optimisticConcurrency">是否用并发锁</param>
            <returns>是否继续执行更新</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.AfterUpdateByScope(System.Int32,Buffalo.DB.CommBase.EntityBase,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            范围更新后触发
            </summary>
            <param name="affected">影响行数</param>
            <param name="entity">实体</param>
            <param name="scorpList">范围更新条件</param>
            <param name="lstValue">赋值</param>
            <param name="optimisticConcurrency">是否用并发锁</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.BeforeDeleteByScope(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            范围删除前触发
            </summary>
            <param name="scorpList">范围更新条件</param>
            <returns>是否继续执行更新</returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.AfterDeleteByScope(System.Int32,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            范围删除后触发
            </summary>
            <param name="affected">影响行数</param>
            <param name="scorpList">范围更新条件</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Insert(System.Boolean)">
            <summary>
            保存实体并填充ID
            </summary>
            <param name="fillPrimaryKey">是否填充实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Insert(Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            保存实体并填充ID
            </summary>
            <param name="fillPrimaryKey">是否填充实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Update(System.Boolean)">
            <summary>
            更新实体
            </summary>
             <param name="optimisticConcurrency">是否并发控制</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Update(Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            更新实体
            </summary>
            <param name="lstValue">强制设置值</param>
             <param name="optimisticConcurrency">是否并发控制</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Update">
            <summary>
            更新实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Delete(System.Boolean)">
            <summary>
            并发删除
            </summary>
            <param name="optimisticConcurrency">是否并发控制</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.BusinessBases.ThinModelBase.Delete">
            <summary>
            并发删除
            </summary>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasReaderMapping">
            <summary>
            别名Reader映射
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasReaderMapping.ReaderIndex">
            <summary>
            所属的Reader的列索引
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasReaderMapping.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasReaderMapping.NeedChangeType">
            <summary>
            需要转换类型
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasReaderMapping.#ctor(System.Int32,Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Boolean)">
            <summary>
            别名Reader映射
            </summary>
            <param name="readerIndex">Reader的列索引</param>
            <param name="propertyInfo">属性信息</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.#ctor(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle,Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager,Buffalo.DB.EntityInfos.EntityMappingInfo)">
            <summary>
            别名映射
            </summary>
            <param name="table"></param>
            <param name="aliasName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.InitReaderMapping(System.Data.IDataReader)">
            <summary>
            初始化跟Reader的映射信息
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.LoadFromReader(System.Data.IDataReader)">
            <summary>
            读取信息
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.EntityInfo">
            <summary>
            实体信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.ChildTables">
            <summary>
            所有字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.MappingInfo">
            <summary>
            映射信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.GetParamInfo(System.String)">
            <summary>
            获取字段别名信息
            </summary>
            <param name="propertyName">所属的属性名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.TableInfo">
            <summary>
            表信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.AddChildTable(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            添加子表
            </summary>
            <param name="table">子表</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.GetAliasParam(System.String)">
            <summary>
            获取别名字段
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping.InitParam(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            初始化字段
            </summary>
            <param name="table"></param>
            <param name="paramIndex"></param>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager">
            <summary>
            表别名管理
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.InitMapping(System.Data.IDataReader)">
            <summary>
            初始化映射
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.LoadFromReader(System.Data.IDataReader)">
            <summary>
            从Reader读取
            </summary>
            <param name="reader"></param>
            <param name="hasValue"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.AddChildTable(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            添加子表
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.GetPrimaryAliasHandle(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle)">
            <summary>
            获取主表的别名信息
            </summary>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.GetPrimaryAliasParamHandle(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            获取别名字段
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.LoadChildParams(Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping,System.Collections.Generic.List{Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle})">
            <summary>
            获取子类的字段信息
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.ToInnerTable(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem,Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation)">
            <summary>
            给表查询加上关联表
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.InnerTable(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordFromItem,Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.AliasTableMapping)">
            <summary>
            关联表
            </summary>
            <param name="from"></param>
            <param name="sourceTable"></param>
            <param name="targetTable"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.GetTableAliasName(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            输出别名表
            </summary>
            <param name="paramHandle"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.FindMapping(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            查找所属的表映射信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.NextTableAliasName">
            <summary>
            下一个表的别名
            </summary>
            <param name="tableIndex">表索引</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.AliasTableMappingManagers.TableAliasNameManager.NextParamAliasName(System.String)">
            <summary>
            下一个字段的别名
            </summary>
            <param name="tableIndex">表索引</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1">
            <summary>
            数据层基类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.CurEntityInfo">
            <summary>
            当前类型的信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.#ctor">
            <summary>
            数据层基类
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.EntityInfo">
            <summary>
            当前实体信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.AllParamNames">
            <summary>
            所有字段名
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.GetParamNameList(System.Collections.Generic.List{System.String})">
            <summary>
            获取属性名集合对应的字段名集合
            </summary>
            <param name="propertyNames">属性名集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.QueryList(System.String,Buffalo.DB.DbCommon.ParamList,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            执行sql语句，返回List
            </summary>
            <param name="sql">sql语句</param>
            <param name="list">参数列表</param>
            <param name="commandType">语句类型</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.QueryList(System.String,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            执行sql语句，分页返回List(游标分页)
            </summary>
            <param name="sql">sql语句</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.QueryList(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            执行sql语句，分页返回List(游标分页)
            </summary>
            <param name="sql">sql语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.GetSortCondition(Buffalo.DB.QueryConditions.SortList)">
            <summary>
            获取排序条件的SQL语句(不带OrderBy)
            </summary>
            <param name="lstSort">排序条件集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.GetSelectParams(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            获取本次查询需要显示的字段集合
            </summary>
            <param name="lstScope">范围查询集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.GetSelectPageContant(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            获取全部查询的条件
            </summary>
            <param name="list">参数列表</param>
            <param name="scopeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.GetSelectContant(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.ScopeList,System.String)">
            <summary>
            获取全部查询的条件
            </summary>
            <param name="list">参数列表</param>
            <param name="scopeList">范围查找的集合</param>
            <param name="param">输出字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.LoadFromReader(System.Data.IDataReader)">
            <summary>
            从Reader里边读取数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="reader">reader</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.LoadFromReaderList(System.Data.IDataReader)">
            <summary>
            从Reader里边读取数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="reader">reader</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.GetObjectById(System.Object,System.Boolean)">
            <summary>
            根据ID获取记录
            </summary>
            <param name="id">ID</param>
            <param name="isSearchByCache">是否缓存搜索</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.Update(`0,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            修改记录
            </summary>
            <param name="obj">修改的对象</param>
            <param name="scopeList">条件列表</param>
            <param name="optimisticConcurrency">是否进行并发控制</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.Insert(`0,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            插入一个记录
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.Select(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询表
            </summary>
            <param name="scopeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.SelectList(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            分页查询表(返回List)
            </summary>
            <param name="scopeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.SelectCount(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="scopeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBase`1.ExistsRecord(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询是否存在符合条件的记录
            </summary>
            <param name="scopeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1">
            <summary>
            只有Select语句的数据访问层模版
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1.#ctor(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            只有Select语句的数据访问层模版
            </summary>
            <param name="oper"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1.#ctor">
            <summary>
            只有Select语句的数据访问层模版
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1.GetEntityById(System.Object)">
            <summary>
            根据主键查找实体
            </summary>
            <param name="id">主键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1.Select(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查找
            </summary>
            <param name="lstScope">范围集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1.SelectList(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询集合
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1.SelectCount(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessBaseForSelect`1.ExistsRecord(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.GetConnectString(Buffalo.DB.QueryConditions.Scope)">
            <summary>
            获取条件连接字符串
            </summary>
            <param name="objScope"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FormatParam(System.String,System.Int32)">
            <summary>
            格式化变量名称
            </summary>
            <param name="pam">变量</param>
            <param name="index">当前的标识</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FillCondition(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            填充查询条件并返回条件的SQL语句( and 开头)
            </summary>
            <param name="lstParam">参数列表</param>
            <param name="lstScope">范围查询集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FillCondition(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.ScopeList,System.Int32@)">
            <summary>
            填充查询条件并返回条件的SQL语句( and 开头)
            </summary>
            <param name="lstParam">参数列表</param>
            <param name="lstScope">范围查询集合</param>
            <param name="CurEntityInfo">当前实体信息</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.TrimHead(System.Text.StringBuilder)">
            <summary>
            删除起始的条件符
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.GetStartIndex(System.Text.StringBuilder)">
            <summary>
            获取真正开始的索引
            </summary>
            <param name="sb"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.TrimAnd(System.Text.StringBuilder)">
            <summary>
            删除起始的条件符
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FormatScorp(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.String,System.Data.DbType,System.Int32,System.Type)">
            <summary>
            返回当前条件的字符串
            </summary>
            <param name="scope">条件类</param>
            <param name="list">参数列表</param>
            <param name="paramName">所属的字段名</param>
            <param name="type">当前的数据库类型</param>
            <param name="lstIndex">当前索引的标识未辨别同名字段的参数，可设置为0</param>
            <param name="entityType">当前实体的类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FormatValue(System.Object,System.Data.DbType,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            把查询条件加到条件的字符串里
            </summary>
            <param name="value">值</param>
            <param name="type">数据库里边的类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FillEntityChidList(System.Collections.IList,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            填充子属性列表
            </summary>
            <param name="lst"></param>
            <param name="childName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FillEntityChidList(System.Collections.IList,Buffalo.DB.QueryConditions.ShowChildItem)">
            <summary>
            填充子集合
            </summary>
            <param name="showTable"></param>
            <param name="??"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FillEntityChidList(System.Collections.IEnumerable,System.String,System.Collections.Generic.Queue{System.Object},System.Type,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            填充子属性列表
            </summary>
            <param name="lst">集合</param>
            <param name="childPropertyName">子属性名</param>
            <param name="objs">实体</param>
            <param name="objType">类型</param>
            <param name="filter">筛选条件</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.GetEntityDictionary(System.Collections.IEnumerable,Buffalo.DB.EntityInfos.EntityMappingInfo)">
            <summary>
            把集合转成字典形式
            </summary>
            <param name="lst">集合</param>
            <param name="mappingInfo">映射</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.CollectFks(System.Collections.IEnumerable,Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            收集外键值
            </summary>
            <param name="lst"></param>
            <param name="pk"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FillChilds(System.Collections.Generic.Queue{System.Object},Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityMappingInfo,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},System.String,System.Collections.Generic.Queue{System.Object},Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            填充字类列表
            </summary>
            <param name="pks">ID集合</param>
            <param name="childHandle">子元素的信息句柄</param>
            <param name="mappingInfo">映射信息</param>
            <param name="dicElement">元素</param>
            <param name="propertyName">属性名</param>
            <param name="curObjs"></param>
            <param name="filter"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.GetCurPks(System.Collections.Generic.Queue{System.Object})">
            <summary>
            获取当前需要查询的主键集合
            </summary>
            <param name="pks"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.FillChildReader(System.Collections.Generic.Queue{System.Object},Buffalo.DB.EntityInfos.EntityMappingInfo,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}},Buffalo.DB.BQLCommon.BQLDbBase,System.Collections.Generic.List{Buffalo.DB.EntityInfos.EntityPropertyInfo}@,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.Queue{System.Object},Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询并填充子类信息
            </summary>
            <param name="pks"></param>
            <param name="mappingInfo"></param>
            <param name="dicEntity"></param>
            <param name="dao"></param>
            <param name="lstParamNames"></param>
            <param name="db"></param>
            <param name="curObjs"></param>
            <param name="filter"></param>
        </member>
        <member name="F:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.PreSearch">
            <summary>
            每次查询的条数
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessCommon.GetSearchPKs(System.Collections.Generic.Queue{System.Object})">
            <summary>
            获取需要查询的主键
            </summary>
            <param name="pks"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.DataAccessModel`1">
            <summary>
            数据访问层模版
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessModel`1.Update(`0)">
            <summary>
            修改记录
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessModel`1.Update(`0,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            修改记录
            </summary>
            <param name="entity">实体</param>
             <param name="scopeList">范围更新的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessModel`1.Update(`0,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            修改记录
            </summary>
            <param name="entity">实体</param>
            <param name="scopeList">范围更新的集合</param>
            <param name="valueList">值集合</param>
            <param name="optimisticConcurrency">是否并发</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessModel`1.Insert(`0,System.Boolean)">
            <summary>
            插入记录
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessModel`1.Delete(`0)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="scopeList">范围删除的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessModel`1.Delete(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            范围删除记录(慎用)
            </summary>
            <param name="entity">实体</param>
            <param name="scopeList">范围删除的集合</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.EntityInfo">
            <summary>
            当前实体信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.ContextDAL">
            <summary>
            BQL上下文
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.TruncateTable(System.String)">
            <summary>
            清空表
            </summary>
            <param name="tableName">要清空的表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.TruncateTable">
            <summary>
            清空表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.Update(Buffalo.DB.CommBase.EntityBase,Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            修改记录
            </summary>
            <param name="obj">修改的对象</param>
            <param name="scopeList">条件列表</param>
            <param name="setList">Set值列表</param>
            <param name="optimisticConcurrency">是否进行并发控制</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.FillWhereConcurrency(System.Text.StringBuilder,Buffalo.DB.EntityInfos.EntityPropertyInfo,Buffalo.DB.DbCommon.ParamList,System.Object,System.Int32@)">
            <summary>
            填充版本控制的信息
            </summary>
            <param name="where"></param>
            <param name="where"></param>
            <param name="info"></param>
            <param name="list"></param>
            <param name="curValue"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.NewConcurrencyValue(System.Object)">
            <summary>
            新的版本值
            </summary>
            <param name="val">当前值</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.Oper">
            <summary>
            数据库链接对象
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.DoInsert(Buffalo.DB.CommBase.EntityBase,Buffalo.DB.QueryConditions.ValueSetList,System.Boolean)">
            <summary>
            进行插入操作
            </summary>
            <param name="obj">要插入的对象</param>
            <param name="fillIdentity">是否要填充刚插入的实体的ID</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.Delete(Buffalo.DB.CommBase.EntityBase,Buffalo.DB.QueryConditions.ScopeList,System.Boolean)">
            <summary>
            删除指定数据
            </summary>
            <param name="obj">要删除的实体</param>
            <param name="scopeList">要删除的条件</param>
            <param name="isConcurrency">是否版本并发删除</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.DeleteById(System.Object)">
            <summary>
            根据ID删除记录
            </summary>
            <param name="id">要删除的记录ID</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.ExecuteCommand(System.String,Buffalo.DB.DbCommon.ParamList,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            执行Sql命令
            </summary>
            <param name="sql">sql语句</param>
            <param name="list">参数列表</param>
            <param name="commandType">命令类型</param>
            <param name="tables">缓存关联的表</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.QueryDataSet(System.String,Buffalo.DB.DbCommon.ParamList,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            执行sql语句，返回DataSet
            </summary>
            <param name="sql">sql语句</param>
            <param name="list">参数列表</param>
            <param name="commandType">语句类型</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.QueryDataSet(System.String,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            执行sql语句，分页返回DataSet(游标分页)
            </summary>
            <param name="sql">sql语句</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.QueryMappingDataSet(System.String,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            执行sql语句，分页返回列名用类属性映射的DataSet(游标分页)
            </summary>
            <param name="sql">sql语句</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.QueryDataSet(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            执行sql语句，分页返回DataSet(游标分页)
            </summary>
            <param name="sql">sql语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.DataAccessSetBase.QueryMappingDataSet(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            执行sql语句，分页返回列名用类属性映射的DataSet(游标分页)
            </summary>
            <param name="sql">sql语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.ExplainScope">
            <summary>
            解释条件
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.InitExplainer">
            <summary>
            初始化条件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.GetExplainer(Buffalo.DB.QueryConditions.Scope)">
            <summary>
            根据条件获取处理函数
            </summary>
            <param name="objScope"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.Between(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释Between条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.IN(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释IN条件(如果集合为空，则返回1=2)
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.NotIN(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释NotIN条件(如果集合为空，则返回1=1)
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.Less(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释Less条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.LessThen(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释LessThen条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.More(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释More条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.MoreThen(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释MoreThen条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.NotEqual(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释NotEqual条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.Equal(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释Equal条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.Like(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释Like条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.Contains(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释Contains条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.StarWith(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释StarWith条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.EndWith(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释EndWith条件
            </summary>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.Condition(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.Type,System.String,System.Data.DbType,System.Int32)">
            <summary>
            解释Condition条件
            </summary>
            <param name="scope">条件</param>
            <param name="list"></param>
            <param name="entityType"></param>
            <param name="paramName"></param>
            <param name="type"></param>
            <param name="lstIndex"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.ExplainScope.GetInString(System.Object,System.Data.DbType,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            根据数据类型自动拼合in字符串
            </summary>
            <param name="collection">值集合</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.IDalAttribute">
            <summary>
            数据层接口的标签
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.IDalAttribute.InterfaceType">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IDataAccessModel`1.Delete(`0)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="scopeList">范围删除的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IDataAccessModel`1.Delete(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            删除记录
            </summary>
            <param name="entity">实体</param>
            <param name="scopeList">范围删除的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IDataAccessModel`1.DeleteById(System.Object)">
            <summary>
            根据ID删除记录
            </summary>
            <param name="id">ID</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IDataAccessModel`1.Insert(`0,System.Boolean)">
            <summary>
            插入记录
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IDataAccessModel`1.Update(`0,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            修改记录
            </summary>
            <param name="entity">实体</param>
             <param name="scopeList">范围更新的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IDataAccessModel`1.Update(`0)">
            <summary>
            修改记录
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.IViewDataAccess`1">
            <summary>
            数据层接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IViewDataAccess`1.GetEntityById(System.Object)">
            <summary>
            根据主键查找实体
            </summary>
            <param name="id">主键</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IViewDataAccess`1.Select(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查找
            </summary>
            <param name="lstScope">范围集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IViewDataAccess`1.SelectList(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询集合
            </summary>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IViewDataAccess`1.SelectCount(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="sortList">排序条件</param>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.IViewDataAccess`1.ExistsRecord(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            查询符合指定条件的记录条数
            </summary>
            <param name="sortList">排序条件</param>
            <param name="scpoeList">范围查找的集合</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.DataAccessBases.VersionInfo">
            <summary>
            并发更新信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.DataAccessBases.VersionInfo.#ctor(Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Object,System.Object)">
            <summary>
            版本信息
            </summary>
            <param name="info">属性信息</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.VersionInfo.Info">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.VersionInfo.NewValue">
            <summary>
            新值
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.DataAccessBases.VersionInfo.OldValue">
            <summary>
            旧值
            </summary>
        </member>
        <member name="T:Buffalo.DB.CommBase.EntityBase">
            <summary>
            实体基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.GetEntityBaseInfo">
            <summary>
            获取实体信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.OnPropertyUpdated(System.String)">
            <summary>
            通知属性已经被修改
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.OnMapPropertyUpdated(System.String)">
            <summary>
            通知映射属性已经被修改
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="P:Buffalo.DB.CommBase.EntityBase.Item(System.String)">
            <summary>
            根据属性名获取或设置属性的值
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.FillChild(System.String)">
            <summary>
            填充子类
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.FillParent(System.String)">
            <summary>
            填充父类
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.OnFillChild(System.String,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            当填充子类时候
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.OnFillParent(System.String,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            当填充子类时候
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBase.LoadFromReader(System.Data.IDataReader)">
            <summary>
            从DataReader加载
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:Buffalo.DB.CommBase.EntityBaseInfo">
            <summary>
            属性实体信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.EntityBaseInfo.HasPKValue">
            <summary>
            主键是否被赋值
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBaseInfo.IsAllowType(System.Type)">
            <summary>
            是否可以拷贝属性的数值类型
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBaseInfo.GetChangedPropertyName">
            <summary>
            修改过的属性名
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBaseInfo.#ctor(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            实体信息
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBaseInfo.HasPropertyChange(System.String)">
            <summary>
            获取属性是否已经被修改
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBaseInfo.HasProperty(System.String)">
            <summary>
            判断是否有此属性
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.CommBase.EntityBaseInfo.EntityInfo">
            <summary>
            获取当前实体的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBaseInfo.SubmitUpdateProperty(System.Collections.IEnumerable)">
            <summary>
            提交属性更新通知
            </summary>
            <param name="propertys">属性集合(null则所有属性都通知更新)</param>
        </member>
        <member name="M:Buffalo.DB.CommBase.EntityBaseInfo.CancelUpdateProperty(System.Collections.IEnumerable)">
            <summary>
            撤销哪些属性的更新通知
            </summary>
            <param name="propertys">属性集合(null则所有属性的更新通知都被撤销)</param>
        </member>
        <member name="T:Buffalo.DB.CommBase.StaticConnection">
            <summary>
            静态连接管理类
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.StaticConnection.GetOperate(System.String)">
            <summary>
            获取数据连接
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.StaticConnection.SetOperate(Buffalo.DB.DbCommon.DataBaseOperate,System.String)">
            <summary>
            设置数据连接
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.StaticConnection.ClearCacheOperate(System.String)">
            <summary>
            清空连接缓存
            </summary>
            <param name="DbName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.StaticConnection.ClearCacheOperate(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            清空连接缓存
            </summary>
            <param name="DbName"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.StaticConnection.GetStaticOperate(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取数据库的静态连接
            </summary>
            <param name="db">数据库信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.CommBase.StaticConnection.GetDefaultOperate``1">
            <summary>
            获取此实体的默认连接
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.CommBase.UpdatePropertyInfo">
            <summary>
            属性的关联更新信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.UpdatePropertyInfo.#ctor(Buffalo.DB.EntityInfos.EntityMappingInfo,System.Boolean)">
            <summary>
            属性的关联更新信息
            </summary>
            <param name="mapInfo"></param>
            <param name="isEntityProperty"></param>
        </member>
        <member name="P:Buffalo.DB.CommBase.UpdatePropertyInfo.IsEntityProperty">
            <summary>
            是否父实体属性
            </summary>
        </member>
        <member name="P:Buffalo.DB.CommBase.UpdatePropertyInfo.MapInfo">
            <summary>
            关联的映射
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.UpdatePropertyInfo.UpdateProperty(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            更新实体属性
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Buffalo.DB.CommBase.UpdatePropertyInfo.ClearParentProperty(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            清空父属性
            </summary>
        </member>
        <member name="M:Buffalo.DB.CommBase.UpdatePropertyInfo.UpdateChildProperty(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            更新子属性
            </summary>
            <param name="mapInfo"></param>
        </member>
        <member name="T:Buffalo.DB.ConfigXmlLoader">
            <summary>
            配置加载器
            </summary>
        </member>
        <member name="M:Buffalo.DB.ConfigXmlLoader.LoadXmlContent(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取配置XML
            </summary>
            <param name="configContent">配置路径的文件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ConfigXmlLoader.LoadXml(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取配置XML
            </summary>
            <param name="configPaths">配置路径集合</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.ContantSearchs.PropertyParamMapping">
            <summary>
            属性跟字段的映射
            </summary>
        </member>
        <member name="P:Buffalo.DB.ContantSearchs.PropertyParamMapping.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.ContantSearchs.PropertyParamMapping.ParamName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:Buffalo.DB.ContantSearchs.PropertyParamMapping.DataType">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.ContantSearchs.SearchConditionObject.PropertyNames">
            <summary>
            获取属性名的集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.ContantSearchs.SearchConditionObject.KeyNames">
            <summary>
            获取关键字的集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.ContantSearchs.SearchConditionObject.TrimNames(System.Collections.Generic.List{System.String})">
            <summary>
            缩减关键字名集合（把空键值的项去掉）
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.AccessAdapter.AdapterLoader">
            <summary>
            适配器加载器
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.AccessAdapter.AdapterLoader.DbAdapter">
            <summary>
            当前数据库适配器
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.AccessAdapter.AggregateFunctions">
            <summary>
            聚合函数处理
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.AggregateFunctions.DoSum(System.String)">
            <summary>
            处理sum函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.AggregateFunctions.DoCount(System.String)">
            <summary>
            处理Count函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.AggregateFunctions.DoMax(System.String)">
            <summary>
            处理Max函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.AggregateFunctions.DoMin(System.String)">
            <summary>
            处理Min函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.AggregateFunctions.DoStdDev(System.String)">
            <summary>
            处理StdDev函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.AggregateFunctions.DoAvg(System.String)">
            <summary>
            处理Avg函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.AccessAdapter.ConvertFunction">
            <summary>
            数值转换函数
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.ConvertFunction.GetConvertMethod(System.Data.DbType)">
            <summary>
            获取转换函数
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.ConvertFunction.DateTimeToString(System.String,System.String)">
            <summary>
            日期转字符串
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.ConvertFunction.StringToDateTime(System.String,System.String)">
            <summary>
            字符串转成日期
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.ConvertFunction.ConvetTo(System.String,System.Data.DbType)">
            <summary>
            把数据转成指定类型
            </summary>
            <param name="value">数据</param>
            <param name="dbType">指定类型</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.AccessAdapter.CutPageSqlCreater">
            <summary>
            生成分页语句的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.CutPageSqlCreater.GetGroupPart(Buffalo.DB.QueryConditions.SelectCondition,System.Text.StringBuilder)">
            <summary>
            获取分组分页的片段
            </summary>
            <param name="objCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.CutPageSqlCreater.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            生成SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.CutPageSqlCreater.GetFristPageSql(Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            获取第一页的SQL
            </summary>
            <param name="sql"></param>
            <param name="objCondition"></param>
            <param name="objPage"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.CutPageSqlCreater.FilterGroupOrderBy(System.String,System.String)">
            <summary>
            处理groupBy
            </summary>
            <param name="group">groupBy</param>
            <param name="newAlias">新别名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.CutPageSqlCreater.CreateCutPageSql(Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="part">SQL条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.CutPageSqlCreater.GetTotalRecord(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取总记录数
            </summary>
            <param name="part">查询条件</param>
            <param name="list">变量列表</param>
            <param name="oper">通用类</param>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.IsShowExpression">
            <summary>
            全文搜索时候排序字段是否显示表达式
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetTruncateTable(System.String)">
            <summary>
            清空表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetColumnDescriptionSQL(Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取在字段添加SQL
            </summary>
            <param name="table">表</param>
            <param name="pInfo">字段（如果为空则设置表注释）</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.DBIdentity(System.String,System.String)">
            <summary>
            获取数据库的自增长字段的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.RebuildParamList(System.String@,Buffalo.DB.DbCommon.ParamList)">
            <summary>
            重建参数集合
            </summary>
            <param name="lstPrm"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.InitPrm">
            <summary>
            变量名称可用字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.FindAllParams(System.String)">
            <summary>
            收集所有变量
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.DBTypeToSQL(System.Data.DbType,System.Int64,System.Boolean)">
            <summary>
            把DBType类型转成对应的SQLType
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.ToRealDbType(System.Data.DbType,System.Int64)">
            <summary>
            把DBType转成本数据库的实际类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.IsSaveIdentityParam">
            <summary>
            是否记录自增长字段作手动处理
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetDataParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            获取参数类
            </summary>
            <param name="paramName">参数名</param>
            <param name="type">参数数据库类型</param>
            <param name="paramValue">参数值</param>
            <param name="paramDir">参数进出类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetTopSelectSql(Buffalo.DB.QueryConditions.SelectCondition,System.Int32)">
            <summary>
            获取top的查询字符串
            </summary>
            <param name="sql">查询字符串</param>
            <param name="top">top值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetSequenceName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取序列名
            </summary>
            <param name="tableName">表名</param>
            <param name="entityInfo">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetDefaultSequenceName(System.String,System.String)">
            <summary>
             获取默认序列名
            </summary>
            <param name="tableName">表名</param>
            <param name="paramName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetSequenceInit(System.String,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            初始化序列名
            </summary>
            <param name="seqName"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.ToCurrentDbType(System.Data.DbType)">
            <summary>
            把数据类型转换成当前数据库支持的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetCommand">
            <summary>
            获取SQL命令类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetConnection(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取SQL连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetAdapter">
            <summary>
            获取SQL适配器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.FormatParam(System.String)">
            <summary>
            格式化字段名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.FormatTableName(System.String)">
            <summary>
            格式化表格名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.FormatValueName(System.String)">
            <summary>
            格式化变量名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.FormatParamKeyName(System.String)">
            <summary>
            格式化变量的键名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.FreeTextLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.ContainsLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetNowDate(System.Data.DbType)">
            <summary>
            获取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetUTCDate(System.Data.DbType)">
            <summary>
            获取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetTimeStamp(System.Data.DbType)">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.Query(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.QueryDataTable(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.Query(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="lstParam">参数集合</param>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.QueryDataTable(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.ConcatString(System.String[])">
            <summary>
            获取字符串拼接SQl语句
            </summary>
            <param name="str">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetIdentitySQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetIdentityValueSQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长值的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetDateTimeString(System.Object)">
            <summary>
            把变量转变成SQL语句中的时间表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetIdentityParamName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候的主键字段名
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetIdentityParamValue(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候的主键字段值
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.ValueFromReader(System.Data.IDataReader,System.Int32,System.Object,Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Boolean)">
            <summary>
            根据Reader的内容把数值赋进实体
            </summary>
            <param name="reader">Reader</param>
            <param name="index">当前Reader的索引</param>
            <param name="arg">目标对象</param>
            <param name="info">目标属性的句柄</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.GetAddDescriptionSQL(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取创建注释的SQL
            </summary>
            <param name="table">表</param>
            <param name="paramName">字段(如果为空则给表设置注释)</param>
            <param name="description">注释</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.SetObjectValueFromReader(System.Data.IDataReader,System.Int32,System.Object,Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Boolean)">
            <summary>
            根据Reader的内容把数值赋进实体
            </summary>
            <param name="reader">Reader</param>
            <param name="index">当前Reader的索引</param>
            <param name="arg">目标对象</param>
            <param name="info">目标属性的句柄</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.CreateTableSQLEnd(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            创建表语句的结束
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBAdapter.DoLike(System.String,System.String,Buffalo.DB.DataBaseAdapter.BQLLikeType,Buffalo.DB.DataBaseAdapter.BQLCaseType,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            like不区分大小写
            </summary>
            <param name="source"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure">
            <summary>
            数据库结构特性类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.GetAllTableName(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取所有用户表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.GetAddParamSQL">
            <summary>
            添加字段的语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.AllInTableNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取要In的表名
            </summary>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.GetRelation(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取所有关系
            </summary>
            <param name="chileName">null则查询所有表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.GetTableParamsSQL">
            <summary>
            初始化获取表名语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.GetTablesInfo(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取表信息
            </summary>
            <param name="oper"></param>
            <param name="info"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.FillRelation(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.DataBaseAdapter.DBTableInfo},System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.TableRelationAttribute})">
            <summary>
            填充关系信息
            </summary>
            <param name="dicTables"></param>
            <param name="lstRelation"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.IsIdentity(System.Data.DataTable,System.String)">
            <summary>
            判断是否自增长
            </summary>
            <param name="table"></param>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.FillParam(Buffalo.DB.DataBaseAdapter.DBTableInfo,System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Data.DataTable)">
            <summary>
            填充字段信息
            </summary>
            <param name="prm">字段信息</param>
            <param name="reader">reader</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.GetDbType(System.Int32)">
            <summary>
            获取DbType
            </summary>
            <param name="nativeType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.DBStructure.OnCheckEvent(System.Object,Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent,System.Collections.Generic.List{System.String})">
            <summary>
            数据库检查时候的事建
            </summary>
            <param name="arg">当前类型</param>
            <param name="dbInfo">数据库类型</param>
            <param name="type">检查类型</param>
            <param name="lstSQL">SQL语句</param>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.AccessAdapter.FormatCode.Code">
            <summary>
            格式代码
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.AccessAdapter.FormatCode.VarcharLength">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoAbs(System.String[])">
            <summary>
            处理abs函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoCeil(System.String[])">
            <summary>
            处理Ceil函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoFloor(System.String[])">
            <summary>
            处理floor函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoRound(System.String[])">
            <summary>
            处理round函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoExp(System.String[])">
            <summary>
            处理exp函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoLn(System.String[])">
            <summary>
            处理ln函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoLog10(System.String[])">
            <summary>
            处理log函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoSqrt(System.String[])">
            <summary>
            处理SQRT函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoPower(System.String[])">
            <summary>
            处理power函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoRandom(System.String[])">
            <summary>
            处理随机函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoSign(System.String[])">
            <summary>
            处理Sign函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoSin(System.String[])">
            <summary>
            处理Sin函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoCos(System.String[])">
            <summary>
            处理Cos函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoTan(System.String[])">
            <summary>
            处理Tan函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoAsin(System.String[])">
            <summary>
            处理Asin函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoAcos(System.String[])">
            <summary>
            处理Acos函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoAtan(System.String[])">
            <summary>
            处理Atan函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.DoAtan2(System.String[])">
            <summary>
            处理Atan2函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.IndexOf(System.String[])">
            <summary>
            处理查找字符串函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.AccessAdapter.MathFunctions.SubString(System.String[])">
            <summary>
            处理截取字符串函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.AccessAdapter.RebuildParamInfo">
            <summary>
            重建的变量信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.AccessAdapter.RebuildParamInfo.ParamName">
            <summary>
            变量名
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.AccessAdapter.RebuildParamInfo.Index">
            <summary>
            索引
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.ConfigInfo">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.ConfigInfo.#ctor(System.String,System.Xml.XmlDocument)">
            <summary>
            配置信息
            </summary>
            <param name="filePath">文件路径</param>
            <param name="document">文档</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.ConfigInfo.AddDalNamespaces(System.String)">
            <summary>
            设置数据层的命名空间
            </summary>
            <param name="aNamespaces"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.ConfigInfo.IsInNamespace(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            是否在数据层的命名空间
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.ConfigInfo.IsDalNamespace(System.String)">
            <summary>
            是否在实体的命名空间
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.ConfigInfo.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.ConfigInfo.Document">
            <summary>
            文档
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.BQLLikeType">
            <summary>
            Like类型
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.BQLLikeType.StartWith">
            <summary>
            开头是这个值，相当于like 'XX%'
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.BQLLikeType.EndWith">
            <summary>
            开头是这个值，相当于like '%XX'
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.BQLLikeType.Like">
            <summary>
            整个匹配，相当于like '%XX%'
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.BQLLikeType.Equal">
            <summary>
            等于这个值，相当于like 'XX'
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.BQLCaseType">
            <summary>
            大小写敏感开关
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.BQLCaseType.CaseByDB">
            <summary>
            数据库控制
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.BQLCaseType.CaseMatch">
            <summary>
            大小写敏感
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.BQLCaseType.CaseIgnore">
            <summary>
            大小写忽略
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.DataAccessLoader">
            <summary>
            数据访问层的加载读取类
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.DataAccessLoader._configdocs">
            <summary>
            配置内容
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DataAccessLoader.HasInit">
            <summary>
            是否已经初始化
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetDBInfo(System.String)">
            <summary>
            获取数据库信息
            </summary>
            <param name="dbName">数据库名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetFristDBInfo">
            <summary>
            获取随机一个数据库信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.AppendDBInfo(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            添加数据库信息
            </summary>
            <param name="dbinfo"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.AddDBConfig(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加数据库配置文件
            </summary>
            <param name="configPath">文件路径集合</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.AddDBConfigContent(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加数据库配置内容
            </summary>
            <param name="configContent">配置内容</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.InitConfig(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初始化配置
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetDBInfo(System.Xml.XmlDocument)">
            <summary>
            获取当前配置文件的数据库信息
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.LoadModel">
            <summary>
            加载模块信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.AppendDalLoader(System.Reflection.Assembly,System.Xml.XmlDocument)">
            <summary>
            添加到数据层
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.AppendBoLoader(System.Reflection.Assembly,System.Xml.XmlDocument)">
            <summary>
            添加到业务层
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.AppendModelAssembly(System.Reflection.Assembly)">
            <summary>
            添加要处理的程序集
            </summary>
            <param name="ass">程序集</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetAllAssembly">
            <summary>
            获取本模块下所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstanceByEntity(System.Type,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstanceByEntity``1(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetViewInstanceByEntity``1(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstance(System.Type,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="interfaceType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstance``1(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="DataBaseOperate">链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstanceByEntity(System.Type)">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstanceByEntity``1">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetViewInstanceByEntity``1">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstance(System.Type)">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="interfaceType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetBoType(System.String)">
            <summary>
            获取业务层的类型
            </summary>
            <param name="classTypeName">实体类型名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetBoInstance(System.String)">
            <summary>
             获取业务层的实例
            </summary>
            <param name="classTypeName">实体类型名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DataAccessLoader.GetInstance``1">
            <summary>
            根据实体类型获取对应的数据访问层的实例
            </summary>
            <param name="DataBaseOperate">链接</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.OperatorPrecedence">
            <summary>
            生成的SQL语句进行运算符优先级优化可读性
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.QueryCache">
            <summary>
            查询缓存
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.AllowLazy">
            <summary>
            允许延迟加载
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.SetQueryCache(Buffalo.DB.CacheManager.ICacheAdaper,System.Boolean)">
            <summary>
            设置查询缓存
            </summary>
            <param name="ica"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.GetAdapterLoader(System.String)">
            <summary>
            获取外部加载器
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.GetLoader(System.String)">
            <summary>
            获取加载器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.#ctor(System.String,System.String,System.String,System.String,Buffalo.DB.DataBaseAdapter.LazyType)">
            <summary>
            数据库信息
            </summary>
            <param name="dbName">名称</param>
            <param name="connectionString">连接字符串</param>
            <param name="readonlyConnectionString">只读连接字符串</param>
            <param name="dbType">数据库类型</param>
            <param name="allowLazy">是否延迟加载</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.CheckDataBase">
            <summary>
            检查数据库结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.GetUpdateDBText">
            <summary>
            获取更新数据的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.UpdateDataBase">
            <summary>
            检查并更新数据库结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.ThrowNotFondTable(System.Type)">
            <summary>
            抛出找不到表的异常
            </summary>
            <param name="eType"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.InitAdapters">
            <summary>
            初始化数据库适配器
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.DefaultOperate">
            <summary>
            默认连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.CreateOperate">
            <summary>
            创新数据库连接
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.SqlOutputer">
            <summary>
            输出SQL语句的类
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.Name">
            <summary>
            获取当前数据库的名字
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.DataaccessNamespace">
            <summary>
            数据层名称
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.CurrentDbAdapter">
            <summary>
            获取当前数据库的适配器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.Aggregate">
            <summary>
            获取聚合函数的处理
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.Math">
            <summary>
            获取数学函数的处理
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.Convert">
            <summary>
            获取转换函数的处理
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.Common">
            <summary>
            获取常用函数的处理的处理
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.DBStructure">
            <summary>
            数据库结构特性
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.DbType">
            <summary>
            当前数据库的类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.ConnectionString">
            <summary>
            数据库的连接字符串
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.ReadOnlyConnectionString">
            <summary>
            只读数据库的连接字符串
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.HasReadOnlyConnection">
            <summary>
            只读数据库的连接是否存在
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.AddToDB(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            添加到库信息
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.GetAllTables">
            <summary>
            获取所有表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.FindTable(System.Type)">
            <summary>
            通过实体类型查找对应的BQL表信息
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.DBInfo.FindTable(System.String)">
            <summary>
            通过实体类型查找对应的BQL表信息
            </summary>
            <param name="entityType"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBInfo.ExceptionOption">
            <summary>
            异常信息配置
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.LazyType">
            <summary>
            延迟加载类型
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.DBTableInfo">
            <summary>
            数据库的表信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.PrimaryParam">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.Name">
            <summary>
            对象名
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.IsView">
            <summary>
            是否视图
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.Description">
            <summary>
            表注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.RelationItems">
            <summary>
            关系集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.Params">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.IsGenerate">
            <summary>
            是否生成
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.DBTableInfo.ObjectTypeName">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent">
            <summary>
            数据库检查事件
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent.TableBeginCreate">
            <summary>
            表创建
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent.TableCreated">
            <summary>
            表创建后
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent.TablenBeginCheck">
            <summary>
            表检查
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent.TableChecked">
            <summary>
            表检查后
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent.RelationBeginCheck">
            <summary>
            关系检查
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent.RelationChecked">
            <summary>
            关系检查后
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent.PrimaryChecke">
            <summary>
            主键检查
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.IsShowExpression">
            <summary>
            全文搜索时候排序字段是否显示表达式
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.DBIdentity(System.String,System.String)">
            <summary>
            获取数据库的自增长字段的信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.IdentityIsType">
            <summary>
            自增长是否一个数据类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.DBTypeToSQL(System.Data.DbType,System.Int64,System.Boolean)">
            <summary>
            把DBType类型转成对应的SQLType
            </summary>
            <param name="dbType">数据库类型</param>
            <param name="length">长度</param>
            <param name="canNull">是否空</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.ToRealDbType(System.Data.DbType,System.Int64)">
            <summary>
            把DBType转成本数据库的实际类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.IsSaveIdentityParam">
            <summary>
            是否记录自增长字段作手动处理
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.RebuildParamList(System.String@,Buffalo.DB.DbCommon.ParamList)">
            <summary>
            重建参数集合(Access需要)
            </summary>
            <param name="lstPrm"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetTruncateTable(System.String)">
            <summary>
            获取清空表的SQL
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetNowDate(System.Data.DbType)">
            <summary>
            获取数据库当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetUTCDate(System.Data.DbType)">
            <summary>
            获取数据库当前格林威治时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetTimeStamp(System.Data.DbType)">
            <summary>
            获取时间戳
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.FreeTextLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.ContainsLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetAdapter">
            <summary>
            获取SQL适配器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetCommand">
            <summary>
            获取SQL命令类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetConnection(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取SQL连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.ToCurrentDbType(System.Data.DbType)">
            <summary>
            把数据类型转换成当前数据库支持的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetTopSelectSql(Buffalo.DB.QueryConditions.SelectCondition,System.Int32)">
            <summary>
            获取top的查询字符串
            </summary>
            <param name="sql">查询字符串</param>
            <param name="top">top值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetDataParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            获取参数类
            </summary>
            <param name="paramName">参数名</param>
            <param name="type">参数数据库类型</param>
            <param name="paramValue">参数值</param>
            <param name="paramDir">参数进出类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetIdentitySQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长的SQL
            </summary>
            <param name="info">实体信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetIdentityValueSQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长值的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.FormatParam(System.String)">
            <summary>
            格式化字段名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.FormatTableName(System.String)">
            <summary>
            格式化表格名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.FormatValueName(System.String)">
            <summary>
            格式化变量名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.FormatParamKeyName(System.String)">
            <summary>
            格式化变量的键名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.ConcatString(System.String[])">
            <summary>
            获取字符串拼接SQl语句
            </summary>
            <param name="str">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.QueryDataTable(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <param name="cacheTables">需要缓存的表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.Query(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.Query(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="lstParam">参数集合</param>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.QueryDataTable(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetDateTimeString(System.Object)">
            <summary>
            把变量转变成SQL语句中的时间表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetIdentityParamName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候的主键字段名
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetIdentityParamValue(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候的主键字段值
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.SetObjectValueFromReader(System.Data.IDataReader,System.Int32,System.Object,Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Boolean)">
            <summary>
            根据Reader的内容把数值赋进实体
            </summary>
            <param name="reader">Reader</param>
            <param name="index">当前Reader的索引</param>
            <param name="arg">目标对象</param>
            <param name="info">目标属性的句柄</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetSequenceName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取序列名
            </summary>
            <param name="info">属性</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetDefaultSequenceName(System.String,System.String)">
            <summary>
             获取默认序列名
            </summary>
            <param name="tableName">表名</param>
            <param name="paramName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetSequenceInit(System.String,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            初始化序列名
            </summary>
            <param name="seqName"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.OnConnectionClosed(System.Data.Common.DbConnection,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            连接被关闭时候触发
            </summary>
            <param name="conn">连接</param>
            <param name="db">数据库信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetAddDescriptionSQL(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取创建注释的SQL
            </summary>
            <param name="table">表</param>
            <param name="pInfo">字段（如果为空则设置表注释）</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.GetColumnDescriptionSQL(Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取在字段添加SQL
            </summary>
            <param name="table">表</param>
            <param name="pInfo">字段（如果为空则设置表注释）</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.CreateTableSQLEnd(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            创建表语句的结束
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.KeyWordDEFAULTFront">
            <summary>
            Default的关键字是否在NotNull前边
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.DoLike(System.String,System.String,Buffalo.DB.DataBaseAdapter.BQLLikeType,Buffalo.DB.DataBaseAdapter.BQLCaseType,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            进行like不去分大小写
            </summary>
            <param name="source"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter.DoOrderBy(System.String,Buffalo.DB.QueryConditions.SortType,Buffalo.DB.DataBaseAdapter.BQLCaseType,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            进行排序
            </summary>
            <param name="param">字段</param>
            <param name="sortType">排序</param>
            <param name="isCase">是否区分大小写</param>
            <param name="info">数据库信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBStructure.GetAllTableName(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取所有表名
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBStructure.GetAddParamSQL">
            <summary>
            添加字段的语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBStructure.GetRelation(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取所有关系
            </summary>
            <param name="chileName">子表名，查询有这里为nulls</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBStructure.GetTablesInfo(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取表信息
            </summary>
            <param name="oper"></param>
            <param name="info"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBStructure.OnCheckEvent(System.Object,Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent,System.Collections.Generic.List{System.String})">
            <summary>
            数据库检查时候的事建
            </summary>
            <param name="arg">当前类型</param>
            <param name="dbInfo">数据库类型</param>
            <param name="type">检查类型</param>
            <param name="lstSQL">SQL语句</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.IDbAdapters.IAdapterLoader.SetDBVersion(System.String)">
            <summary>
            数据库版本
            </summary>
            <param name="version"></param>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.LoadTypeInfo">
            <summary>
            加载类型的缓存信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.LoadTypeInfo.AppendNode(System.Xml.XmlNode,System.Type)">
            <summary>
            创建XML节点
            </summary>
            <param name="baseNode">基节点</param>
            <param name="objType">类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.LoadTypeInfo.LoadFromXmlNode(System.Xml.XmlNode,Buffalo.Kernel.FastReflection.AssemblyTypeLoader)">
            <summary>
            通过Xml节点加载数据
            </summary>
            <param name="node">节点</param>
            <param name="assemblyTypeLoader">节点</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.AdapterLoader">
            <summary>
            适配器加载器
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.AdapterLoader.DbAdapter">
            <summary>
            当前数据库适配器
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.AggregateFunctions">
            <summary>
            聚合函数处理
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.ConvertFunction">
            <summary>
            数值转换函数
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.ConvertFunction.GetFormat(System.String)">
            <summary>
            格式化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.ConvertFunction.DateTimeToString(System.String,System.String)">
            <summary>
            日期转字符串
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.ConvertFunction.StringToDateTime(System.String,System.String)">
            <summary>
            字符串转成日期
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.ConvertFunction.ConvetTo(System.String,System.Data.DbType)">
            <summary>
            把数据转成指定类型
            </summary>
            <param name="value">数据</param>
            <param name="dbType">指定类型</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.CursorPageCutter">
            <summary>
            游标分页
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.CursorPageCutter.Query(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            查询并且返回集合(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.CursorPageCutter.QueryDataTable(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.CutPageSqlCreater">
            <summary>
            生成分页语句的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.CutPageSqlCreater.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            生成SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.CutPageSqlCreater.GetCutPageSql(System.String,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            获取分页语句
            </summary>
            <param name="sql">要被分页的SQL</param>
            <param name="objCondition">分页类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.CutPageSqlCreater.GetTotalRecord(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,System.String,System.Int64,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取总记录数
            </summary>
            <param name="part">查询条件</param>
            <param name="list">变量列表</param>
            <param name="oper">通用类</param>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.IsShowExpression">
            <summary>
            全文搜索时候排序字段是否显示表达式
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetTruncateTable(System.String)">
            <summary>
            清空表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.IsSaveIdentityParam">
            <summary>
            是否记录自增长字段作手动处理
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetColumnDescriptionSQL(Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取在字段添加SQL
            </summary>
            <param name="table">表</param>
            <param name="pInfo">字段（如果为空则设置表注释）</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.RebuildParamList(System.String@,Buffalo.DB.DbCommon.ParamList)">
            <summary>
            重建参数集合
            </summary>
            <param name="lstPrm"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetDataParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            获取参数类
            </summary>
            <param name="paramName">参数名</param>
            <param name="type">参数数据库类型</param>
            <param name="paramValue">参数值</param>
            <param name="paramDir">参数进出类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.FormatDbType(System.Data.DbType)">
            <summary>
            格式化数据库类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetTopSelectSql(Buffalo.DB.QueryConditions.SelectCondition,System.Int32)">
            <summary>
            获取top的查询字符串
            </summary>
            <param name="sql">查询字符串</param>
            <param name="top">top值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.ToCurrentDbType(System.Data.DbType)">
            <summary>
            把数据类型转换成当前数据库支持的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetCommand">
            <summary>
            获取SQL命令类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetConnection(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取SQL连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetAdapter">
            <summary>
            获取SQL适配器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.FormatParam(System.String)">
            <summary>
            格式化字段名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.FormatTableName(System.String)">
            <summary>
            格式化表格名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.FormatValueName(System.String)">
            <summary>
            格式化变量名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.FormatParamKeyName(System.String)">
            <summary>
            格式化变量的键名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.FreeTextLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.ContainsLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.Query(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetNowDate(System.Data.DbType)">
            <summary>
            获取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetUTCDate(System.Data.DbType)">
            <summary>
            获取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetTimeStamp(System.Data.DbType)">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.QueryDataTable(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.Query(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="lstParam">参数集合</param>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.QueryDataTable(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.ConcatString(System.String[])">
            <summary>
            获取字符串拼接SQl语句
            </summary>
            <param name="str">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetIdentitySQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetIdentityValueSQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长值的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetSequenceName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取序列名
            </summary>
            <param name="tableName">表名</param>
            <param name="entityInfo">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetDefaultSequenceName(System.String,System.String)">
            <summary>
             获取默认序列名
            </summary>
            <param name="tableName">表名</param>
            <param name="paramName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetSequenceInit(System.String,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            初始化序列名
            </summary>
            <param name="seqName"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetDateTimeString(System.Object)">
            <summary>
            把变量转变成SQL语句中的时间表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetIdentityParamName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候自动增长的字段名
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetIdentityParamValue(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候自动增长的字段值
            </summary>
            <param name="entityInfo">实体信息</param>
            <param name="info">属性信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.SetObjectValueFromReader(System.Data.IDataReader,System.Int32,System.Object,Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Boolean)">
            <summary>
            根据Reader的内容把数值赋进实体
            </summary>
            <param name="reader">Reader</param>
            <param name="index">当前Reader的索引</param>
            <param name="arg">目标对象</param>
            <param name="info">目标属性的句柄</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.DBIdentity(System.String,System.String)">
            <summary>
            获取数据库的自增长字段的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.DBTypeToSQL(System.Data.DbType,System.Int64,System.Boolean)">
            <summary>
            把DBType类型转成对应的SQLType
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.GetAddDescriptionSQL(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取创建注释的SQL
            </summary>
            <param name="table">表</param>
            <param name="paramName">字段(如果为空则给表设置注释)</param>
            <param name="description">注释</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.CreateTableSQLEnd(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            创建表语句的结束
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBAdapter.DoLike(System.String,System.String,Buffalo.DB.DataBaseAdapter.BQLLikeType,Buffalo.DB.DataBaseAdapter.BQLCaseType,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            like不区分大小写
            </summary>
            <param name="source"></param>
            <param name="lstParam"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBStructure">
            <summary>
            数据库结构特性类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBStructure.FillAllTableInfos(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            填充所有表信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBStructure.GetTablesInfo(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取数据库表信息
            </summary>
            <param name="oper"></param>
            <param name="info"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBStructure.GetPrimaryKeyMap(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取表的主键映射
            </summary>
            <param name="lst"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBStructure.FillParam(Buffalo.DB.DataBaseAdapter.DBTableInfo,System.Data.IDataReader,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            填充字段信息
            </summary>
            <param name="prm">字段信息</param>
            <param name="reader">reader</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.DBStructure.OnCheckEvent(System.Object,Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent,System.Collections.Generic.List{System.String})">
            <summary>
            数据库检查时候的事建
            </summary>
            <param name="arg">当前类型</param>
            <param name="dbInfo">数据库类型</param>
            <param name="type">检查类型</param>
            <param name="lstSQL">SQL语句</param>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.SequenceManager">
            <summary>
            主键序列管理
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.SequenceManager.GetSequenceName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取该属性的序列
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.SequenceManager.GetDefaultName(System.String,System.String)">
            <summary>
            获取默认的序列名
            </summary>
            <param name="tableName">表</param>
            <param name="paramName">字段</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.SequenceManager.GetInitSequence(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            初始化序列
            </summary>
            <param name="seqName"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.Oracle9Adapter.SequenceManager.IsSequenceExists(System.String,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取序列是否存在
            </summary>
            <param name="seqName">序列名</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2K12Adapter.AdapterLoader.DbAdapter">
            <summary>
            当前数据库适配器
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K12Adapter.AggregateFunctions">
            <summary>
            聚合函数处理
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K12Adapter.CutPageSqlCreater">
            <summary>
            生成分页语句的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2K12Adapter.CutPageSqlCreater.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            生成SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2K12Adapter.CutPageSqlCreater.CreateCutPageSql(Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="part">SQL条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2K12Adapter.CutPageSqlCreater.GetTotalRecord(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取总记录数
            </summary>
            <param name="part">查询条件</param>
            <param name="list">变量列表</param>
            <param name="oper">通用类</param>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.AdapterLoader">
            <summary>
            适配器加载器
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.AdapterLoader.DbAdapter">
            <summary>
            当前数据库适配器
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.AggregateFunctions">
            <summary>
            聚合函数处理
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.CutPageSqlCreater">
            <summary>
            生成分页语句的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.CutPageSqlCreater.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            生成SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.CutPageSqlCreater.CreateCutPageSql(Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="part">SQL条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.CutPageSqlCreater.GetTotalRecord(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取总记录数
            </summary>
            <param name="part">查询条件</param>
            <param name="list">变量列表</param>
            <param name="oper">通用类</param>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.DBAdapter.IsShowExpression">
            <summary>
            全文搜索时候排序字段是否显示表达式
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K5Adapter.DBStructure">
            <summary>
            数据库结构特性类
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K8Adapter.AdapterLoader">
            <summary>
            适配器加载器
            </summary>8
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2K8Adapter.AdapterLoader.DbAdapter">
            <summary>
            当前数据库适配器
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K8Adapter.AggregateFunctions">
            <summary>
            聚合函数处理
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K8Adapter.CutPageSqlCreater">
            <summary>
            生成分页语句的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2K8Adapter.DBAdapter.DBTypeToSQL(System.Data.DbType,System.Int64,System.Boolean)">
            <summary>
            把DBType类型转成对应的SQLType
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2K8Adapter.DBStructure">
            <summary>
            数据库结构特性类
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AdapterLoader">
            <summary>
            适配器加载器
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AdapterLoader.DbAdapter">
            <summary>
            当前数据库适配器
            </summary>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AggregateFunctions">
            <summary>
            聚合函数处理
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AggregateFunctions.DoSum(System.String)">
            <summary>
            处理sum函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AggregateFunctions.DoCount(System.String)">
            <summary>
            处理Count函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AggregateFunctions.DoMax(System.String)">
            <summary>
            处理Max函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AggregateFunctions.DoMin(System.String)">
            <summary>
            处理Min函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AggregateFunctions.DoStdDev(System.String)">
            <summary>
            处理StdDev函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.AggregateFunctions.DoAvg(System.String)">
            <summary>
            处理Avg函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction">
            <summary>
            数值转换函数
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction.SplitItems(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            替换集合的字符
            </summary>
            <param name="itemCollection">要替换的集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction.StringEquals(System.String,System.Int32,System.String)">
            <summary>
            判断源字符串从指定位置开始是否有匹配的keyword
            </summary>
            <param name="source">源字符串</param>
            <param name="index">指定位置</param>
            <param name="keyWord">关键字</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction.FormatDateTime(System.String,System.String)">
            <summary>
            格式化字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction.GetFormatCode(System.String)">
            <summary>
            获取格式化字符
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction.DateTimeToString(System.String,System.String)">
            <summary>
            日期转字符串
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction.StringToDateTime(System.String,System.String)">
            <summary>
            字符串转成日期
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.ConvertFunction.ConvetTo(System.String,System.Data.DbType)">
            <summary>
            把数据转成指定类型
            </summary>
            <param name="value">数据</param>
            <param name="dbType">指定类型</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CursorPageCutter">
            <summary>
            游标分页
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CursorPageCutter.ProcName">
            <summary>
            分页存储过程名称
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CursorPageCutter.InitProc(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            初始化分页存储过程
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CursorPageCutter.GetProcCode">
            <summary>
            获取游标分页的存储过程的代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CursorPageCutter.Query(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            查询并且返回集合(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CursorPageCutter.QueryDataTable(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CutPageSqlCreater">
            <summary>
            生成分页语句的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CutPageSqlCreater.GetGroupPart(Buffalo.DB.QueryConditions.SelectCondition,System.Text.StringBuilder)">
            <summary>
            获取分组分页的片段
            </summary>
            <param name="objCondition"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CutPageSqlCreater.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            生成SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CutPageSqlCreater.GetFristPageSql(Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            获取第一页的SQL
            </summary>
            <param name="sql"></param>
            <param name="objCondition"></param>
            <param name="objPage"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CutPageSqlCreater.FilterGroupOrderBy(System.String,System.String)">
            <summary>
            处理groupBy
            </summary>
            <param name="group">groupBy</param>
            <param name="newAlias">新别名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CutPageSqlCreater.CreateCutPageSql(Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="part">SQL条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.CutPageSqlCreater.GetTotalRecord(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            获取总记录数
            </summary>
            <param name="part">查询条件</param>
            <param name="list">变量列表</param>
            <param name="oper">通用类</param>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.IsShowExpression">
            <summary>
            全文搜索时候排序字段是否显示表达式
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.DBIdentity(System.String,System.String)">
            <summary>
            获取数据库的自增长字段的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.RebuildParamList(System.String@,Buffalo.DB.DbCommon.ParamList)">
            <summary>
            重建参数集合
            </summary>
            <param name="lstPrm"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetColumnDescriptionSQL(Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取在字段添加SQL
            </summary>
            <param name="table">表</param>
            <param name="pInfo">字段（如果为空则设置表注释）</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.DBTypeToSQL(System.Data.DbType,System.Int64,System.Boolean)">
            <summary>
            把DBType类型转成对应的SQLType
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetTruncateTable(System.String)">
            <summary>
            清空表
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.ToRealDbType(System.Data.DbType,System.Int64)">
            <summary>
            把DBType转成本数据库的实际类型
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.IsSaveIdentityParam">
            <summary>
            是否记录自增长字段作手动处理
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetDataParameter(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            获取参数类
            </summary>
            <param name="paramName">参数名</param>
            <param name="type">参数数据库类型</param>
            <param name="paramValue">参数值</param>
            <param name="paramDir">参数进出类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetTopSelectSql(Buffalo.DB.QueryConditions.SelectCondition,System.Int32)">
            <summary>
            获取top的查询字符串
            </summary>
            <param name="sql">查询字符串</param>
            <param name="top">top值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetSequenceName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取序列名
            </summary>
            <param name="tableName">表名</param>
            <param name="entityInfo">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetDefaultSequenceName(System.String,System.String)">
            <summary>
             获取默认序列名
            </summary>
            <param name="tableName">表名</param>
            <param name="paramName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetSequenceInit(System.String,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            初始化序列名
            </summary>
            <param name="seqName"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.ToCurrentDbType(System.Data.DbType)">
            <summary>
            把数据类型转换成当前数据库支持的类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetCommand">
            <summary>
            获取SQL命令类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetConnection(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取SQL连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetAdapter">
            <summary>
            获取SQL适配器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.FormatParam(System.String)">
            <summary>
            格式化字段名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.FormatTableName(System.String)">
            <summary>
            格式化表格名
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.FormatValueName(System.String)">
            <summary>
            格式化变量名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.FormatParamKeyName(System.String)">
            <summary>
            格式化变量的键名
            </summary>
            <param name="pname"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.FreeTextLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.ContainsLike(System.String,System.String)">
            <summary>
            返回全文检索的查询语句
            </summary>
            <param name="paranName"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetNowDate(System.Data.DbType)">
            <summary>
            获取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetUTCDate(System.Data.DbType)">
            <summary>
            获取当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetTimeStamp(System.Data.DbType)">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.Query(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.QueryDataTable(System.String,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.Query(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            游标分页
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="lstParam">参数集合</param>
            <param name="sql">sql语句</param>
            <param name="objPage">分页实体</param>
            <param name="oper">数据库链接</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.QueryDataTable(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.QueryConditions.PageContent,Buffalo.DB.DbCommon.DataBaseOperate,System.Type)">
            <summary>
            查询并且返回DataSet(游标分页)
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="lstParam">参数集合</param>
            <param name="objPage">分页对象</param>
            <param name="oper">数据库对象</param>
            <param name="curType">映射的实体类型(如果用回数据库的原列名，则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.CreatePageSql(Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.QueryConditions.SelectCondition,Buffalo.DB.QueryConditions.PageContent,System.Boolean)">
            <summary>
            生成分页SQL语句
            </summary>
            <param name="list">参数列表</param>
            <param name="oper">连接对象</param>
            <param name="objCondition">条件对象</param>
            <param name="objPage">分页记录类</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.ConcatString(System.String[])">
            <summary>
            获取字符串拼接SQl语句
            </summary>
            <param name="str">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetIdentitySQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetIdentityValueSQL(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            获取自动增长值的SQL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetDateTimeString(System.Object)">
            <summary>
            把变量转变成SQL语句中的时间表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetIdentityParamName(Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候的主键字段名
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetIdentityParamValue(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityPropertyInfo)">
            <summary>
            插入时候的主键字段值
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.ValueFromReader(System.Data.IDataReader,System.Int32,System.Object,Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Boolean)">
            <summary>
            根据Reader的内容把数值赋进实体
            </summary>
            <param name="reader">Reader</param>
            <param name="index">当前Reader的索引</param>
            <param name="arg">目标对象</param>
            <param name="info">目标属性的句柄</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetAddDescriptionSQL(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem,Buffalo.DB.PropertyAttributes.EntityParam,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取创建注释的SQL
            </summary>
            <param name="table">表</param>
            <param name="paramName">字段(如果为空则给表设置注释)</param>
            <param name="description">注释</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.SetObjectValueFromReader(System.Data.IDataReader,System.Int32,System.Object,Buffalo.DB.EntityInfos.EntityPropertyInfo,System.Boolean)">
            <summary>
            根据Reader的内容把数值赋进实体
            </summary>
            <param name="reader">Reader</param>
            <param name="index">当前Reader的索引</param>
            <param name="arg">目标对象</param>
            <param name="info">目标属性的句柄</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.CreateTableSQLEnd(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            创建表语句的结束
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter._isCheckcollation">
            <summary>
            是否检查过排序
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter._collationCaseName">
            <summary>
            区分大小写排序名
            </summary>
        </member>
        <member name="F:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter._collationIgnoreName">
            <summary>
            不区分大小写排序名
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.InitCollationName(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            排序名
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetCollate(System.Boolean,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取区分大小写SQL
            </summary>
            <param name="iscase">是否区分</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBAdapter.GetLikeString(Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter,Buffalo.DB.DataBaseAdapter.BQLLikeType,System.String)">
            <summary>
            获取like的参数
            </summary>
            <param name="ida"></param>
            <param name="type"></param>
            <param name="param"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure">
            <summary>
            数据库结构特性类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.GetAllTableName(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取所有用户表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.GetAddParamSQL">
            <summary>
            添加字段的语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.AllInTableNames(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取要In的表名
            </summary>
            <param name="childName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.GetRelation(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取所有关系
            </summary>
            <param name="chileName">null则查询所有表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.GetTableParamsSQL">
            <summary>
            初始化获取表名语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.GetTablesInfo(Buffalo.DB.DbCommon.DataBaseOperate,Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取表信息
            </summary>
            <param name="oper"></param>
            <param name="info"></param>
            <param name="tableNames"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.FillRelation(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.DataBaseAdapter.DBTableInfo},System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.TableRelationAttribute})">
            <summary>
            填充关系信息
            </summary>
            <param name="dicTables"></param>
            <param name="lstRelation"></param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.FillParam(Buffalo.DB.DataBaseAdapter.DBTableInfo,System.Data.IDataReader)">
            <summary>
            填充字段信息
            </summary>
            <param name="prm">字段信息</param>
            <param name="reader">reader</param>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.GetDbType(System.String)">
            <summary>
            获取DbType
            </summary>
            <param name="nativeType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.DBStructure.OnCheckEvent(System.Object,Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.DataBaseAdapter.IDbAdapters.CheckEvent,System.Collections.Generic.List{System.String})">
            <summary>
            数据库检查时候的事建
            </summary>
            <param name="arg">当前类型</param>
            <param name="dbInfo">数据库类型</param>
            <param name="type">检查类型</param>
            <param name="lstSQL">SQL语句</param>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.FormatCode.Code">
            <summary>
            格式代码
            </summary>
        </member>
        <member name="P:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.FormatCode.VarcharLength">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoAbs(System.String[])">
            <summary>
            处理abs函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoCeil(System.String[])">
            <summary>
            处理Ceil函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoFloor(System.String[])">
            <summary>
            处理floor函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoRound(System.String[])">
            <summary>
            处理round函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoExp(System.String[])">
            <summary>
            处理exp函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoLn(System.String[])">
            <summary>
            处理ln函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoLog10(System.String[])">
            <summary>
            处理log函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoSqrt(System.String[])">
            <summary>
            处理SQRT函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoPower(System.String[])">
            <summary>
            处理power函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoRandom(System.String[])">
            <summary>
            处理随机函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoSign(System.String[])">
            <summary>
            处理Sign函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoSin(System.String[])">
            <summary>
            处理Sin函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoCos(System.String[])">
            <summary>
            处理Cos函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoTan(System.String[])">
            <summary>
            处理Tan函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoAsin(System.String[])">
            <summary>
            处理Asin函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoAcos(System.String[])">
            <summary>
            处理Acos函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoAtan(System.String[])">
            <summary>
            处理Atan函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.DoAtan2(System.String[])">
            <summary>
            处理Atan2函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.IndexOf(System.String[])">
            <summary>
            处理查找字符串函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataBaseAdapter.SqlServer2KAdapter.MathFunctions.SubString(System.String[])">
            <summary>
            处理截取字符串函数
            </summary>
            <param name="paramName"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataFillers.CacheReader">
            <summary>
            为封装对象创建缓存信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.GenerateDataTable(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            根据Reader结构生成DataTable
            </summary>
            <param name="reader">Reader</param>
            <param name="datatableName">数据表名</param>
            <param name="isEmpty">是否生成空的DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.GenerateDataSet(System.Data.IDataReader,System.Boolean)">
            <summary>
            根据Reader结构生成DataTable
            </summary>
            <param name="reader">Reader</param>
            <param name="datatableName">数据表名</param>
            <param name="isEmpty">是否生成空的DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.GenerateDataTable(System.Data.IDataReader,System.String,System.Type,System.Boolean)">
            <summary>
            根据Reader结构和实体属性的映射生成空的DataTable
            </summary>
            <param name="reader">Reader</param>
            <param name="datatableName">数据表名</param>
            <param name="entityType">实体类</param>
            <param name="isEmpty">是否生成空的DataTable</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.GenerateCache(System.Data.IDataReader,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            创建Reader缓存
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.LoadFormReader``1(System.Data.IDataReader,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            从Reader里边读取一个对象数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="reader">reader</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.LoadFormReader``1(System.Data.IDataReader)">
            <summary>
            从Reader里边读取一个对象数据
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="reader">reader</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.LoadFormReaderList``1(System.Data.IDataReader)">
            <summary>
            从Reader里边读取数据集合(快速)
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="reader">reader</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.FillObjectFromReader(System.Data.IDataReader,System.Collections.Generic.List{Buffalo.DB.EntityInfos.EntityPropertyInfo},System.Object,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            把Reader的值读到对象
            </summary>
            <param name="reader">reader</param>
            <param name="lstParams">方法对应列表</param>
            <param name="obj">对象</param>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.LoadFormReaderList``1(System.Data.IDataReader,Buffalo.DB.EntityInfos.EntityInfoHandle,System.Int32@)">
            <summary>
            从Reader里边读取数据集合(快速,返回集合的大小)
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="reader">reader</param>
            <param name="entityInfo">实体类信息</param>
            <param name="totalSize">集合总大小</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.FillObjectFromReader(System.Data.IDataReader,System.Collections.Generic.List{Buffalo.DB.EntityInfos.EntityPropertyInfo},System.Object,System.Int32@)">
            <summary>
            把Reader的值读到对象
            </summary>
            <param name="reader">reader</param>
            <param name="lstParams">方法对应列表</param>
            <param name="obj">对象</param>
            <param name="itemSize">本条记录的大小</param>
        </member>
        <member name="M:Buffalo.DB.DataFillers.CacheReader.CurValueSize(System.Object)">
            <summary>
            获取此值占用的空间
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DataFillers.MappingContorl">
            <summary>
            填充子项和父项的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.DataFillers.MappingContorl.GetPropertyName">
            <summary>
            获取当前调用填充的属性名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.MappingContorl.FillChildList(System.String,Buffalo.DB.CommBase.EntityBase)">
            <summary>
            填充该列表的子类
            </summary>
            <param name="sender">发送者</param>
        </member>
        <member name="M:Buffalo.DB.DataFillers.MappingContorl.FillChilds(System.Object,Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityMappingInfo,Buffalo.DB.CommBase.EntityBase,System.String)">
            <summary>
            填充字类列表
            </summary>
            <param name="pks">ID集合</param>
            <param name="childHandle">子元素的信息句柄</param>
            <param name="mappingInfo">映射信息</param>
            <param name="dicElement">元素</param>
        </member>
        <member name="M:Buffalo.DB.DataFillers.MappingContorl.GetPkHandle(System.Type,System.String)">
            <summary>
            获取指定对应字段名的属性句柄
            </summary>
            <param name="type">类型</param>
            <param name="pkName">字段名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DataFillers.MappingContorl.FillParent(System.String,Buffalo.DB.CommBase.EntityBase)">
            <summary>
            填充该列表的子类
            </summary>
            <param name="sender">发送者</param>
        </member>
        <member name="M:Buffalo.DB.DataFillers.MappingContorl.FillParent(System.Object,Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.DB.EntityInfos.EntityMappingInfo,System.String,Buffalo.DB.CommBase.EntityBase)">
            <summary>
            填充字类列表
            </summary>
            <param name="pks">ID集合</param>
            <param name="fatherInfo">父表对应类的信息</param>
            <param name="dicElement">元素</param>
            <param name="mappingInfo">当前父表对应属性的映射信息</param>
        </member>
        <member name="T:Buffalo.DB.DBCheckers.DBChecker">
            <summary>
            检查数据库
            </summary>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.DBChecker.ExecuteSQL(Buffalo.DB.DbCommon.DataBaseOperate,System.Collections.Generic.List{System.String})">
            <summary>
            执行SQL语句
            </summary>
            <param name="oper">数据库连接</param>
            <param name="lstSQL">SQL语句</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.DBChecker.CheckDataBase(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            检查数据库
            </summary>
            <param name="db">数据库</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.DBChecker.FillParamInfos(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            填充字段信息
            </summary>
            <param name="tableInfo">表信息</param>
            <param name="entityInfo">实体信息</param>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.DBChecker.FillRelation(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            填充关系
            </summary>
            <param name="tableInfo">表信息</param>
            <param name="entityInfo">实体信息</param>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.GetAllTables(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取所有表/视图信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.GetTableInfo(Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.List{System.String})">
            <summary>
            获取表信息
            </summary>
            <param name="info">数据库</param>
            <param name="tableNames">表名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.FilterDistinct(System.Collections.Generic.List{Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem})">
            <summary>
            去除重复的表
            </summary>
            <param name="lstTable"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.MergeTableInfo(Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem,Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem)">
            <summary>
            合并同名表信息
            </summary>
            <param name="itemSource"></param>
            <param name="itemTarget"></param>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.MergeRelation(System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.TableRelationAttribute},System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.TableRelationAttribute})">
            <summary>
            合并关系
            </summary>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.MergeEntityParam(System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.EntityParam},System.Collections.Generic.List{Buffalo.DB.PropertyAttributes.EntityParam})">
            <summary>
            合并字段
            </summary>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.CheckTable(Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.List{Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem})">
            <summary>
            检查表信息
            </summary>
            <param name="info">数据库</param>
            <param name="lstTableInfos">需要检查的表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.IsIdentityType(System.Data.DbType)">
            <summary>
            判断数据库类型是否可作为自增长主键
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.CreateTableSQL(System.Collections.Generic.List{System.String},Buffalo.DB.DataBaseAdapter.DBInfo,System.Collections.Generic.List{Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem})">
            <summary>
            创建表的SQL
            </summary>
            <param name="sql">sql语句集合</param>
            <param name="dbInfo">数据信息</param>
            <param name="notExists">不存在的表</param>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.FilteExistsTable(System.Collections.Generic.List{Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem},System.Collections.Generic.List{Buffalo.DB.DataBaseAdapter.DBTableInfo},System.Collections.Generic.List{Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem},System.Collections.Generic.List{Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem})">
            <summary>
            找出不存在的表
            </summary>
            <param name="tableName">要同步的表</param>
            <param name="dbTables">数据库的表</param>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.CheckTableStruct(System.Collections.Generic.List{System.String},Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem)">
            <summary>
            检测表结构
            </summary>
            <param name="lstSql">需要更新的SQL</param>
            <param name="dbInfo">数据库信息</param>
            <param name="table">要检测的表</param>
        </member>
        <member name="M:Buffalo.DB.DBCheckers.TableChecker.CheckRelation(System.Collections.Generic.List{System.String},Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.BQLCommon.BQLKeyWordCommon.KeyWordTableParamItem)">
            <summary>
            检测关系
            </summary>
            <param name="dbInfo">数据库</param>
            <param name="table">要检测的表</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.DbCommon.CommitState">
            <summary>
            提交方式
            </summary>
        </member>
        <member name="F:Buffalo.DB.DbCommon.CommitState.AutoCommit">
            <summary>
            自动提交(关闭连接)
            </summary>
        </member>
        <member name="F:Buffalo.DB.DbCommon.CommitState.UserCommit">
            <summary>
            手动提交(关闭连接)
            </summary>
        </member>
        <member name="T:Buffalo.DB.DbCommon.DataBaseOperate">
            <summary>
            数据库访问类
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.IsConnected">
            <summary>
            数据库连接标志
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.IsReadConnected">
            <summary>
            只读连接的标志
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.Connection">
            <summary>
            数据库连接
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.ReadOnlyConnection">
            <summary>
            只读数据库连接
            </summary>
        </member>
        <member name="F:Buffalo.DB.DbCommon.DataBaseOperate._readcomm">
            <summary>
            只读的命令
            </summary>
        </member>
        <member name="F:Buffalo.DB.DbCommon.DataBaseOperate._forceMasterConnection">
            <summary>
            强制用主连接操作
            </summary>
        </member>
        <member name="F:Buffalo.DB.DbCommon.DataBaseOperate._outputer">
            <summary>
            输出器
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.IsTran">
            <summary>
            事务是否已经开启
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.DataBaseName">
            <summary>
            获取数据库名字
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.CommitState">
            <summary>
            是否自动关闭连接
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.ForceMasterConnection">
            <summary>
            强制主连接操作
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.DBInfo">
            <summary>
            关联数据库信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.StarBatchAction">
            <summary>
            开启非事务的批量操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.#ctor(Buffalo.DB.DataBaseAdapter.DBInfo,System.Boolean)">
            <summary>
            实例化数据库访问对象
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.GetSchema">
            <summary>
            返回此 System.Data.Common.DbConnection 的数据源的架构信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.GetSchema(System.String)">
            <summary>
            返回此 System.Data.Common.DbConnection 的数据源的架构信息
            </summary>
            <param name="collectionName">指定要返回的架构的名称</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.GetSchema(System.String,System.String[])">
            <summary>
            返回此 System.Data.Common.DbConnection 的数据源的架构信息
            </summary>
            <param name="collectionName">指定要返回的架构的名称</param>
            <param name="restrictionValues">为请求的架构指定一组限制值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.ReadOnlyConnectDataBase">
            <summary>
            连接只读数据库，并打开数据库连接
            </summary>
            <returns>成功返回true</returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.ConnectDataBase">
            <summary>
            连接数据库，并打开数据库连接
            </summary>
            <returns>成功返回true</returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.Dispose">
            <summary>
            释放占用资源
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.CloseDataBase">
            <summary>
            关闭数据库连接
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.AutoClose">
            <summary>
            按照标识位自动关闭连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.QueryDataSet(System.String,Buffalo.DB.DbCommon.ParamList,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            运行查询的方法,返回一个DataSet
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="sTableName">查询出来的表名</param>
            <param name="paramList">SqlParameter的列表</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.GetSearchCommand">
            <summary>
            获取查询的命令类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.QueryDataSet(System.String,Buffalo.DB.DbCommon.ParamList,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            运行查询的方法,返回一个DataSet
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="paramList">SqlParameter的列表</param>
            <param name="queryCommandType">SQL语句类型</param>
            <returns>返回结果集</returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.Query(System.String,Buffalo.DB.DbCommon.ParamList,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            运行查询的方法，返回一个DataReader，适合小数据的读取
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="paramList">SqlParameter的列表</param>
            <returns>返回DataReader</returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.Query(System.String,Buffalo.DB.DbCommon.ParamList,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            运行查询的方法，返回一个DataReader，适合小数据的读取
            </summary>
            <param name="sql">要查询的SQL语句</param>
            <param name="paramList">SqlParameter的列表</param>
            <param name="exeCommandType">SQL语句类型</param>
            <returns>返回DataReader</returns>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.LastAffectedRows">
            <summary>
            最后影响行数
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.RoolBack">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.Execute(System.String,Buffalo.DB.DbCommon.ParamList,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            执行修改数据库操作，修改、删除等无返回值的操作
            </summary>
            <param name="sql">执行的SQL语句</param>
            <param name="paramList">SqlParameter的列表</param>
            <returns>成功执行返回True</returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.Execute(System.String,Buffalo.DB.DbCommon.ParamList,System.Data.CommandType,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            执行修改数据库操作，修改、删除等无返回值的操作
            </summary>
            <param name="sql">执行的SQL语句</param>
            <param name="paramList">SqlParameter的列表</param>
            <param name="queryCommandType">SQL语句类型</param>
            <returns>成功执行返回True</returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.StartTransaction(System.Data.IsolationLevel)">
            <summary>
            开启事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.StartTransaction">
            <summary>
            开启事务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.StartTran(System.Data.IsolationLevel)">
            <summary>
            开始事务处理功能，之后执行的全部数据库操作语句需要调用提交函数（_commit）生效
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.Commit">
            <summary>
            当前待处理事务提交，失败全部回滚
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.OutMessage(Buffalo.DB.MessageOutPuters.MessageType,System.String,System.String,System.String)">
            <summary>
            输出信息
            </summary>
            <param name="messType">信息类型</param>
            <param name="type">具体类型</param>
            <param name="extendType">开展类型</param>
            <param name="value">值</param>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DataBaseOperate.OutMessage(Buffalo.DB.MessageOutPuters.MessageType,Buffalo.DB.MessageOutPuters.MessageInfo)">
            <summary>
            输出信息
            </summary>
            <param name="messType">信息类型</param>
            <param name="type">具体类型</param>
            <param name="extendType">开展类型</param>
            <param name="value">值</param>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DataBaseOperate.MessageOutputer">
            <summary>
            信息输出器
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DBConn.GetConnection(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取指定连接
            </summary>
            <param name="connectionKey">指定连接的连接字符串的键(如果要默认键则此为null)</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.DBConn.GetReadConnection(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取指定只读连接
            </summary>
            <param name="connectionKey">指定连接的连接字符串的键(如果要默认键则此为null)</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DBParameter.ValueName">
            <summary>
            在SQL语句中的值名称
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DBParameter.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DBParameter.Direction">
            <summary>
            参数类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DBParameter.ParameterName">
            <summary>
            参数名
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.DBParameter.Value">
            <summary>
            参数值
            </summary>
        </member>
        <member name="T:Buffalo.DB.DbCommon.LockDBItem">
            <summary>
            锁定的连接项
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.LockDBItem.#ctor(Buffalo.DB.DataBaseAdapter.DBInfo,System.Int32)">
            <summary>
            锁定的连接项
            </summary>
            <param name="db">要锁定的数据库</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="F:Buffalo.DB.DbCommon.LockDBItem._db">
            <summary>
            连接
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.LockDBItem.DB">
            <summary>
            连接
            </summary>
        </member>
        <member name="F:Buffalo.DB.DbCommon.LockDBItem._lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="P:Buffalo.DB.DbCommon.LockDBItem.Lock">
            <summary>
            锁
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.LockDBItem.Dispose">
            <summary>
            释放锁
            </summary>
        </member>
        <member name="T:Buffalo.DB.DbCommon.ParamList">
            <summary>
            SqlParameter的列表
            </summary>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.NewKeyName(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            新的键名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.NewValueKeyName(Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            新的值名
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.NewParameter(System.Data.DbType,System.Object,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            新的数据库值
            </summary>
            <param name="type">数据库类型</param>
            <param name="paramValue">值类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.AddNew(System.String,System.Data.DbType,System.Object)">
            <summary>
            创建一个新的IDataParameter并添加到列表
            </summary>
            <param name="paramName">IDataParameter要映射参数的名字</param>
            <param name="type">参数类型</param>
            <param name="paramValue">参数的值</param>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.AddNew(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建一个新的IDataParameter并添加到列表
            </summary>
            <param name="paramName">IDataParameter要映射参数的名字</param>
            <param name="type">参数类型</param>
            <param name="paramValue">参数的值（如果为输入的参数，此项可为null）</param>
            <param name="paramDir">参数的输入类型</param>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.Fill(System.Data.IDbCommand,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            把列表里边的SqlParameter加到SqlCommand里边
            </summary>
            <param name="comm">要加进去的SqlCommand</param>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.GetParamString(Buffalo.DB.DataBaseAdapter.DBInfo,Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            获取param里边的值的显示字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.GetParamString(Buffalo.DB.DataBaseAdapter.DBInfo,System.Boolean,System.Int32)">
            <summary>
            获取param里边的值的信息
            </summary>
            <param name="db">数据库</param>
            <param name="showBinary">是否显示byte[]</param>
            <param name="hideTextLength">当字符串长度大于这个值时候，则隐藏值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.GetParameter(Buffalo.DB.DbCommon.DBParameter,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            获取实际数据库的字段变量
            </summary>
            <param name="prm"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DbCommon.ParamList.ReturnParameterValue(System.Data.IDbCommand,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回变量的值
            </summary>
            <param name="comm"></param>
            <param name="db"></param>
        </member>
        <member name="P:Buffalo.DB.DbCommon.ParamList.Item(System.String)">
            <summary>
            获取第几个SqlParameter
            </summary>
        </member>
        <member name="T:Buffalo.DB.DBFunction.DBMathFunction">
            <summary>
            数学函数的调用
            </summary>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoAbs(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            绝对值
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoAcos(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            反余弦值
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoAsin(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            反正弦值
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoAtan(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            反正切值
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoAtan2(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            反正切值2
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoCeil(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回不小于x 的下一个整数
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoCos(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            余弦
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoExp(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            指数函数，自然常数e为底的指数函数
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoFloor(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回比参数小的最大整数用
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoLn(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回指定数字的自然对数（底为 e）。
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoLog10(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
             返回指定数字以 10 为底的对数。
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoPower(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回指定数字的指定次幂。
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoRandom(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回随机数
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoRound(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            将小数值舍入到最接近的整数。
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoSign(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回表示数字符号的值。
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoSin(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            正弦函数
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoSqrt(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            返回指定数字的平方根。
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoTan(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            正切函数
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.IndexOf(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            报告指定 Unicode 字符在此字符串中的第一个匹配项的索引。
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.DoMod(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            求模运算
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.BitAND(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            按位与运算
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.BitNot(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            非运算
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.BitOR(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            按位或运算
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.BitXOR(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            按位异或运算
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.DBFunction.DBMathFunction.SubString(System.String[],Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            截取字符串
            </summary>
            <param name="values"></param>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.CH">
            <summary>
            代理类创建器
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.CH.Create``1">
            <summary>
            创建代理类
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.CH.Create(System.Type)">
            <summary>
            创建代理类
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.CH.GetProxyType``1">
            <summary>
            获取代理类类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.CH.GetProxyType(System.Type)">
            <summary>
            获取代理类类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.CH.GetRealType(System.Object)">
            <summary>
            获取真正的类型
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.CH.IsPrimaryNULL(Buffalo.DB.CommBase.EntityBase)">
            <summary>
            判断实体主键是否为未赋值(关联查询出来实际不存在的实体)
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.EntityConfigInfo">
            <summary>
            实体配置信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityConfigInfo.Type">
            <summary>
            实体类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityConfigInfo.ConfigXML">
            <summary>
            配置的XML
            </summary>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.EntityInfoHandle">
            <summary>
            类的信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.#ctor(System.Type,Buffalo.Kernel.FastReflection.CreateInstanceHandler,Buffalo.DB.PropertyAttributes.TableAttribute,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            类的信息
            </summary>
            <param name="entityType">类的类型</param>
            <param name="createInstanceHandler">创建类的反射信息</param>
            <param name="tableInfo">关联表信息</param>
            <param name="db">关联数据库信息</param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.InitPrimaryProperty">
            <summary>
            初始化主键信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.GetNeedLazy">
            <summary>
            获取是否需要延迟加载
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.SetInfoHandles(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.EntityInfos.EntityPropertyInfo},System.Collections.Generic.Dictionary{System.String,Buffalo.DB.EntityInfos.EntityMappingInfo})">
            <summary>
            设置属性信息和关联映射信息
            </summary>
            <param name="propertyInfoHandles">属性信息集合</param>
            <param name="mappingInfoHandles">关联映射信息集合</param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.InitInfo">
            <summary>
            初始化信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.InitProxyType(Buffalo.DB.ProxyBuilder.EntityProxyBuilder)">
            <summary>
            初始化代理类
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.DBInfo">
            <summary>
            当前所属数据库的信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.EntityType">
            <summary>
            本实体的类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.Description">
            <summary>
            注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.TableName">
            <summary>
            对应的表名名
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.PropertyInfo">
            <summary>
            获取属性的信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.MappingInfo">
            <summary>
            映射信息集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.ProxyType">
            <summary>
            代理类
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.CreateInstance">
            <summary>
            返回此类型的实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.CreateProxyInstance">
            <summary>
            返回此类型的代理类实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.CreateSelectProxyInstance">
            <summary>
            返回此类型的代理类实例(用于查询)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoHandle.PrimaryProperty">
            <summary>
            主属性
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.InitPropertyUpdateInfo">
            <summary>
            初始化属性的更新信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoHandle.GetUpdatePropertyInfo(System.String)">
            <summary>
            获取本属性的关联更新信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.EntityInfoManager">
            <summary>
            实体属性管理
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.GetEntityHandle(System.Type,System.Boolean)">
            <summary>
            获取实体类里边得属性信息
            </summary>
            <param name="type">类型</param>
            <param name="isThrowException">是否抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.GetEntityHandle(System.Type)">
            <summary>
            获取实体类里边得属性信息
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityInfoManager.AllEntity">
            <summary>
            所有实体的信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.IsSysBaseType(System.Type)">
            <summary>
            判断是否系统类型
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.FillEntityInfos(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.PropertyAttributes.EntityParam},System.Collections.Generic.Dictionary{System.String,Buffalo.DB.PropertyAttributes.TableRelationAttribute},System.Type,Buffalo.DB.PropertyAttributes.TableAttribute,System.Collections.Generic.Dictionary{System.String,Buffalo.DB.EntityInfos.EntityConfigInfo})">
            <summary>
            填充类信息
            </summary>
            <param name="dicParam">字段</param>
            <param name="dicRelation">关系</param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.FillEntityInfo(System.Xml.XmlDocument,Buffalo.DB.PropertyAttributes.TableAttribute)">
            <summary>
            填充实体信息
            </summary>
            <param name="doc"></param>
            <param name="dicRelation"></param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.FillRelationInfo(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.String,Buffalo.DB.PropertyAttributes.TableRelationAttribute})">
            <summary>
            填充映射信息
            </summary>
            <param name="doc"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.FillPropertyInfo(System.Xml.XmlDocument,System.Collections.Generic.Dictionary{System.String,Buffalo.DB.PropertyAttributes.EntityParam})">
            <summary>
            填充属性信息
            </summary>
            <param name="doc"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.InitAllEntity(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.EntityInfos.EntityConfigInfo})">
            <summary>
            初始化所有实体
            </summary>
            <param name="dicConfigs"></param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.FillNotFoundField(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.PropertyAttributes.EntityParam},System.Collections.Generic.Dictionary{System.String,Buffalo.DB.PropertyAttributes.TableRelationAttribute},System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            填充没找到的字段和关系
            </summary>
            <param name="dicParams">字段配置</param>
            <param name="dicRelation">关系配置</param>
            <param name="dicNotFindParam">没找到的字段</param>
            <param name="dicNotFindRelation">没找到的关系</param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.InitEntityPropertyInfos(System.Type,System.Collections.Generic.Dictionary{System.String,Buffalo.DB.EntityInfos.EntityConfigInfo})">
            <summary>
            初始化类型的属性信息
            </summary>
            <param name="type">类型</param>
            <returns>如果已经初始化过侧返回false</returns>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.FillAttributeInfo(System.Type,Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            填充特殊信息指定标签
            </summary>
            <param name="type"></param>
            <param name="dicParamsInfo"></param>
            <param name="tableAtt"></param>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityInfoManager.GetMappingParam(System.Reflection.FieldInfo)">
            <summary>
            获取某个方法的属性
            </summary>
            <param name="finf"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.EntityMappingInfo">
            <summary>
            实体映射的属性信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityMappingInfo.#ctor(System.Type,Buffalo.Kernel.FastReflection.GetFieldValueHandle,Buffalo.Kernel.FastReflection.SetFieldValueHandle,Buffalo.DB.PropertyAttributes.TableRelationAttribute,System.String,System.Type,System.Reflection.FieldInfo,System.Reflection.PropertyInfo)">
            <summary>
            创建属性的信息类
            </summary>
            <param name="belong">所属的实体</param>
            <param name="getHandle">get委托</param>
            <param name="setHandle">set委托</param>
            <param name="tableMappingAtt">映射标识类</param>
            <param name="fieldName">属性名</param>
            <param name="fieldType">属性类型</param>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityMappingInfo.BelongPropertyInfo">
            <summary>
            所属的属性信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityMappingInfo.MappingInfo">
            <summary>
            映射信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityMappingInfo.Copy(System.Type)">
            <summary>
            拷贝副本
            </summary>
            <param name="belong">所属实体</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityMappingInfo.PropertyName">
            <summary>
            对应的属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityMappingInfo.Description">
            <summary>
            对应的属性注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityMappingInfo.IsParent">
            <summary>
            是否主表属性
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityMappingInfo.SourceProperty">
            <summary>
            源属性
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityMappingInfo.TargetProperty">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.EntityPropertyInfo">
            <summary>
            实体的属性信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityPropertyInfo.#ctor(Buffalo.DB.EntityInfos.EntityInfoHandle,Buffalo.Kernel.FastReflection.GetFieldValueHandle,Buffalo.Kernel.FastReflection.SetFieldValueHandle,Buffalo.DB.PropertyAttributes.EntityParam,System.Type,System.String,System.Reflection.FieldInfo,System.Reflection.PropertyInfo)">
            <summary>
            创建属性的信息类
            </summary>
            <param name="belong">所属的实体信息</param>
            <param name="getHandle">get委托</param>
            <param name="setHandle">set委托</param>
            <param name="ep">字段标识类</param>
            <param name="fieldType">字段类型</param>
            <param name="fieldName">字段名</param>
            <param name="sourceType">源字段类型</param>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.BelongPropertyInfo">
            <summary>
            所属的属性信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.ReadOnly">
            <summary>
            只读
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.ParamInfo">
            <summary>
            字段配置信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.EntityPropertyInfo.Copy(Buffalo.DB.EntityInfos.EntityInfoHandle)">
            <summary>
            返回拷贝副本
            </summary>
            <param name="belong">新副本所属的实体</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.BelongInfo">
            <summary>
            所属实体类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.PropertyName">
            <summary>
            对应的属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.Description">
            <summary>
            属性注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.SqlType">
            <summary>
            获取对应的字段的SQL类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.ParamName">
            <summary>
            获取对应的字段的名字
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.IsPrimaryKey">
            <summary>
            获取对应的字段是否主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.Identity">
            <summary>
            是否自动增长字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.IsNormal">
            <summary>
            是否自动普通字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.EntityPropertyInfo.IsVersion">
            <summary>
            是否版本信息字段
            </summary>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.MappingInfoCollection">
            <summary>
            映射信息集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.MappingInfoCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.EntityInfos.EntityMappingInfo})">
            <summary>
            映射信息集合
            </summary>
            <param name="propertyInfoHandles">映射信息的哈希表</param>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.MappingInfoCollection.Item(System.String)">
            <summary>
            根据属性名获取映射属性信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.MappingInfoCollection.Count">
            <summary>
            当前属性的数量
            </summary>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.MappingInfoEnumerator">
            <summary>
            映射的枚举类
            </summary>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.PrimaryKeyInfo">
            <summary>
            主键信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.PrimaryKeyInfo.Item(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle)">
            <summary>
            主键值
            </summary>
            <param name="prm"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.PropertyEnumerator">
            <summary>
            属性的枚举类
            </summary>
        </member>
        <member name="T:Buffalo.DB.EntityInfos.PropertyInfoCollection">
            <summary>
            属性信息集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.EntityInfos.PropertyInfoCollection.#ctor(System.Collections.Generic.Dictionary{System.String,Buffalo.DB.EntityInfos.EntityPropertyInfo})">
            <summary>
            属性信息集合
            </summary>
            <param name="propertyInfoHandles">属性信息的哈希表</param>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.PropertyInfoCollection.Item(System.String)">
            <summary>
            根据属性名获取属性信息
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.EntityInfos.PropertyInfoCollection.Count">
            <summary>
            当前属性的数量
            </summary>
        </member>
        <member name="T:Buffalo.DB.Exceptions.SQLRunningException">
            <summary>
            SQL执行错误
            </summary>
        </member>
        <member name="M:Buffalo.DB.Exceptions.SQLRunningException.#ctor(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DataBaseAdapter.DBInfo,System.Exception)">
            <summary>
            SQL执行错误
            </summary>
            <param name="sql">sql语句</param>
            <param name="innerException">关联异常</param>
            <param name="prmList">变量集合</param>
        </member>
        <member name="M:Buffalo.DB.Exceptions.SQLRunningException.GetMessage(System.String,Buffalo.DB.DbCommon.ParamList,Buffalo.DB.DataBaseAdapter.DBInfo,System.Exception)">
            <summary>
            获取输出的信息
            </summary>
            <param name="sql"></param>
            <param name="prmList"></param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.Exceptions.SQLRunningExceptionOption">
            <summary>
            异常输出信息的配置
            </summary>
        </member>
        <member name="P:Buffalo.DB.Exceptions.SQLRunningExceptionOption.ShowBinary">
            <summary>
            输出SQL时候是否输出二进制变量值的Hex
            </summary>
        </member>
        <member name="P:Buffalo.DB.Exceptions.SQLRunningExceptionOption.HideTextLength">
            <summary>
            输出SQL时候设置一个值，当字符串大于这个长度时候则隐藏值
            </summary>
        </member>
        <member name="T:Buffalo.DB.FaintnessSearchConditions.FullTextConfigManager">
            <summary>
            获取配置全文搜索的配
            </summary>
        </member>
        <member name="M:Buffalo.DB.FaintnessSearchConditions.FullTextConfigManager.FilterLikeValue(System.String)">
            <summary>
            过滤like的值
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.FaintnessSearchConditions.FullTextConfigManager.GetLikeSql(Buffalo.DB.QueryConditions.Scope,Buffalo.DB.DbCommon.ParamList,System.String,System.Data.DbType,System.Int32,System.Type,System.String,System.Boolean)">
            <summary>
            返回Like的查询字符串
            </summary>
            <param name="scope">条件类</param>
            <param name="list">参数列表</param>
            <param name="paranName">所属的字段名</param>
            <param name="type">当前的数据库类型</param>
            <param name="lstIndex">当前索引的标识未辨别同名字段的参数，可设置为0</param>
            <param name="entityType">当前实体的类型</param>
            <param name="connectString">条件连接的字符串</param>
            <param name="isFreeText">是否全文检索</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.FaintnessSearchConditions.NoiseWord">
            <summary>
            判断是否干扰词的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.FaintnessSearchConditions.NoiseWord.IsNoiseWord(System.String)">
            <summary>
            判断关键词是否干扰词
            </summary>
            <param name="word">关键字</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.FaintnessSearchConditions.NoiseWord.IsChineseLetter(System.Char)">
            <summary>
            判断字符是否中文
            </summary>
            <param name="chr">字符</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.ListExtends.CompareItem">
            <summary>
            List过滤器器中的暂存类
            </summary>
        </member>
        <member name="M:Buffalo.DB.ListExtends.CompareItem.#ctor(System.Boolean,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            比较结果存放类
            </summary>
            <param name="curCompare">比较结果</param>
            <param name="connectType">连接条件</param>
        </member>
        <member name="P:Buffalo.DB.ListExtends.CompareItem.CurCompare">
            <summary>
            比较结果
            </summary>
        </member>
        <member name="P:Buffalo.DB.ListExtends.CompareItem.ConnectType">
            <summary>
            连接条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.ListExtends.CompareItemInfo.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.ListExtends.CompareItemInfo.ScopeInfo">
            <summary>
            条件信息
            </summary>
        </member>
        <member name="T:Buffalo.DB.ListExtends.DataFilter">
            <summary>
            提供对IList数据过滤和排序的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.RowFilter(System.Collections.IList,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            过滤集合
            </summary>
            <param name="sourceList">源集合</param>
            <param name="lstScope">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.IsAllAccord(System.Collections.Generic.List{Buffalo.DB.ListExtends.CompareItem})">
            <summary>
            是否通过所有条件
            </summary>
            <param name="lstCompareItem">比较结果集合</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.IsAccord(System.Object,Buffalo.DB.QueryConditions.Scope)">
            <summary>
            是否通过条件
            </summary>
            <param name="value"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.SortList(System.Collections.IList,Buffalo.DB.QueryConditions.SortType)">
            <summary>
            对值集合进行排序
            </summary>
            <param name="lst">值集合</param>
            <param name="lstSort">排序方式</param>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.IsAccord(System.Object,System.Object,Buffalo.DB.QueryConditions.SortType)">
            <summary>
            比较两个值是否合乎排序条件
            </summary>
            <param name="val1">值1</param>
            <param name="val2">值2</param>
            <param name="objType">排序条件</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.SortList(System.Collections.IList,Buffalo.DB.QueryConditions.SortList)">
            <summary>
            对实体集合进行排序
            </summary>
            <param name="lst">实体集合</param>
            <param name="lstSort">排序方式</param>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.GetSortComparts(System.Object,Buffalo.DB.QueryConditions.SortList)">
            <summary>
            根据排序方式列表获取对象的Get属性句柄和对应排序方式
            </summary>
            <param name="obj"></param>
            <param name="lstSort"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.DataFilter.IsAccordCompare(System.Object,System.Object,System.Collections.Generic.List{Buffalo.DB.ListExtends.SortCompartItem})">
            <summary>
            根据排序条件对比两个对象(是否符合所有排序条件)
            </summary>
            <param name="val1">对象1</param>
            <param name="val2">对象2</param>
            <param name="lstSort">比较条件列表</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.CollectValues(System.Collections.IEnumerable,System.String)">
            <summary>
            收集集合里边所有对应属性的值
            </summary>
            <param name="list">集合</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.CollectValues``2(System.Collections.Generic.IEnumerable{``1},System.String)">
            <summary>
            根据集合里边对应属性的值组合出Dictionary
            </summary>
            <param name="list">集合</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.CollectValues``1(System.Collections.IEnumerable)">
            <summary>
            根据集合组装出Dictionary
            </summary>
            <param name="list">集合</param>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.WriteXml(System.Collections.IList,System.String)">
            <summary>
            把集合写入XML文件
            </summary>
            <param name="list">集合</param>
            <param name="root">路径</param>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.WriteXml(System.Collections.IList,System.IO.Stream,Buffalo.DB.QueryConditions.PageContent,System.Text.Encoding)">
            <summary>
            把集合写入XML流
            </summary>
            <param name="list">集合</param>
            <param name="stm">流</param>
            <param name="objPage">分页</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.ValueToString(System.Object)">
            <summary>
            把类型转换成字符串
            </summary>
            <param name="value">类型</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Buffalo.DB.ListExtends.ListXMLExtends.WriteXml(System.Collections.IList,System.IO.Stream,System.Text.Encoding)" -->
        <!-- Badly formed XML comment ignored for member "M:Buffalo.DB.ListExtends.ListXMLExtends.WriteXml(System.Collections.IList,System.IO.Stream)" -->
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.ReadXML``1(System.IO.Stream,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            从流中读取XML
            </summary>
            <param name="stm">流</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.StringToValue(System.String,System.Type)">
            <summary>
            把字符串的值还原成原类型的值
            </summary>
            <param name="value">字符串</param>
            <param name="type">源类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.ReadXML``1(System.IO.Stream)">
            <summary>
            从流中读取XML
            </summary>
            <param name="stm">流</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.ReadXML``1(System.String)">
            <summary>
            从文件中读取XML
            </summary>
            <param name="root">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.ConvertTo(System.Object,System.Type)">
            <summary>
            把该值转成指定类型
            </summary>
            <param name="value">值</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.ToByteString(System.Byte[])">
            <summary>
            把字节数组打成字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.ListXMLExtends.StringToBytes(System.String)">
            <summary>
            把字符串组合回字节数组
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.ListExtends.SortCompartItem.GetValueHandler">
            <summary>
            此排序的取值句柄
            </summary>
        </member>
        <member name="P:Buffalo.DB.ListExtends.SortCompartItem.CurSortType">
            <summary>
            排序方式
            </summary>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.LoadItems``1(System.String)">
            <summary>
            读取信息集合
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.LoadItems``1(System.String,Buffalo.DB.QueryConditions.PageContent,System.Text.Encoding)">
            <summary>
            读取信息集合
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.LoadItems``1(System.String,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            读取信息集合
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.LoadItem``1(System.String)">
            <summary>
            读取信息
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.LoadItem``1(System.String,System.Text.Encoding)">
            <summary>
            读取信息
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.ItemToString(System.Object)">
            <summary>
            返回单个项的XML信息
            </summary>
            <param name="item">项</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.ItemToString(System.Object,System.Text.Encoding)">
            <summary>
            返回单个项的XML信息
            </summary>
            <param name="item">项</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.ItemsToString(System.Collections.IList,Buffalo.DB.QueryConditions.PageContent,System.Text.Encoding)">
            <summary>
            返回集合项的XML字符串
            </summary>
            <param name="items">集合项</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.ItemsToString(System.Collections.IList,Buffalo.DB.QueryConditions.PageContent)">
            <summary>
            返回集合项的XML字符串
            </summary>
            <param name="items">集合项</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ListExtends.XMLExtendsLoader.ItemsToString(System.Collections.IList)">
            <summary>
            返回集合项的XML字符串
            </summary>
            <param name="items">集合项</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.MessageOutPuters.DebugOutputer.OutPut(Buffalo.DB.MessageOutPuters.MessageType,Buffalo.DB.MessageOutPuters.MessageInfo)">
            <summary>
            输出信息
            </summary>
            <param name="messType"></param>
            <param name="mess"></param>
        </member>
        <member name="T:Buffalo.DB.MessageOutPuters.MessageInfo">
            <summary>
            输出信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.MessageOutPuters.MessageInfo.GetValue(System.String)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.MessageOutPuters.MessageInfo.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.MessageOutPuters.MessageInfo.ExtendType">
            <summary>
            扩展类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.MessageOutPuters.MessageInfo.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:Buffalo.DB.MessageOutPuters.MessageOutput">
            <summary>
            信息输出类
            </summary>
        </member>
        <member name="M:Buffalo.DB.MessageOutPuters.MessageOutput.#ctor">
            <summary>
            信息输出类
            </summary>
        </member>
        <member name="M:Buffalo.DB.MessageOutPuters.MessageOutput.CreateOutput(Buffalo.DB.DbCommon.DataBaseOperate)">
            <summary>
            创建输出器
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.MessageOutPuters.MessageOutput.HasOutput">
            <summary>
            判断是否有输出器
            </summary>
        </member>
        <member name="M:Buffalo.DB.MessageOutPuters.MessageOutput.ClearOutpuHandle">
            <summary>
            清除输出事件
            </summary>
        </member>
        <member name="T:Buffalo.DB.MessageOutPuters.MessageOutputBase">
            <summary>
            输出器基类
            </summary>
        </member>
        <member name="M:Buffalo.DB.MessageOutPuters.MessageOutputBase.OutPut(Buffalo.DB.MessageOutPuters.MessageType,Buffalo.DB.MessageOutPuters.MessageInfo)">
            <summary>
            输出信息
            </summary>
            <param name="messType">信息类型</param>
            <param name="mess">信息</param>
        </member>
        <member name="P:Buffalo.DB.MessageOutPuters.MessageOutputBase.ShowBinary">
            <summary>
            输出SQL时候是否输出二进制变量值的Hex
            </summary>
        </member>
        <member name="P:Buffalo.DB.MessageOutPuters.MessageOutputBase.HideTextLength">
            <summary>
            输出SQL时候设置一个值，当字符串大于这个长度时候则隐藏值
            </summary>
        </member>
        <member name="M:Buffalo.DB.MessageOutPuters.MessageOutputBase.OutPut(Buffalo.DB.MessageOutPuters.MessageType,System.String,System.String,System.String)">
            <summary>
            输出信息
            </summary>
            <param name="messType">消息类型</param>
            <param name="type">类型</param>
            <param name="extendType">扩展类型</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.MessageOutPuters.MessageType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.AttributesGetter.GetEntityParam(System.Reflection.FieldInfo)">
            <summary>
            获取某个属性的实体映射标识
            </summary>
            <param name="pinf">属性的信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.AttributesGetter.GetTableAttribute(System.Type)">
            <summary>
            获取该实体对应的表名
            </summary>
            <param name="type">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.PropertyAttributes.DataBaseAttribute">
            <summary>
            数据库标识
            </summary>
        </member>
        <member name="T:Buffalo.DB.PropertyAttributes.EntityParam">
            <summary>
            字段信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.EntityParam.#ctor">
            <summary>
            实体字段标识
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.EntityParam.#ctor(System.String,System.String,System.String,System.Data.DbType,Buffalo.DB.PropertyAttributes.EntityPropertyType,System.String,System.String)">
            <summary>
            实体字段标识
            </summary>
            <param name="fieldName">字段名</param>
            <param name="paramName">数据库字段名</param>
            <param name="propertyName">属性名</param>
            <param name="sqlType">Sql类型</param>
            <param name="propertyType">属性类型</param>
            <param name="description">备注</param>
            <param name="length">长度</param>
            <param name="allowNull">允许空</param>
            <param name="isReadOnly">只读</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.EntityParam.#ctor(System.String,System.String,System.String,System.Data.DbType,Buffalo.DB.PropertyAttributes.EntityPropertyType,System.String,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            实体字段标识
            </summary>
            <param name="fieldName">字段名</param>
            <param name="paramName">数据库字段名</param>
            <param name="propertyName">属性名</param>
            <param name="sqlType">Sql类型</param>
            <param name="propertyType">属性类型</param>
            <param name="description">备注</param>
            <param name="length">长度</param>
            <param name="allowNull">允许空</param>
            <param name="isReadOnly">只读</param>
            <param name="defaultValue">默认值</param>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.FieldName">
            <summary>
            对应的字段名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.ReadOnly">
            <summary>
            是否只读
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.Description">
            <summary>
            字段注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.SequenceName">
            <summary>
            序列名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.ParamName">
            <summary>
            获取对应的字段名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.PropertyName">
            <summary>
            获取对应的属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.SqlType">
            <summary>
            获取对应的数据库类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.PropertyType">
            <summary>
            属性类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.AllowNull">
            <summary>
            允许空
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.IsPrimaryKey">
            <summary>
            获取对应的字段是否主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.Identity">
            <summary>
            是否自动增长字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.IsNormal">
            <summary>
            是否普通字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.EntityParam.IsVersion">
            <summary>
            是否版本信息字段
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.EntityParam.CheckLength">
            <summary>
            检查长度
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.EntityParam.DisplayInfo(Buffalo.DB.BQLCommon.BQLConditionCommon.KeyWordInfomation,System.String)">
            <summary>
            输出信息
            </summary>
            <param name="info"></param>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.EntityParam.GetDefaultValue(Buffalo.DB.DataBaseAdapter.IDbAdapters.IDBAdapter,System.Data.DbType,System.String)">
            <summary>
            获取默认值
            </summary>
            <param name="idba">数据库适配器</param>
            <param name="type">数据类型</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.PropertyAttributes.EntityPropertyType">
            <summary>
            实体的属性类型
            </summary>
        </member>
        <member name="F:Buffalo.DB.PropertyAttributes.EntityPropertyType.Normal">
            <summary>
            普通属性
            </summary>
        </member>
        <member name="F:Buffalo.DB.PropertyAttributes.EntityPropertyType.PrimaryKey">
            <summary>
            主键属性
            </summary>
        </member>
        <member name="F:Buffalo.DB.PropertyAttributes.EntityPropertyType.Version">
            <summary>
            版本号属性
            </summary>
        </member>
        <member name="F:Buffalo.DB.PropertyAttributes.EntityPropertyType.Identity">
            <summary>
            自动增长字段
            </summary>
        </member>
        <member name="T:Buffalo.DB.PropertyAttributes.SequenceAttributes">
            <summary>
            序列标识
            </summary>
        </member>
        <member name="F:Buffalo.DB.PropertyAttributes.SequenceAttributes._propertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.SequenceAttributes.PropertyName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="F:Buffalo.DB.PropertyAttributes.SequenceAttributes._sequenceName">
            <summary>
            序列名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.SequenceAttributes.SequenceName">
            <summary>
            序列名
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.SequenceAttributes.#ctor(System.String,System.String)">
            <summary>
            序列标识
            </summary>
            <param name="propertyName"></param>
            <param name="sequenceName"></param>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.TableAttribute.#ctor(System.String,System.String)">
            <summary>
            类标示
            </summary>
            <param name="tableName">表名</param>
            <param name="connectionKey">连接字符串的键</param>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.TableAttribute.#ctor">
            <summary>
            类标示
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableAttribute.AllowLazy">
            <summary>
            是否允许延迟加载
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableAttribute.Description">
            <summary>
            字段注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableAttribute.BelongDB">
            <summary>
            所属库
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableAttribute.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="T:Buffalo.DB.PropertyAttributes.TableRelationAttribute">
            <summary>
            子表标识
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.TableRelationAttribute.#ctor">
            <summary>
            关联映射信息
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.TableRelationAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            关联映射信息
            </summary>
            <param name="fieldName">对应字段</param>
            <param name="propertyName">属性</param>
            <param name="sourceProperty">源对象属性</param>
            <param name="targetProperty">目标对象属性</param>
            <param name="sourceTableType">原对象类型</param>
            <param name="targetTableType">目标对象类型</param>
            <param name="isParent">是否主表属性</param>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.Description">
            <summary>
            注释
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.FieldName">
            <summary>
            对应的字段名
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.TableRelationAttribute.CreateName">
            <summary>
            创建外键名称
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.TableRelationAttribute.SetEntity(System.Type,System.Type)">
            <summary>
            设置实体
            </summary>
            <param name="sourceEntity"></param>
            <param name="targetEniity"></param>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.FieldTypeName">
            <summary>
            字段类型名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.IsToDB">
            <summary>
            是否生成到数据库
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.Name">
            <summary>
            约束名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.PropertyName">
            <summary>
            对应的属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.SourceTable">
            <summary>
            源表名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.TargetTable">
            <summary>
            目标表名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.TargetName">
            <summary>
            目标属性名
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.TableRelationAttribute.GetTableName(System.Type)">
            <summary>
            获取类型对应的表名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.SourceName">
            <summary>
            源属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.IsParent">
            <summary>
            是否主表属性
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.SourceProperty">
            <summary>
            源属性
            </summary>
        </member>
        <member name="P:Buffalo.DB.PropertyAttributes.TableRelationAttribute.TargetProperty">
            <summary>
            目标属性
            </summary>
        </member>
        <member name="T:Buffalo.DB.PropertyAttributes.ViewRelationTables">
            <summary>
            视图关联表
            </summary>
        </member>
        <member name="M:Buffalo.DB.PropertyAttributes.ViewRelationTables.#ctor(System.Type[])">
            <summary>
            视图关联表
            </summary>
            <param name="entityType"></param>
        </member>
        <member name="F:Buffalo.DB.ProxyBuilder.EntityProxyBuilder._count">
            <summary>
            构建的类数量
            </summary>
        </member>
        <member name="F:Buffalo.DB.ProxyBuilder.EntityProxyBuilder._entityInterface">
            <summary>
            接口类型
            </summary>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.#ctor">
            <summary>
            代理建造类
            </summary>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.#ctor(System.String)">
            <summary>
            代理建造类
            </summary>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.CreateProxyType(System.Type)">
            <summary>
            建造代理类
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.BulidType(System.Type,System.Reflection.Emit.ModuleBuilder,System.String)">
            <summary>
            建造类
            </summary>
            <param name="classType"></param>
            <param name="moduleBuilder"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.BuildGetEntityType(System.Reflection.Emit.TypeBuilder)">
            <summary>
            创建获取实体类型的方法
            </summary>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.BuildMethod(System.Type,System.Reflection.Emit.TypeBuilder)">
            <summary>
            建方法
            </summary>
            <param name="classType"></param>
            <param name="inspectorFieldBuilder"></param>
            <param name="typeBuilder"></param>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.BuildEmit(System.Type,System.Reflection.PropertyInfo,System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            创建IL
            </summary>
            <param name="classType"></param>
            <param name="pInfo"></param>
            <param name="typeBuilder"></param>
            <param name="updateMethod"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.EntityProxyBuilder.BuildMapEmit(System.Type,System.Reflection.PropertyInfo,System.Reflection.FieldInfo,System.Reflection.Emit.TypeBuilder,System.Reflection.MethodInfo)">
            <summary>
            创建IL
            </summary>
            <param name="classType"></param>
            <param name="pInfo"></param>
            <param name="typeBuilder"></param>
            <param name="updateMethod"></param>
            <param name="methodName"></param>
        </member>
        <member name="M:Buffalo.DB.ProxyBuilder.IEntityProxy.GetEntityType">
            <summary>
            获取被代理的实体类型
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.AbsCondition.CacheTables">
            <summary>
            需要缓存的表
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.AbsCondition.AliasManager">
            <summary>
            表映射管理器
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.AbsCondition.ParamTypes">
            <summary>
            插入字段的数值类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.AbsCondition.Oper">
            <summary>
            数据库连接对象
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.AbsCondition._primaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.AbsCondition.PrimaryKey">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.CreateTableCondition">
            <summary>
            创建表的条件
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.CreateTableCondition._sqlParams">
            <summary>
            输出字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.CreateTableCondition.SqlParams">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.DeleteCondition._condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.DeleteCondition.Condition">
            <summary>
            条件
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.DeleteCondition._tables">
            <summary>
            查询的表
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.DeleteCondition.Tables">
            <summary>
            表
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.InsertCondition.ParamTypes">
            <summary>
            插入字段的数值类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.InsertCondition.SqlParams">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.InsertCondition.SqlValues">
            <summary>
            值
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.InsertCondition._tables">
            <summary>
            插入的表
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.InsertCondition.Tables">
            <summary>
            表
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.InsertCondition._condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.InsertCondition.Condition">
            <summary>
            主键
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.SearchType">
            <summary>
            查询类型
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SearchType.Precision">
            <summary>
            精确
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SearchType.Faintness">
            <summary>
            模糊
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.PageContent">
            <summary>
            分页类
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.PagerIndex">
            <summary>
            分页起始值
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.PageContent.GetStarIndex">
            <summary>
            获取起始查询的索引(从0开始)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.PageContent.InitData">
            <summary>
            初始化数据
            </summary>
            <param name="ds">数据集</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.PageContent.#ctor">
            <summary>
            
            </summary>
            <param name="ds">指定一个DataSet来填充数据</param>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.StarIndex">
            <summary>
            起始查询条数(从0开始)
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.PageSize">
            <summary>
            页大小
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.CurrentPage">
            <summary>
            页数，从0开始算
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.TotalRecords">
            <summary>
            该查询的总记录数
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.TotalPage">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.MaxSelectRecords">
            <summary>
            最大查询条数
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.PageContent.IsFillTotalRecords">
            <summary>
            是否查出总条数
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.ScopeType">
            <summary>
            查找条件类型
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.IN">
            <summary>
            in条件(如果集合为空，则返回1=2)
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.NotIn">
            <summary>
            notin条件(如果集合为空，则返回1=1)
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.MoreThen">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.More">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.LessThen">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.Between">
            <summary>
            在..之间
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.Like">
            <summary>
            包含
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.StarWith">
            <summary>
            开头字符
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.EndWith">
            <summary>
            结束字符
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.Contains">
            <summary>
            全文检索
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.Scope">
            <summary>
            条件
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ScopeType.Condition">
            <summary>
            BQL条件
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.ConnectType">
            <summary>
            连接条件类型
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ConnectType.And">
            <summary>
            And条件
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.ConnectType.OR">
            <summary>
            or条件
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.Scope">
            <summary>
            描述查找条件的类
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.Scope.#ctor(System.String,System.Object,System.Object,Buffalo.DB.QueryConditions.ScopeType,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value1">值1</param>
            <param name="value2">值2</param>
            <param name="scopeType">条件类型</param>
            <param name="connectType">连接类型</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.Scope.GetInCollection">
            <summary>
            获取In的集合的哈希表集合
            </summary>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Scope.Value1">
            <summary>
            值1
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Scope.Value2">
            <summary>
            值2
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Scope.ScopeType">
            <summary>
            查找条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Scope.ConnectType">
            <summary>
            连接类型
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Scope.PropertyName">
            <summary>
            返回此条件对应的属性
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.ScopeList">
            <summary>
            查找条件的集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.#ctor">
            <summary>
            查找条件的集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.GetShowProperty(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLTableHandle)">
            <summary>
            获取真正要显示的属性集合
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.GroupBy">
            <summary>
            查询时候要分组哪些属性的集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.UseCache">
            <summary>
            是否使用缓存
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.ShowEntity">
            <summary>
            要显示的实体
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.ShowChild">
            <summary>
            要显示的子实体属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.ShowProperty">
            <summary>
            查询时候要显示哪些属性的集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.HideProperty">
            <summary>
            查询时候要隐藏哪些属性的集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.HasInner">
            <summary>
            判断是否有多表查询
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.PageContent">
            <summary>
            分页信息
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.HasPage">
            <summary>
            是否有分页
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ScopeList.HasSort">
            <summary>
            判断是否有排序
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddScopeList(Buffalo.DB.QueryConditions.ScopeList,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新条件的范围
            </summary>
            <param name="lstScope">条件集合</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新条件的范围
            </summary>
            <param name="where">条件</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.IsInnerTable(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle)">
            <summary>
            判断是否多表
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddBetween(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的范围
            </summary>
            <param name="property">属性</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddBetween(System.String,System.Object,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的范围
            </summary>
            <param name="propertyName">属性名</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddContains(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的范围
            </summary>
            <param name="property">属性</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddContains(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的范围
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMore(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的大于条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMore(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的大于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMoreThen(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的大于等于条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMoreThen(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的大于等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLessThen(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的小于等于条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLessThen(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的小于等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLess(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的小于条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLess(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的小于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddIn(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Collections.IEnumerable,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="property">属性名</param>
            <param name="valuesCollection">值集合</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddIn(System.String,System.Collections.IEnumerable,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="propertyName">属性名</param>
            <param name="valuesCollection">值集合</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotIn(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Collections.IEnumerable,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="property">属性名</param>
            <param name="valuesCollection">值集合</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotIn(System.String,System.Collections.IEnumerable,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="propertyName">属性名</param>
            <param name="valuesCollection">值集合</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotEqual(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的不等于条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotEqual(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的不等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEqual(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的等于条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEqual(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLike(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的Like条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLike(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的Like条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddStarWith(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的StarWith条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddStarWith(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的StarWith条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEndWith(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的EndWith条件
            </summary>
            <param name="property">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEndWith(System.String,System.Object,Buffalo.DB.QueryConditions.ConnectType)">
            <summary>
            添加新的EndWith条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddBetween(System.String,System.Object,System.Object)">
            <summary>
            添加新的范围
            </summary>
            <param name="propertyName">属性名</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddContains(System.String,System.Object)">
            <summary>
            添加新的范围
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMore(System.String,System.Object)">
            <summary>
            添加新的大于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMoreThen(System.String,System.Object)">
            <summary>
            添加新的大于等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLessThen(System.String,System.Object)">
            <summary>
            添加新的小于等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLess(System.String,System.Object)">
            <summary>
            添加新的小于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddIn(System.String,System.Collections.IEnumerable)">
            <summary>
            添加新的In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="propertyName">属性名</param>
            <param name="valuesCollection">值集合</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotIn(System.String,System.Collections.IEnumerable)">
            <summary>
            添加新的NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="propertyName">属性名</param>
            <param name="valuesCollection">值集合</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotEqual(System.String,System.Object)">
            <summary>
            添加新的不等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEqual(System.String,System.Object)">
            <summary>
            添加新的等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLike(System.String,System.Object)">
            <summary>
            添加新的等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddBetween(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object,System.Object)">
            <summary>
            添加新的范围
            </summary>
            <param name="propertyName">属性名</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddContains(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的范围
            </summary>
            <param name="property">属性</param>
            <param name="value">最小值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMore(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的大于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddMoreThen(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的大于等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLessThen(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的小于等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLess(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的小于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddIn(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Collections.IEnumerable)">
            <summary>
            添加新的In条件(如果集合为空，则返回1=2)
            </summary>
            <param name="propertyName">属性名</param>
            <param name="valuesCollection">值集合</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotIn(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Collections.IEnumerable)">
            <summary>
            添加新的NotIn条件(如果集合为空，则返回1=1)
            </summary>
            <param name="propertyName">属性名</param>
            <param name="valuesCollection">值集合</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddNotEqual(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的不等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEqual(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddLike(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的等于条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddStarWith(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的StarWith条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddStarWith(System.String,System.Object)">
            <summary>
            添加新的StarWith条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEndWith(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,System.Object)">
            <summary>
            添加新的EndWith条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddEndWith(System.String,System.Object)">
            <summary>
            添加新的EndWith条件
            </summary>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.AddScopeList(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            添加新条件的范围
            </summary>
            <param name="lstScope">条件集合</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            添加新条件的范围
            </summary>
            <param name="where">条件</param>
            <param name="conntype">连接类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.ToXmlString">
            <summary>
            把范围集合转成XML字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeList.LoadXML(System.String)">
            <summary>
            根据XML加载范围集合项
            </summary>
            <param name="xmlString">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeXmlExtend.GetScopeXml(Buffalo.DB.QueryConditions.ScopeList,System.Text.Encoding,System.IO.Stream)">
            <summary>
            获取范围List的XML
            </summary>
            <param name="lstScope">范围集合</param>
            <param name="encode">编码</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeXmlExtend.AppendValue(System.Xml.XmlDocument,System.Xml.XmlElement,System.String,System.Object,Buffalo.DB.QueryConditions.Scope)">
            <summary>
            添加一个值
            </summary>
            <param name="doc">XML文档</param>
            <param name="ele">源元素</param>
            <param name="valueName">值的标签</param>
            <param name="value">值</param>
            <param name="objScope">范围对象</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeXmlExtend.GetScopeXmlString(Buffalo.DB.QueryConditions.ScopeList,System.Text.Encoding)">
            <summary>
            返回集合项的XML字符串
            </summary>
            <param name="items">集合项</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeXmlExtend.GetScopeXmlString(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            返回集合项的XML字符串
            </summary>
            <param name="items">集合项</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeXmlExtend.LoadScopeItems(System.IO.Stream,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            根据XML加载范围查找项
            </summary>
            <param name="xml">XML</param>
            <param name="lstScope">范围集合</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeXmlExtend.LoadScopeItems(System.String,Buffalo.DB.QueryConditions.ScopeList,System.Text.Encoding)">
            <summary>
            读取信息集合
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopeXmlExtend.LoadScopeItems(System.String,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            读取信息集合
            </summary>
            <param name="info">信息</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.SelectCondition">
            <summary>
            分页数据暂存类
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SelectCondition._sqlHaving">
            <summary>
            Having
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SelectCondition._sqlParams">
            <summary>
            输出字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SelectCondition.SqlParams">
            <summary>
            字段
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SelectCondition._tables">
            <summary>
            查询的表
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SelectCondition.Tables">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SelectCondition._condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SelectCondition.Condition">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SelectCondition._groupBy">
            <summary>
            分组
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SelectCondition.GroupBy">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SelectCondition._orders">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SelectCondition.Orders">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SelectCondition.HasGroup">
            <summary>
            是否有聚合语句
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SelectCondition.PageContent">
            <summary>
            分页对象
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.SelectCondition.GetSelect">
            <summary>
            获取查询语句
            </summary>
            <param name="hasOrder">是否有排序</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.SelectCondition.GetSelect(System.Boolean)">
            <summary>
            获取查询语句
            </summary>
            <param name="hasOrder">是否有排序</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ShowChildCollection.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle,Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            添加一个项
            </summary>
            <param name="prm">查询子项</param>
            <param name="filter">筛选条件</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ShowChildCollection.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLCondition)">
            <summary>
            添加一个项
            </summary>
            <param name="prm">查询子项</param>
            <param name="filter">筛选条件</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ShowChildCollection.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            添加一个项
            </summary>
            <param name="prm">查询子项</param>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.ShowChildItem">
            <summary>
            显示子项的集合
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ShowChildItem.ChildItem">
            <summary>
            子项
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.ShowChildItem.FilterScope">
            <summary>
            筛选条件
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ShowEntityCollection.#ctor(Buffalo.DB.QueryConditions.ScopeList)">
            <summary>
            要现实的实体集合
            </summary>
            <param name="belong"></param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ShowEntityCollection.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle)">
            <summary>
            添加一个项
            </summary>
            <param name="prm"></param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ShowEntityCollection.AddRange(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityTableHandle[])">
            <summary>
            添加一个输出字段
            </summary>
            <param name="prm"></param>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.ScopePropertyCollection">
            <summary>
            属性集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopePropertyCollection.AddPropertys(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle[])">
            <summary>
            添加属性集合
            </summary>
            <param name="prms"></param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ScopePropertyCollection.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            添加一个元素
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Sort.PropertyName">
            <summary>
            当前的排序的属性名
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Sort.SortType">
            <summary>
            当前的排序方式
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.Sort.OrderHandle">
            <summary>
            BQL排序条件
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.SortList">
            <summary>
            排序条件列表.
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.SortList.Add(System.String,Buffalo.DB.QueryConditions.SortType)">
            <summary>
            添加新的排序方式
            </summary>
            <param name="propertyName">属性名</param>
            <param name="type">排序类型</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.SortList.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLEntityParamHandle,Buffalo.DB.QueryConditions.SortType)">
            <summary>
            添加新的范围
            </summary>
            <param name="property">属性</param>
            <param name="type">排序类型</param>
            <returns>返回是否添加成功</returns>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.SortList.Item(System.String)">
            <summary>
            根据属性名获取排序方式
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.SortType">
            <summary>
            排序方式的枚举
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SortType.ASC">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.SortType.DESC">
            <summary>
            降序
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.UpdateCondition._condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.UpdateCondition.Condition">
            <summary>
            主键
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.UpdateCondition._tables">
            <summary>
            查询的表
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.UpdateCondition.Tables">
            <summary>
            表
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.AlterTableCondition">
            <summary>
            修改表的条件
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.AlterTableCondition.Operator">
            <summary>
            操作符
            </summary>
        </member>
        <member name="F:Buffalo.DB.QueryConditions.AlterTableCondition._sqlParams">
            <summary>
            输出字段
            </summary>
        </member>
        <member name="P:Buffalo.DB.QueryConditions.AlterTableCondition.SqlParams">
            <summary>
            字段
            </summary>
        </member>
        <member name="T:Buffalo.DB.QueryConditions.ValueSetList">
            <summary>
            值设置集合
            </summary>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ValueSetList.Add(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            添加一个Update设置
            </summary>
            <param name="parameter">字段</param>
            <param name="valueItem">值</param>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ValueSetList.GetKey(Buffalo.DB.BQLCommon.BQLConditionCommon.BQLParamHandle)">
            <summary>
            获取属性名
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.DB.QueryConditions.ValueSetList.Add(System.String,Buffalo.DB.BQLCommon.BQLConditionCommon.BQLValueItem)">
            <summary>
            添加一个Update设置
            </summary>
            <param name="propertyName">属性</param>
            <param name="valueItem">值</param>
        </member>
        <member name="T:Buffalo.DB.Resource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Buffalo.DB.Resource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Buffalo.DB.Resource.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Buffalo.DB.Resource.tableParam2000">
            <summary>
              查找类似 SELECT 
               tableName= d.[name],
               tableDescription=f.[value],
               tabletype=d.xtype,
               paramOrder= a.colorder,
               paramName= a.[name],
               isIdentity= COLUMNPROPERTY( a.id,a.name,&apos;IsIdentity&apos;),
               isPrimary=case when exists(SELECT 1 FROM sysobjects where xtype=&apos;PK&apos; and parent_obj=a.id and name in (
                                SELECT name FROM sysindexes WHERE indid in(SELECT indid FROM sysindexkeys WHERE id = a.id AND 
            				 colid=a.colid))) then 1 else 0 end,
               dbType= b.[name],
               dataSize=  [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="P:Buffalo.DB.Resource.tableParam2005">
            <summary>
              查找类似 SELECT 
               tableName= d.[name],
               tableDescription=f.[value],
               tabletype=d.xtype,
               paramOrder= a.colorder,
               paramName= a.[name],
               isIdentity= COLUMNPROPERTY( a.id,a.name,&apos;IsIdentity&apos;),
               isPrimary=case when exists(SELECT 1 FROM sysobjects where xtype=&apos;PK&apos; and parent_obj=a.id and name in (
                                SELECT name FROM sysindexes WHERE indid in(SELECT indid FROM sysindexkeys WHERE id = a.id AND 
            				 colid=a.colid))) then 1 else 0 end,
               dbType= b.[name],
               dataSize=  [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
