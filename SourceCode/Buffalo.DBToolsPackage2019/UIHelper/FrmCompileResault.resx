<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAGABoAwAAJgAAACAgAAABABgAqAwAAI4DAAAoAAAAEAAAACAAAAABABgAAAAAAAAD
        AAAAAAAAAAAAAAAAAAAAAAAAurm6u7q7jJKcPUxhRFFnR1VpS1lsUWBxWWh4XWyAbn2YiJa1boSffoml
        t7CxtLW0tLOytrS1dHuDWGd7SldsRlNpPEpeQE1iRlNnSFZtTVt2bXyZd4ypXW2InJicsbCxsbCvrKuq
        aXB3Z3eITlxvNEJWIy5JKjRQLjlULztWKDZRLDxWhJa0coekjo+Ur6uvrq6rp6ekZm1ycICQVGJzMT5U
        GyZCFR4/HSZGICtJGypFKjpUgpKycYqog4mNraetsqusqqqpUVtcd4OPWmh7R1RqKzdQIi1JHipGHSlF
        KjZSRFBsf5K2b4GZc3uBramjrqqqpaimMjs8e4WRaHaKT1tyTll1SVNxQU1pQk5qS1dzTlp2hJa5e42k
        aXN8qKelrK2tiY2LEhgaOkBNWGV8UFt1SVNwRU5vQ09rQU1pSVVxS1dzjJu9eIqiWGRwpKerNDc3Gh8d
        CxASGx0qTlpyRVBrUlt6UFl6TVl1Tlp2U197UV15bnydZHaOLDpIRktTBAMFCQ0WDhIbCgwTRk9kOkdg
        SVx5UmmKYnCLaXmUbn+bWGqIYXiTTVlyOT9TFyAvAgUHHCQsERskBAoQERQfQEdWj52vipuyf5Cmi521
        nbHLlqrGlqzEJzNJSlBhFR0qDA0PGR8nLzZABAcOBAYJERceWmZxe4uagJSnk6i9pbzRqL/Wj6W5LzpM
        RUpYGB8pHBYZDg0WDAwXBwQLAgcLISsyaHeDhZmoiJ+vobnJpL3Pp8DUlqy+LThIJyw3Nz5FWVxPDhEX
        AwgHBwQMAQoMGCIoZ3N/b32Nc3+Uk6O2n7fHqMTTfpWlLDdAICw+PTpAen1vGSAnAAgKCQ4cIzE4Wmhz
        YnKEXnCFYHGIYHSKgZqtnLjJlrHHdYaWKDhMcW9ucHZ0ZGx6SFZZZm53lqOrjpyoeIiZZHaLgJOmlam7
        l6y8n7PCnKu4lae1d46jmpuXb3eGdXqSgYaFioSCaXJ0dX+GmKSwl6W1kaCrjJulkJ2ljpmhiIV9c3yB
        ZX2Rn6WhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACgAAAAgAAAAQAAAAAEAGAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAC8u728urq4trbC
        wcOsr7d6go9BT2I0RFtCTmY/TGJATWNIVmlLWWxIVmhNW21UY3NRYHBTYnJUZHVcaoBod5FzgZ1+jKmJ
        mLhshJx0iaiDlbSOkqqyq7K/trO9uraxtre5uLq6uLi4tra9vL6eoaludoNCUGM/T2ZOW3FCT2VEUWdS
        YHNSYHNIVmlNW21ZZ3lfbn5jcYNhcINkcohrepR0gp6Ekq+VpMR4jqdgdZRmeJeCiJ+wrLK8s7Cyrq2x
        trm0tLS3tbW4tra3triNkZZkbHlLWWtUZXpPXHJDUGZJVmxUYXdNW25BT2JATmFHVWhNW21TYXRUYnhW
        ZHtaaYNlc497iaaSor97kapme5pcb5BfaoCQjZa9trO1sbCrrrKxsbG0srG3tbSysrKBhYphanRZZ3lo
        eY5PXXBHVWhEUWc3RFovPFI2Q1k7R18+SmI5Rlw/TGI+TGM7SWA5SGI9S2dMWnZebot9kKuAlbVwhaVK
        Vm5pa3O6tbS7t7apqq6ys7Gxr660srGqqqp3fH9ia3VicYFsfZBNW25MWm1FU2YqN00lMUk3Ql0+SWRC
        TWg3Ql07RmE5RmA1QlwwP1krOVUuPFg5SmWBkq2LoMB+lLdba4JnbHWxrayzrq+wrrSys7Gwrq2xsKyi
        o6FscXRia3RndoZneItQXnBQXnFDUWQhLkQXIj0aJUEQGzcYIkAhLEgmMU0nM08nM08lM08gL0khMEop
        OlR9i6iJnr6AmbtxhZ51fIWsqqqqpaaxrbOwsa+vrqqxsKydnpxlam1lbndwgI1oeYxWZHZVY3VDUWQg
        LEQbJkEaJUEOGDYiK0wgKkgmME4nMlAmMk4jMU0gL0kmNU8wQVt0f52Po8aAm71rgZppdHyrq6utqKqq
        pa6trqqvrqqzsq6cnZtkaWpqc3x5iZZvgZJQX29VY3VEUmUfK0MeKUQbJUMIETIdJkgUHT4bJEUbJkQZ
        JEIVIz8WJT8hMEoxQlxteJaartGCnMBZcYlRXWeoqKi1sLKpoau3r7Cxq6y0srGlqKZRWVheaW1xfYd7
        iJZbaXtWZHdNW24zQFYeKkIVIDsRHDgZJEAPGzcRHTkRHTkTHzsXIz8dKUUwPFhJVXFrfqSQo8aUpsNO
        X3JKVmCfpKWqp6O0rKWwqquxq6yxr66eoZ9DS0pVYGRve4WBjpxicINXZXhUYXdKV21BTWU7RmExPFgu
        OVUuOlYqNlImMk4tOVU5RWE+SmZFUW1SXnpyg6qRpMeQo75NXnFCTlihpqmrqqatp6Czra6zrq+0tbOX
        nJosNDNTXmKAipSJlKJ4hplda35TYHZPW3NOWXRSXXlMV3NGUG5EUGxBTWk+SmZEUGxMWHRLV3NLV3NS
        Xnp5i7CUp8qTpsFZan08SFScoqepqqippKGwq6ykoqKxsrCboJ4aIB8yOz9ncHp+h5V3hZhWY3lNWnBN
        WXFLVnFPWnZNV3VHUW9ATGhBTWlBTWlGUm5MWHRLV3NLV3NRXXl0hKmSo8SZrMdpeo07SVWUnKOmqKmo
        pqWwsLCqqqqoq6mUmZccIiEJDxQrMTxob35ndIpOW3FNWXFOWXRHUm5IUnBHUW9FTm9EUGxCTmo+SmZB
        TWlKVnJKVnJIVHBMWHR4iKyYqcqescxkdYo0RFGJkpumqa2mpaefoaG3ubmQk5FaX10aIB8LERYMEBtL
        UF9ea4FQXHRTX3dSXXhLVnJKVHJGT3BETW5CTmpFUW1DT2tDT2tIVHBJVXFKVnJRXXmBkLGfrs6Yq8ZG
        WW4pOEh6hI6jqa6kp6tRU1N0eXhJTkwUGRcKEA8UGB0HCxYwM0JVYXlNWXFPWnVQW3dTXXtUXnxKU3RG
        T3A/S2dGUm5JVXFKVnJOWnZQXHhTX3taZoJ6iaqXpsaYqcQ5TGEgMEBHU19kbHNkaG0AAQANEhEHDAoE
        CQcIDg0JDRIGCBMvLz9TX3dFUWk8R2I5RGBIUnBZYoNYYYJZYoRZZYFZZYFUYHxUYHxZZYFYZIBPW3dL
        V3M/S21od5eHmLM7TmMoOEghLTkoLzgpLDQJBAUAAAMCBAwCBxAGChUAAAgHCREaGiBLU2pVX3c7SGIi
        MEwyRGFDWHhCWHtMZYdZaIJaaIRbaYVQYXxQYH1jc5BYaokvQWAtRWF3jKd/jqg3QVktNEg5P1IeJjck
        LTsIBgYCAwcDBg4eJS4nLTgMERoAAwsICxAoL0JSW29TXnQ7SWBMXXdmeJVid5Zbc5FndpBufZd7iqR/
        kKuBkq2GmLV7japgco9ngJp6j6pXZoAnMkhAR1s/RVgLEyQSGykCBAQFCAwIDhU0PUYlLzkFDhcBBw4H
        CxAKDRsyN0ZLUmNjbX+LmayersWSo72InLV3h558jKOGl7GUpb+brsmZrMeQor+Gm7ebssyMoLk/TWQV
        HTRITmFOVWYXHi0aIzAABQQBBgkBCRAzPkYYIiwCDRUIEBcBBwwBAwsHCRMRFSBBSVaAi5mVo7WNnK+D
        lKeFmK2Elq2Elq2Oo7mfs8yjt9CftM+kudSowNiJnrQyQFYZIjZLUmNJTl0PFyQUHScLDQ0HDA8ABQwz
        PEU2QEogKTILExoAAgcLDBAGCQ4AAAcaISpSXGZ0gY+BkKB8jJx/k6WHmq+HnLGQpbqit82ov9Wpv9iw
        xt+uxdt6jaIsOk0+RVhkaXhCSFULERwaIy0PDQ0PEBQHChIqMTpGTFchJi8AAQkGCQ4AAQIAAgYDCQ4o
        MjlMVmBYZnJwgY6AkKByhpiInrCYrsCftMmkvNCmvtKju9GlvdOlvdFxhZciMEIyOktESVgsMDsRGCEs
        MzwbFRYJBQoNDBUQEhwiJC8DBA4AAAYJBw0ABAcABQgOFxtET1dicXpicn91iJeFmKd6kaGSqbmlvMyn
        v9Gnv9Gmv9OlvtKjvNCvx9mHm60vPU8pMkApLzwgJS4iKC9FTVRDOzwKAwgYExwFBA4ICBQDAgwOCRIH
        AAcECw4FCxADDRQwO0NfbXl+j5yTqLeJna6Em6qRqLibtMSdtsaft8mlv9Cqw9eqw9eowNJ8kKEqN0c0
        O0o3O0YfJC0iKC9TW2JscF0nKSMRERcQEhoBBQYDBgQLCAoJAAsBCQkEDRABCg4cJi1YYmx0gIxwfYt1
        gpJye497hpqSoLOitMWjt8ijvcunwtCjwM6vydphc34vOj43QEkpNkYeKDoVFyJcVViLkHtGSEIQExgI
        DhUGDg4CCAcDBgsHAhEACQwACQ0NFx43Qkpjb3twfYtse4tufI5reI52g5mHlauRpbeYrsCgusqpxtWu
        y9qatcpRZnUgLDYtOUUoNkgTHzEWFyFuZmaRk39jZl0cICUBCBECDhAABQUAAQoAABEBDRMJFh40QEpi
        cHxufY1mdodic4ZldotdbYRhcYhjdYxrgJWAmKyVr8CgvM2kwNGcutN3j6FZandAUGASIzgLGSs2OECF
        fHiDh3RxdW86QEcOGSEADA8AAwQCDhglLD9ATVVFVF1hb3txgY5jc4RUZXhXan9db4Zhc4pjdYxab4VZ
        boNthZmEnbGTrb6cuMmhv9ikvNCxw9SKnrA8UWdHVmmAg4eMhXx5gHNzeHdjaXRIUV4pOT8XJigrOEBk
        bXuVoqqRoKmPnamElKF0hJVqe45meY5jdYxyhZqEl6yJnrOHna+LobOPpbeYr7+iu8uovdKkt8a4yNiq
        wNJ6kqqFmauvtLeJg3hudXJobnVxeIl2fo9zf4Vue3l3foGUlqCZpauZpq6Xo62Rn6uIl6d8jJ1qe45f
        cIV+kKGPobKfscKmuciluMefsr+fsL2jtMGapa2Mlp1/jJR2iJlqgpp2jJ6lrrGMiH1sdHtlbH1ma4Rs
        c4Z2f4N/hYCCgH+Ae31lbnFdaGxmcHd+iZGMmKSIlaODkqKGlKZ/kJ14iJV5iZV/j5uEk5yEk5yGkpyG
        k5uDgn59fnpuc3Rba3hUbIJheYuksLKRkYVzfIp6gJd9gZ6HjKGJjZKGiIKTjYaWioiBiYlham1lbnKN
        l56nsbumsr6ntMKvvMyvvseerbaZqLGhrrafqrKapqyYoqmUnqWWjoGMiH2JioZ8i5Rqgph1jZ+5xcmP
        kYUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>