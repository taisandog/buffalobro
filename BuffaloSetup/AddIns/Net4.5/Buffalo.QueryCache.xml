<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Buffalo.QueryCache</name>
    </assembly>
    <members>
        <member name="T:Buffalo.QueryCache.CacheLoader">
            <summary>
            获取缓存的加载器
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.CacheLoader.GetCache(Buffalo.DB.DataBaseAdapter.DBInfo,System.String,System.String)">
            <summary>
            根据类型创建缓存适配器
            </summary>
            <param name="type">类型</param>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="T:MemcacheClient.MemDataSerialize">
            <summary>
            缓存数据序列化
            </summary>
        </member>
        <member name="F:MemcacheClient.MemDataSerialize.DefaultEncoding">
            <summary>
            默认编码
            </summary>
        </member>
        <member name="F:MemcacheClient.MemDataSerialize.HeadData">
            <summary>
            数据头表示
            </summary>
        </member>
        <member name="F:MemcacheClient.MemDataSerialize.ListHeadData">
            <summary>
            集合数据头表示
            </summary>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.DataSetToBytes(System.Data.DataSet)">
            <summary>
            数据写入成字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.WriteDataTable(System.Data.DataTable,System.IO.BinaryWriter)">
            <summary>
            写入数据表信息
            </summary>
            <param name="dt"></param>
            <param name="bw"></param>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.LoadDataSet(System.IO.Stream)">
            <summary>
            把数据从流中加载出来
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.IsHead(System.IO.Stream)">
            <summary>
            判断数据头是否对应
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.IsListHead(System.IO.Stream)">
            <summary>
            判断数据头是否对应
            </summary>
            <param name="stm"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.LoadList(System.IO.Stream,System.Type)">
            <summary>
            把数据从流中加载出来
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.ListToBytes(System.Collections.IList)">
            <summary>
            数据写入成字节数组
            </summary>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.WriteEntityList(System.Collections.IList,System.IO.BinaryWriter)">
            <summary>
            写入数据表信息
            </summary>
            <param name="lst">实体集合</param>
            <param name="bw">写入器</param>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.CreateList(System.Type)">
            <summary>
            创建实体集合类
            </summary>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemDataSerialize.ReadEntityList(System.IO.BinaryReader,System.Type)">
            <summary>
            读取实体集合
            </summary>
            <param name="br">读取器</param>
            <param name="entityType">实体类型</param>
            <returns></returns>
        </member>
        <member name="T:MemcacheClient.MemPropertyInfo">
            <summary>
            内存流属性信息
            </summary>
        </member>
        <member name="P:MemcacheClient.MemPropertyInfo.MemItem">
            <summary>
            读写器
            </summary>
        </member>
        <member name="P:MemcacheClient.MemPropertyInfo.PropertyInfo">
            <summary>
            属性信息
            </summary>
        </member>
        <member name="T:MemcacheClient.MemTypeItem">
            <summary>
            读写器的类型项
            </summary>
        </member>
        <member name="M:MemcacheClient.MemTypeItem.#ctor(System.Int32,System.Type,MemcacheClient.ReadInfo,MemcacheClient.WriteInfo)">
            <summary>
            读写器的类型项
            </summary>
            <param name="typeID"></param>
            <param name="itemType"></param>
            <param name="readHandle"></param>
            <param name="writerHandle"></param>
        </member>
        <member name="F:MemcacheClient.MemTypeItem._typeID">
            <summary>
            数值类型ID
            </summary>
        </member>
        <member name="P:MemcacheClient.MemTypeItem.ItemType">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:MemcacheClient.MemTypeItem.ReadHandle">
            <summary>
            读取方法
            </summary>
        </member>
        <member name="P:MemcacheClient.MemTypeItem.WriterHandle">
            <summary>
            写入方法
            </summary>
        </member>
        <member name="T:MemcacheClient.MemTypeManager">
            <summary>
            读写器类型管理器
            </summary>
        </member>
        <member name="F:MemcacheClient.MemTypeManager.EmptyItem">
            <summary>
            空类型
            </summary>
        </member>
        <member name="F:MemcacheClient.MemTypeManager.EnumItem">
            <summary>
            枚举类型
            </summary>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.GetTypeInfo(System.Type)">
            <summary>
            获取类型信息
            </summary>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.GetTypeByID(System.Int32)">
            <summary>
            根据类型ID获取类型信息
            </summary>
            <param name="typeID">类型ID</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.AddItem``1(System.Int32,MemcacheClient.ReadInfo,MemcacheClient.WriteInfo)">
            <summary>
            添加项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeID">分配的ID</param>
            <param name="readInfo">读取器</param>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.AddItem(MemcacheClient.MemTypeItem)">
            <summary>
            添加项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="typeID">分配的ID</param>
            <param name="readInfo">读取器</param>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.ReadChars(System.IO.BinaryReader)">
            <summary>
            读取字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.ReadEnum(System.IO.BinaryReader)">
            <summary>
            读取字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.ReadBytes(System.IO.BinaryReader)">
            <summary>
            读取字节数组
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.WriteChars(System.IO.BinaryWriter,System.Object)">
            <summary>
            写入值
            </summary>
            <param name="writer">写入器</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.WriteBytes(System.IO.BinaryWriter,System.Object)">
            <summary>
            写入值
            </summary>
            <param name="writer">写入器</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:MemcacheClient.MemTypeManager.WriteEnum(System.IO.BinaryWriter,System.Object)">
            <summary>
            写入值
            </summary>
            <param name="writer">写入器</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.QueryCache.MemCachedAdaper">
            <summary>
            利用MemCached做缓存
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.#ctor(System.String,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            memcached的适配器
            </summary>
            <param name="connStr">连接字符串</param>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.CreatePool(System.String)">
            <summary>
            创建连接池
            </summary>
            <param name="connStr"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.GetAllKeys(System.String,Buffalo.QueryCache.EmptyClass)">
            <summary>
            查找所有键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.FillAllKeys(System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Net.IPEndPoint)">
            <summary>
            查找键
            </summary>
            <param name="serverIP"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.ExecuteScalarAsString(System.Net.Sockets.Socket,System.String)">
            <summary>
            执行返回字符串标量
            </summary>
            <param name="socket">套接字</param>
            <param name="command">命令</param>
            <returns>执行结果</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.QuerySlabId(System.Net.Sockets.Socket)">
            <summary>
            查询slabId
            </summary>
            <param name="socket">套接字</param>
            <returns>slabId遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.ParseStatsItems(System.String)">
            <summary>
            解析STAT items返回slabId
            </summary>
            <param name="contentAsString">解析内容</param>
            <returns>slabId遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.QueryKeys(System.Net.Sockets.Socket,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            查询键
            </summary>
            <param name="socket">套接字</param>
            <param name="slabIdIter">被查询slabId</param>
            <returns>键遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.ParseKeys(System.String)">
            <summary>
            解析stats cachedump返回键
            </summary>
            <param name="contentAsString">解析内容</param>
            <returns>键遍历器</returns>
        </member>
        <member name="M:Buffalo.QueryCache.MemCachedAdaper.DoNewVer(System.String,Buffalo.QueryCache.EmptyClass)">
            <summary>
            设置版本号
            </summary>
            <param name="key"></param>
            <param name="client"></param>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._mainServer">
            <summary>
            主服务器
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._roserver">
            <summary>
            只读服务器
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._serverCount">
            <summary>
            服务器数量
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.#ctor(System.String,Buffalo.DB.DataBaseAdapter.DBInfo)">
            <summary>
            memcached的适配器
            </summary>
            <param name="connStr">连接字符串</param>
        </member>
        <member name="F:Buffalo.QueryCache.RedisAdaperByStackExchange._hasROServer">
            <summary>
            是否有只读服务器
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.CreateManager(System.String)">
            <summary>
            创建连接池
            </summary>
            <param name="connectionString">连接字符串</param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.GetValue``1(System.String,``0,Buffalo.QueryCache.RedisConnection)">
            <summary>
            获取值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.GetAllKeys(System.String,Buffalo.QueryCache.RedisConnection)">
            <summary>
            所有键
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.DoNewVer(System.String,Buffalo.QueryCache.RedisConnection)">
            <summary>
            设置版本号
            </summary>
            <param name="key"></param>
            <param name="client"></param>
        </member>
        <member name="M:Buffalo.QueryCache.RedisAdaperByStackExchange.GetValues(System.String[],Buffalo.QueryCache.RedisConnection)">
            <summary>
            获取值
            </summary>
            <param name="key">键</param>
            <param name="valueType">值类型</param>
            <param name="client">客户端</param>
            <returns></returns>
        </member>
        <member name="T:Buffalo.QueryCache.RedisConnection">
            <summary>
            Redis连接
            </summary>
        </member>
        <member name="P:Buffalo.QueryCache.RedisConnection.DB">
            <summary>
            关联连接
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisConverter._dicAllowConvert">
            <summary>
            允许转换的类型
            </summary>
        </member>
        <member name="F:Buffalo.QueryCache.RedisConverter._dicRedisConvert">
            <summary>
            转换的函数
            </summary>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.LoadAllowRedisConvert">
            <summary>
            加载转换函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.LoadAllowConvert">
            <summary>
            加载允许转换类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.RedisValueToValue``1(StackExchange.Redis.RedisValue)">
            <summary>
            RedisValue值转换成指定值
            </summary>
            <typeparam name="E"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Buffalo.QueryCache.RedisConverter.ValueToRedisValue(System.Object)">
            <summary>
            值转换成RedisValue
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
